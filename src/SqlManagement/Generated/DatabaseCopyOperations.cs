// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Sql;
using Microsoft.WindowsAzure.Management.Sql.Models;

namespace Microsoft.WindowsAzure.Management.Sql
{
    /// <summary>
    /// The SQL Database Management API includes operations for managing SQL
    /// Database Copies for a subscription.
    /// </summary>
    internal partial class DatabaseCopyOperations : IServiceOperations<SqlManagementClient>, IDatabaseCopyOperations
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseCopyOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DatabaseCopyOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Create Database Copy operation starts a database copy.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the SQL Server where the source database resides
        /// </param>
        /// <param name='databaseName'>
        /// The name of the source database
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters for the create database copy operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<DatabaseCopyResponse> CreateAsync(string serverName, string databaseName, DatabaseCopyCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.PartnerDatabase == null)
            {
                throw new ArgumentNullException("parameters.PartnerDatabase");
            }
            if (parameters.PartnerServer == null)
            {
                throw new ArgumentNullException("parameters.PartnerServer");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName + "/databasecopies";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement serviceResourceElement = new XElement(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(serviceResourceElement);
                
                XElement partnerServerElement = new XElement(XName.Get("PartnerServer", "http://schemas.microsoft.com/windowsazure"));
                partnerServerElement.Value = parameters.PartnerServer;
                serviceResourceElement.Add(partnerServerElement);
                
                XElement partnerDatabaseElement = new XElement(XName.Get("PartnerDatabase", "http://schemas.microsoft.com/windowsazure"));
                partnerDatabaseElement.Value = parameters.PartnerDatabase;
                serviceResourceElement.Add(partnerDatabaseElement);
                
                if (parameters.MaxLagInMinutes != null)
                {
                    XElement maxLagInMinutesElement = new XElement(XName.Get("MaxLagInMinutes", "http://schemas.microsoft.com/windowsazure"));
                    maxLagInMinutesElement.Value = parameters.MaxLagInMinutes.ToString();
                    serviceResourceElement.Add(maxLagInMinutesElement);
                }
                
                XElement isContinuousElement = new XElement(XName.Get("IsContinuous", "http://schemas.microsoft.com/windowsazure"));
                isContinuousElement.Value = parameters.IsContinuous.ToString().ToLower();
                serviceResourceElement.Add(isContinuousElement);
                
                XElement isForcedTerminateElement = new XElement(XName.Get("IsForcedTerminate", "http://schemas.microsoft.com/windowsazure"));
                isForcedTerminateElement.Value = parameters.IsForcedTerminate.ToString().ToLower();
                serviceResourceElement.Add(isForcedTerminateElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseCopyResponse result = new DatabaseCopyResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourceElement2 = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourceElement2 != null)
                    {
                        XElement nameElement = serviceResourceElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement stateElement = serviceResourceElement2.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            string stateInstance = stateElement.Value;
                            result.State = stateInstance;
                        }
                        
                        XElement sourceServerNameElement = serviceResourceElement2.Element(XName.Get("SourceServerName", "http://schemas.microsoft.com/windowsazure"));
                        if (sourceServerNameElement != null)
                        {
                            string sourceServerNameInstance = sourceServerNameElement.Value;
                            result.SourceServerName = sourceServerNameInstance;
                        }
                        
                        XElement sourceDatabaseNameElement = serviceResourceElement2.Element(XName.Get("SourceDatabaseName", "http://schemas.microsoft.com/windowsazure"));
                        if (sourceDatabaseNameElement != null)
                        {
                            string sourceDatabaseNameInstance = sourceDatabaseNameElement.Value;
                            result.SourceDatabaseName = sourceDatabaseNameInstance;
                        }
                        
                        XElement destinationServerNameElement = serviceResourceElement2.Element(XName.Get("DestinationServerName", "http://schemas.microsoft.com/windowsazure"));
                        if (destinationServerNameElement != null)
                        {
                            string destinationServerNameInstance = destinationServerNameElement.Value;
                            result.DestinationServerName = destinationServerNameInstance;
                        }
                        
                        XElement destinationDatabaseNameElement = serviceResourceElement2.Element(XName.Get("DestinationDatabaseName", "http://schemas.microsoft.com/windowsazure"));
                        if (destinationDatabaseNameElement != null)
                        {
                            string destinationDatabaseNameInstance = destinationDatabaseNameElement.Value;
                            result.DestinationDatabaseName = destinationDatabaseNameInstance;
                        }
                        
                        XElement maxLagInMinutesElement2 = serviceResourceElement2.Element(XName.Get("MaxLagInMinutes", "http://schemas.microsoft.com/windowsazure"));
                        if (maxLagInMinutesElement2 != null && string.IsNullOrEmpty(maxLagInMinutesElement2.Value) == false)
                        {
                            int maxLagInMinutesInstance = int.Parse(maxLagInMinutesElement2.Value, CultureInfo.InvariantCulture);
                            result.MaxLagInMinutes = maxLagInMinutesInstance;
                        }
                        
                        XElement isContinuousElement2 = serviceResourceElement2.Element(XName.Get("IsContinuous", "http://schemas.microsoft.com/windowsazure"));
                        if (isContinuousElement2 != null)
                        {
                            bool isContinuousInstance = bool.Parse(isContinuousElement2.Value);
                            result.IsContinuous = isContinuousInstance;
                        }
                        
                        XElement replicationStateElement = serviceResourceElement2.Element(XName.Get("ReplicationState", "http://schemas.microsoft.com/windowsazure"));
                        if (replicationStateElement != null)
                        {
                            byte replicationStateInstance = byte.Parse(replicationStateElement.Value, CultureInfo.InvariantCulture);
                            result.ReplicationState = replicationStateInstance;
                        }
                        
                        XElement replicationStateDescriptionElement = serviceResourceElement2.Element(XName.Get("ReplicationStateDescription", "http://schemas.microsoft.com/windowsazure"));
                        if (replicationStateDescriptionElement != null)
                        {
                            string replicationStateDescriptionInstance = replicationStateDescriptionElement.Value;
                            result.ReplicationStateDescription = replicationStateDescriptionInstance;
                        }
                        
                        XElement localDatabaseIdElement = serviceResourceElement2.Element(XName.Get("LocalDatabaseId", "http://schemas.microsoft.com/windowsazure"));
                        if (localDatabaseIdElement != null)
                        {
                            int localDatabaseIdInstance = int.Parse(localDatabaseIdElement.Value, CultureInfo.InvariantCulture);
                            result.LocalDatabaseId = localDatabaseIdInstance;
                        }
                        
                        XElement isLocalDatabaseReplicationTargetElement = serviceResourceElement2.Element(XName.Get("IsLocalDatabaseReplicationTarget", "http://schemas.microsoft.com/windowsazure"));
                        if (isLocalDatabaseReplicationTargetElement != null)
                        {
                            bool isLocalDatabaseReplicationTargetInstance = bool.Parse(isLocalDatabaseReplicationTargetElement.Value);
                            result.IsLocalDatabaseReplicationTarget = isLocalDatabaseReplicationTargetInstance;
                        }
                        
                        XElement isInterlinkConnectedElement = serviceResourceElement2.Element(XName.Get("IsInterlinkConnected", "http://schemas.microsoft.com/windowsazure"));
                        if (isInterlinkConnectedElement != null)
                        {
                            bool isInterlinkConnectedInstance = bool.Parse(isInterlinkConnectedElement.Value);
                            result.IsInterlinkConnected = isInterlinkConnectedInstance;
                        }
                        
                        XElement textStartDateElement = serviceResourceElement2.Element(XName.Get("TextStartDate", "http://schemas.microsoft.com/windowsazure"));
                        if (textStartDateElement != null)
                        {
                        }
                        
                        XElement textModifyDateElement = serviceResourceElement2.Element(XName.Get("TextModifyDate", "http://schemas.microsoft.com/windowsazure"));
                        if (textModifyDateElement != null)
                        {
                        }
                        
                        XElement percentCompleteElement = serviceResourceElement2.Element(XName.Get("PercentComplete", "http://schemas.microsoft.com/windowsazure"));
                        if (percentCompleteElement != null && string.IsNullOrEmpty(percentCompleteElement.Value) == false)
                        {
                            float percentCompleteInstance = float.Parse(percentCompleteElement.Value, CultureInfo.InvariantCulture);
                            result.PercentComplete = percentCompleteInstance;
                        }
                        
                        XElement isForcedTerminateElement2 = serviceResourceElement2.Element(XName.Get("IsForcedTerminate", "http://schemas.microsoft.com/windowsazure"));
                        if (isForcedTerminateElement2 != null && string.IsNullOrEmpty(isForcedTerminateElement2.Value) == false)
                        {
                            bool isForcedTerminateInstance = bool.Parse(isForcedTerminateElement2.Value);
                            result.IsForcedTerminate = isForcedTerminateInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Database Copy operation stops a SQL Database copy.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the source or destination SQL Server instance
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database
        /// </param>
        /// <param name='databaseCopyName'>
        /// The unique identifier for the database copy to stop
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string serverName, string databaseName, Guid databaseCopyName, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("databaseCopyName", databaseCopyName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName + "/databasecopies/" + databaseCopyName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Database Copy operation retrieves information about a SQL
        /// Server database copy.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the source or destination SQL Server instance
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database
        /// </param>
        /// <param name='databaseCopyName'>
        /// The unique identifier for the database copy to retrieve
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<DatabaseCopyResponse> GetAsync(string serverName, string databaseName, string databaseCopyName, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (databaseCopyName == null)
            {
                throw new ArgumentNullException("databaseCopyName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("databaseCopyName", databaseCopyName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName + "/databasecopies/" + databaseCopyName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseCopyResponse result = new DatabaseCopyResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourceElement = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourceElement != null)
                    {
                        XElement nameElement = serviceResourceElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement stateElement = serviceResourceElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            string stateInstance = stateElement.Value;
                            result.State = stateInstance;
                        }
                        
                        XElement sourceServerNameElement = serviceResourceElement.Element(XName.Get("SourceServerName", "http://schemas.microsoft.com/windowsazure"));
                        if (sourceServerNameElement != null)
                        {
                            string sourceServerNameInstance = sourceServerNameElement.Value;
                            result.SourceServerName = sourceServerNameInstance;
                        }
                        
                        XElement sourceDatabaseNameElement = serviceResourceElement.Element(XName.Get("SourceDatabaseName", "http://schemas.microsoft.com/windowsazure"));
                        if (sourceDatabaseNameElement != null)
                        {
                            string sourceDatabaseNameInstance = sourceDatabaseNameElement.Value;
                            result.SourceDatabaseName = sourceDatabaseNameInstance;
                        }
                        
                        XElement destinationServerNameElement = serviceResourceElement.Element(XName.Get("DestinationServerName", "http://schemas.microsoft.com/windowsazure"));
                        if (destinationServerNameElement != null)
                        {
                            string destinationServerNameInstance = destinationServerNameElement.Value;
                            result.DestinationServerName = destinationServerNameInstance;
                        }
                        
                        XElement destinationDatabaseNameElement = serviceResourceElement.Element(XName.Get("DestinationDatabaseName", "http://schemas.microsoft.com/windowsazure"));
                        if (destinationDatabaseNameElement != null)
                        {
                            string destinationDatabaseNameInstance = destinationDatabaseNameElement.Value;
                            result.DestinationDatabaseName = destinationDatabaseNameInstance;
                        }
                        
                        XElement maxLagInMinutesElement = serviceResourceElement.Element(XName.Get("MaxLagInMinutes", "http://schemas.microsoft.com/windowsazure"));
                        if (maxLagInMinutesElement != null && string.IsNullOrEmpty(maxLagInMinutesElement.Value) == false)
                        {
                            int maxLagInMinutesInstance = int.Parse(maxLagInMinutesElement.Value, CultureInfo.InvariantCulture);
                            result.MaxLagInMinutes = maxLagInMinutesInstance;
                        }
                        
                        XElement isContinuousElement = serviceResourceElement.Element(XName.Get("IsContinuous", "http://schemas.microsoft.com/windowsazure"));
                        if (isContinuousElement != null)
                        {
                            bool isContinuousInstance = bool.Parse(isContinuousElement.Value);
                            result.IsContinuous = isContinuousInstance;
                        }
                        
                        XElement replicationStateElement = serviceResourceElement.Element(XName.Get("ReplicationState", "http://schemas.microsoft.com/windowsazure"));
                        if (replicationStateElement != null)
                        {
                            byte replicationStateInstance = byte.Parse(replicationStateElement.Value, CultureInfo.InvariantCulture);
                            result.ReplicationState = replicationStateInstance;
                        }
                        
                        XElement replicationStateDescriptionElement = serviceResourceElement.Element(XName.Get("ReplicationStateDescription", "http://schemas.microsoft.com/windowsazure"));
                        if (replicationStateDescriptionElement != null)
                        {
                            string replicationStateDescriptionInstance = replicationStateDescriptionElement.Value;
                            result.ReplicationStateDescription = replicationStateDescriptionInstance;
                        }
                        
                        XElement localDatabaseIdElement = serviceResourceElement.Element(XName.Get("LocalDatabaseId", "http://schemas.microsoft.com/windowsazure"));
                        if (localDatabaseIdElement != null)
                        {
                            int localDatabaseIdInstance = int.Parse(localDatabaseIdElement.Value, CultureInfo.InvariantCulture);
                            result.LocalDatabaseId = localDatabaseIdInstance;
                        }
                        
                        XElement isLocalDatabaseReplicationTargetElement = serviceResourceElement.Element(XName.Get("IsLocalDatabaseReplicationTarget", "http://schemas.microsoft.com/windowsazure"));
                        if (isLocalDatabaseReplicationTargetElement != null)
                        {
                            bool isLocalDatabaseReplicationTargetInstance = bool.Parse(isLocalDatabaseReplicationTargetElement.Value);
                            result.IsLocalDatabaseReplicationTarget = isLocalDatabaseReplicationTargetInstance;
                        }
                        
                        XElement isInterlinkConnectedElement = serviceResourceElement.Element(XName.Get("IsInterlinkConnected", "http://schemas.microsoft.com/windowsazure"));
                        if (isInterlinkConnectedElement != null)
                        {
                            bool isInterlinkConnectedInstance = bool.Parse(isInterlinkConnectedElement.Value);
                            result.IsInterlinkConnected = isInterlinkConnectedInstance;
                        }
                        
                        XElement textStartDateElement = serviceResourceElement.Element(XName.Get("TextStartDate", "http://schemas.microsoft.com/windowsazure"));
                        if (textStartDateElement != null)
                        {
                        }
                        
                        XElement textModifyDateElement = serviceResourceElement.Element(XName.Get("TextModifyDate", "http://schemas.microsoft.com/windowsazure"));
                        if (textModifyDateElement != null)
                        {
                        }
                        
                        XElement percentCompleteElement = serviceResourceElement.Element(XName.Get("PercentComplete", "http://schemas.microsoft.com/windowsazure"));
                        if (percentCompleteElement != null && string.IsNullOrEmpty(percentCompleteElement.Value) == false)
                        {
                            float percentCompleteInstance = float.Parse(percentCompleteElement.Value, CultureInfo.InvariantCulture);
                            result.PercentComplete = percentCompleteInstance;
                        }
                        
                        XElement isForcedTerminateElement = serviceResourceElement.Element(XName.Get("IsForcedTerminate", "http://schemas.microsoft.com/windowsazure"));
                        if (isForcedTerminateElement != null && string.IsNullOrEmpty(isForcedTerminateElement.Value) == false)
                        {
                            bool isForcedTerminateInstance = bool.Parse(isForcedTerminateElement.Value);
                            result.IsForcedTerminate = isForcedTerminateInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='serverName'>
        /// The name of the database server to be queried
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database to be queried
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response containing the list of database copies for a given
        /// database.
        /// </returns>
        public async Task<DatabaseCopyListResponse> ListAsync(string serverName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName + "/databasecopies";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseCopyListResponse result = new DatabaseCopyListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourcesSequenceElement = responseDoc.Element(XName.Get("ServiceResources", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourcesSequenceElement != null)
                    {
                        foreach (XElement serviceResourcesElement in serviceResourcesSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                        {
                            DatabaseCopyResponse serviceResourceInstance = new DatabaseCopyResponse();
                            result.DatabaseCopies.Add(serviceResourceInstance);
                            
                            XElement nameElement = serviceResourcesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                serviceResourceInstance.Name = nameInstance;
                            }
                            
                            XElement stateElement = serviceResourcesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                serviceResourceInstance.State = stateInstance;
                            }
                            
                            XElement sourceServerNameElement = serviceResourcesElement.Element(XName.Get("SourceServerName", "http://schemas.microsoft.com/windowsazure"));
                            if (sourceServerNameElement != null)
                            {
                                string sourceServerNameInstance = sourceServerNameElement.Value;
                                serviceResourceInstance.SourceServerName = sourceServerNameInstance;
                            }
                            
                            XElement sourceDatabaseNameElement = serviceResourcesElement.Element(XName.Get("SourceDatabaseName", "http://schemas.microsoft.com/windowsazure"));
                            if (sourceDatabaseNameElement != null)
                            {
                                string sourceDatabaseNameInstance = sourceDatabaseNameElement.Value;
                                serviceResourceInstance.SourceDatabaseName = sourceDatabaseNameInstance;
                            }
                            
                            XElement destinationServerNameElement = serviceResourcesElement.Element(XName.Get("DestinationServerName", "http://schemas.microsoft.com/windowsazure"));
                            if (destinationServerNameElement != null)
                            {
                                string destinationServerNameInstance = destinationServerNameElement.Value;
                                serviceResourceInstance.DestinationServerName = destinationServerNameInstance;
                            }
                            
                            XElement destinationDatabaseNameElement = serviceResourcesElement.Element(XName.Get("DestinationDatabaseName", "http://schemas.microsoft.com/windowsazure"));
                            if (destinationDatabaseNameElement != null)
                            {
                                string destinationDatabaseNameInstance = destinationDatabaseNameElement.Value;
                                serviceResourceInstance.DestinationDatabaseName = destinationDatabaseNameInstance;
                            }
                            
                            XElement maxLagInMinutesElement = serviceResourcesElement.Element(XName.Get("MaxLagInMinutes", "http://schemas.microsoft.com/windowsazure"));
                            if (maxLagInMinutesElement != null && string.IsNullOrEmpty(maxLagInMinutesElement.Value) == false)
                            {
                                int maxLagInMinutesInstance = int.Parse(maxLagInMinutesElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.MaxLagInMinutes = maxLagInMinutesInstance;
                            }
                            
                            XElement isContinuousElement = serviceResourcesElement.Element(XName.Get("IsContinuous", "http://schemas.microsoft.com/windowsazure"));
                            if (isContinuousElement != null)
                            {
                                bool isContinuousInstance = bool.Parse(isContinuousElement.Value);
                                serviceResourceInstance.IsContinuous = isContinuousInstance;
                            }
                            
                            XElement replicationStateElement = serviceResourcesElement.Element(XName.Get("ReplicationState", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationStateElement != null)
                            {
                                byte replicationStateInstance = byte.Parse(replicationStateElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.ReplicationState = replicationStateInstance;
                            }
                            
                            XElement replicationStateDescriptionElement = serviceResourcesElement.Element(XName.Get("ReplicationStateDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationStateDescriptionElement != null)
                            {
                                string replicationStateDescriptionInstance = replicationStateDescriptionElement.Value;
                                serviceResourceInstance.ReplicationStateDescription = replicationStateDescriptionInstance;
                            }
                            
                            XElement localDatabaseIdElement = serviceResourcesElement.Element(XName.Get("LocalDatabaseId", "http://schemas.microsoft.com/windowsazure"));
                            if (localDatabaseIdElement != null)
                            {
                                int localDatabaseIdInstance = int.Parse(localDatabaseIdElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.LocalDatabaseId = localDatabaseIdInstance;
                            }
                            
                            XElement isLocalDatabaseReplicationTargetElement = serviceResourcesElement.Element(XName.Get("IsLocalDatabaseReplicationTarget", "http://schemas.microsoft.com/windowsazure"));
                            if (isLocalDatabaseReplicationTargetElement != null)
                            {
                                bool isLocalDatabaseReplicationTargetInstance = bool.Parse(isLocalDatabaseReplicationTargetElement.Value);
                                serviceResourceInstance.IsLocalDatabaseReplicationTarget = isLocalDatabaseReplicationTargetInstance;
                            }
                            
                            XElement isInterlinkConnectedElement = serviceResourcesElement.Element(XName.Get("IsInterlinkConnected", "http://schemas.microsoft.com/windowsazure"));
                            if (isInterlinkConnectedElement != null)
                            {
                                bool isInterlinkConnectedInstance = bool.Parse(isInterlinkConnectedElement.Value);
                                serviceResourceInstance.IsInterlinkConnected = isInterlinkConnectedInstance;
                            }
                            
                            XElement textStartDateElement = serviceResourcesElement.Element(XName.Get("TextStartDate", "http://schemas.microsoft.com/windowsazure"));
                            if (textStartDateElement != null)
                            {
                            }
                            
                            XElement textModifyDateElement = serviceResourcesElement.Element(XName.Get("TextModifyDate", "http://schemas.microsoft.com/windowsazure"));
                            if (textModifyDateElement != null)
                            {
                            }
                            
                            XElement percentCompleteElement = serviceResourcesElement.Element(XName.Get("PercentComplete", "http://schemas.microsoft.com/windowsazure"));
                            if (percentCompleteElement != null && string.IsNullOrEmpty(percentCompleteElement.Value) == false)
                            {
                                float percentCompleteInstance = float.Parse(percentCompleteElement.Value, CultureInfo.InvariantCulture);
                                serviceResourceInstance.PercentComplete = percentCompleteInstance;
                            }
                            
                            XElement isForcedTerminateElement = serviceResourcesElement.Element(XName.Get("IsForcedTerminate", "http://schemas.microsoft.com/windowsazure"));
                            if (isForcedTerminateElement != null && string.IsNullOrEmpty(isForcedTerminateElement.Value) == false)
                            {
                                bool isForcedTerminateInstance = bool.Parse(isForcedTerminateElement.Value);
                                serviceResourceInstance.IsForcedTerminate = isForcedTerminateInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Update Database Copy operation updates a SQL Server database
        /// copy.
        /// </summary>
        /// <param name='serverName'>
        /// The name of the source or destination SQL Server instance
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database
        /// </param>
        /// <param name='databaseCopyName'>
        /// The unique identifier for the database copy to update
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters for the update database copy operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<DatabaseCopyResponse> UpdateAsync(string serverName, string databaseName, Guid databaseCopyName, DatabaseCopyUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("databaseCopyName", databaseCopyName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/sqlservers/servers/" + serverName + "/databases/" + databaseName + "/databasecopies/" + databaseCopyName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement serviceResourceElement = new XElement(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(serviceResourceElement);
                
                if (parameters.PartnerServer != null)
                {
                    XElement partnerServerElement = new XElement(XName.Get("PartnerServer", "http://schemas.microsoft.com/windowsazure"));
                    partnerServerElement.Value = parameters.PartnerServer;
                    serviceResourceElement.Add(partnerServerElement);
                }
                
                if (parameters.PartnerDatabase != null)
                {
                    XElement partnerDatabaseElement = new XElement(XName.Get("PartnerDatabase", "http://schemas.microsoft.com/windowsazure"));
                    partnerDatabaseElement.Value = parameters.PartnerDatabase;
                    serviceResourceElement.Add(partnerDatabaseElement);
                }
                
                if (parameters.MaxLagInMinutes != null)
                {
                    XElement maxLagInMinutesElement = new XElement(XName.Get("MaxLagInMinutes", "http://schemas.microsoft.com/windowsazure"));
                    maxLagInMinutesElement.Value = parameters.MaxLagInMinutes.ToString();
                    serviceResourceElement.Add(maxLagInMinutesElement);
                }
                
                if (parameters.IsContinuous != null)
                {
                    XElement isContinuousElement = new XElement(XName.Get("IsContinuous", "http://schemas.microsoft.com/windowsazure"));
                    isContinuousElement.Value = parameters.IsContinuous.ToString().ToLower();
                    serviceResourceElement.Add(isContinuousElement);
                }
                
                if (parameters.IsForcedTerminate != null)
                {
                    XElement isForcedTerminateElement = new XElement(XName.Get("IsForcedTerminate", "http://schemas.microsoft.com/windowsazure"));
                    isForcedTerminateElement.Value = parameters.IsForcedTerminate.ToString().ToLower();
                    serviceResourceElement.Add(isForcedTerminateElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseCopyResponse result = new DatabaseCopyResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serviceResourceElement2 = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                    if (serviceResourceElement2 != null)
                    {
                        XElement nameElement = serviceResourceElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement stateElement = serviceResourceElement2.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            string stateInstance = stateElement.Value;
                            result.State = stateInstance;
                        }
                        
                        XElement sourceServerNameElement = serviceResourceElement2.Element(XName.Get("SourceServerName", "http://schemas.microsoft.com/windowsazure"));
                        if (sourceServerNameElement != null)
                        {
                            string sourceServerNameInstance = sourceServerNameElement.Value;
                            result.SourceServerName = sourceServerNameInstance;
                        }
                        
                        XElement sourceDatabaseNameElement = serviceResourceElement2.Element(XName.Get("SourceDatabaseName", "http://schemas.microsoft.com/windowsazure"));
                        if (sourceDatabaseNameElement != null)
                        {
                            string sourceDatabaseNameInstance = sourceDatabaseNameElement.Value;
                            result.SourceDatabaseName = sourceDatabaseNameInstance;
                        }
                        
                        XElement destinationServerNameElement = serviceResourceElement2.Element(XName.Get("DestinationServerName", "http://schemas.microsoft.com/windowsazure"));
                        if (destinationServerNameElement != null)
                        {
                            string destinationServerNameInstance = destinationServerNameElement.Value;
                            result.DestinationServerName = destinationServerNameInstance;
                        }
                        
                        XElement destinationDatabaseNameElement = serviceResourceElement2.Element(XName.Get("DestinationDatabaseName", "http://schemas.microsoft.com/windowsazure"));
                        if (destinationDatabaseNameElement != null)
                        {
                            string destinationDatabaseNameInstance = destinationDatabaseNameElement.Value;
                            result.DestinationDatabaseName = destinationDatabaseNameInstance;
                        }
                        
                        XElement maxLagInMinutesElement2 = serviceResourceElement2.Element(XName.Get("MaxLagInMinutes", "http://schemas.microsoft.com/windowsazure"));
                        if (maxLagInMinutesElement2 != null && string.IsNullOrEmpty(maxLagInMinutesElement2.Value) == false)
                        {
                            int maxLagInMinutesInstance = int.Parse(maxLagInMinutesElement2.Value, CultureInfo.InvariantCulture);
                            result.MaxLagInMinutes = maxLagInMinutesInstance;
                        }
                        
                        XElement isContinuousElement2 = serviceResourceElement2.Element(XName.Get("IsContinuous", "http://schemas.microsoft.com/windowsazure"));
                        if (isContinuousElement2 != null)
                        {
                            bool isContinuousInstance = bool.Parse(isContinuousElement2.Value);
                            result.IsContinuous = isContinuousInstance;
                        }
                        
                        XElement replicationStateElement = serviceResourceElement2.Element(XName.Get("ReplicationState", "http://schemas.microsoft.com/windowsazure"));
                        if (replicationStateElement != null)
                        {
                            byte replicationStateInstance = byte.Parse(replicationStateElement.Value, CultureInfo.InvariantCulture);
                            result.ReplicationState = replicationStateInstance;
                        }
                        
                        XElement replicationStateDescriptionElement = serviceResourceElement2.Element(XName.Get("ReplicationStateDescription", "http://schemas.microsoft.com/windowsazure"));
                        if (replicationStateDescriptionElement != null)
                        {
                            string replicationStateDescriptionInstance = replicationStateDescriptionElement.Value;
                            result.ReplicationStateDescription = replicationStateDescriptionInstance;
                        }
                        
                        XElement localDatabaseIdElement = serviceResourceElement2.Element(XName.Get("LocalDatabaseId", "http://schemas.microsoft.com/windowsazure"));
                        if (localDatabaseIdElement != null)
                        {
                            int localDatabaseIdInstance = int.Parse(localDatabaseIdElement.Value, CultureInfo.InvariantCulture);
                            result.LocalDatabaseId = localDatabaseIdInstance;
                        }
                        
                        XElement isLocalDatabaseReplicationTargetElement = serviceResourceElement2.Element(XName.Get("IsLocalDatabaseReplicationTarget", "http://schemas.microsoft.com/windowsazure"));
                        if (isLocalDatabaseReplicationTargetElement != null)
                        {
                            bool isLocalDatabaseReplicationTargetInstance = bool.Parse(isLocalDatabaseReplicationTargetElement.Value);
                            result.IsLocalDatabaseReplicationTarget = isLocalDatabaseReplicationTargetInstance;
                        }
                        
                        XElement isInterlinkConnectedElement = serviceResourceElement2.Element(XName.Get("IsInterlinkConnected", "http://schemas.microsoft.com/windowsazure"));
                        if (isInterlinkConnectedElement != null)
                        {
                            bool isInterlinkConnectedInstance = bool.Parse(isInterlinkConnectedElement.Value);
                            result.IsInterlinkConnected = isInterlinkConnectedInstance;
                        }
                        
                        XElement textStartDateElement = serviceResourceElement2.Element(XName.Get("TextStartDate", "http://schemas.microsoft.com/windowsazure"));
                        if (textStartDateElement != null)
                        {
                        }
                        
                        XElement textModifyDateElement = serviceResourceElement2.Element(XName.Get("TextModifyDate", "http://schemas.microsoft.com/windowsazure"));
                        if (textModifyDateElement != null)
                        {
                        }
                        
                        XElement percentCompleteElement = serviceResourceElement2.Element(XName.Get("PercentComplete", "http://schemas.microsoft.com/windowsazure"));
                        if (percentCompleteElement != null && string.IsNullOrEmpty(percentCompleteElement.Value) == false)
                        {
                            float percentCompleteInstance = float.Parse(percentCompleteElement.Value, CultureInfo.InvariantCulture);
                            result.PercentComplete = percentCompleteInstance;
                        }
                        
                        XElement isForcedTerminateElement2 = serviceResourceElement2.Element(XName.Get("IsForcedTerminate", "http://schemas.microsoft.com/windowsazure"));
                        if (isForcedTerminateElement2 != null && string.IsNullOrEmpty(isForcedTerminateElement2.Value) == false)
                        {
                            bool isForcedTerminateInstance = bool.Parse(isForcedTerminateElement2.Value);
                            result.IsForcedTerminate = isForcedTerminateInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
