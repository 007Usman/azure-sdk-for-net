// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.RedisCache;
using Microsoft.Azure.Management.RedisCache.Model;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RedisCache.Model
{
    /// <summary>
    /// Resource parameters supplied to the CREATE Redis operation.
    /// </summary>
    public partial class RedisCreateParameters
    {
        private string _location;
        
        /// <summary>
        /// The resource data center location.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private RedisCreateProperties _properties;
        
        /// <summary>
        /// The resource properties.
        /// </summary>
        public RedisCreateProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// The resource tags.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RedisCreateParameters class.
        /// </summary>
        public RedisCreateParameters()
        {
            this._tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Parameters supplied to the create redis operation.
    /// </summary>
    public partial class RedisCreateProperties
    {
        private IDictionary<string, string> _config;
        
        /// <summary>
        /// configuration for radis cache
        /// </summary>
        public IDictionary<string, string> Config
        {
            get { return this._config; }
            set { this._config = value; }
        }
        
        private string _redisVersion;
        
        /// <summary>
        /// The version of Redis to deploy, or 'latest'. Valid values: (2.8)
        /// </summary>
        public string RedisVersion
        {
            get { return this._redisVersion; }
            set { this._redisVersion = value; }
        }
        
        private string _size;
        
        /// <summary>
        /// What size of redis cache to deploy. Valid values: (ExtraSmall,
        /// Small, Medium, Large, ExtraLarge, A5, A6, A7, A8)
        /// </summary>
        public string Size
        {
            get { return this._size; }
            set { this._size = value; }
        }
        
        private string _sku;
        
        /// <summary>
        /// What size of redis cache to deploy. Valid values: (Basic, Standard)
        /// </summary>
        public string Sku
        {
            get { return this._sku; }
            set { this._sku = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RedisCreateProperties class.
        /// </summary>
        public RedisCreateProperties()
        {
            this._config = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Specifies which redis access key an operation refers to.
    /// </summary>
    public enum RedisKeyType
    {
        Primary = 0,
        
        Secondary = 1,
    }
    
    /// <summary>
    /// Response to the redis list keys operation.
    /// </summary>
    public partial class RedisListKeysResponse : OperationResponse
    {
        private string _primaryKey;
        
        /// <summary>
        /// The current primary password that clients can use to authenticate
        /// with redis.
        /// </summary>
        public string PrimaryKey
        {
            get { return this._primaryKey; }
            set { this._primaryKey = value; }
        }
        
        private string _secondaryKey;
        
        /// <summary>
        /// The current secondary password that clients can use to authenticate
        /// with redis.
        /// </summary>
        public string SecondaryKey
        {
            get { return this._secondaryKey; }
            set { this._secondaryKey = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RedisListKeysResponse class.
        /// </summary>
        public RedisListKeysResponse()
        {
        }
    }
    
    /// <summary>
    /// Parameters describing a redis instance
    /// </summary>
    public partial class RedisProperties : RedisCreateProperties
    {
        private string _hostName;
        
        /// <summary>
        /// The redis host name
        /// </summary>
        public string HostName
        {
            get { return this._hostName; }
            set { this._hostName = value; }
        }
        
        private string _port;
        
        /// <summary>
        /// The redis non-ssl port
        /// </summary>
        public string Port
        {
            get { return this._port; }
            set { this._port = value; }
        }
        
        private string _provisioningState;
        
        /// <summary>
        /// The redis instance provisioning status
        /// </summary>
        public string ProvisioningState
        {
            get { return this._provisioningState; }
            set { this._provisioningState = value; }
        }
        
        private string _sslPort;
        
        /// <summary>
        /// The redis ssl port
        /// </summary>
        public string SslPort
        {
            get { return this._sslPort; }
            set { this._sslPort = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RedisProperties class.
        /// </summary>
        public RedisProperties()
        {
        }
    }
    
    /// <summary>
    /// Specifies which redis access keys to reset.
    /// </summary>
    public partial class RedisRegenerateKeyParameters
    {
        private RedisKeyType _keyType;
        
        /// <summary>
        /// Which redis access key to reset
        /// </summary>
        public RedisKeyType KeyType
        {
            get { return this._keyType; }
            set { this._keyType = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RedisRegenerateKeyParameters
        /// class.
        /// </summary>
        public RedisRegenerateKeyParameters()
        {
        }
    }
    
    /// <summary>
    /// A redis item in a response to a GET operation.
    /// </summary>
    public partial class RedisResource
    {
        private string _id;
        
        /// <summary>
        /// The id of the created resource.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// The resource's geographic location.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Name of the cache.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private RedisProperties _properties;
        
        /// <summary>
        /// properties
        /// </summary>
        public RedisProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// The resource tags.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// Resource's type.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RedisResource class.
        /// </summary>
        public RedisResource()
        {
            this._tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// The response to a get-all redis operation.
    /// </summary>
    public partial class RedisResourceListResponse : OperationResponse
    {
        private string _nextLink;
        
        /// <summary>
        /// Link for next set of locations.
        /// </summary>
        public string NextLink
        {
            get { return this._nextLink; }
            set { this._nextLink = value; }
        }
        
        private IList<RedisResource> _value;
        
        /// <summary>
        /// Results of the GET All operation
        /// </summary>
        public IList<RedisResource> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RedisResourceListResponse class.
        /// </summary>
        public RedisResourceListResponse()
        {
            this._value = new List<RedisResource>();
        }
    }
    
    /// <summary>
    /// The response to a create/get redis operation.
    /// </summary>
    public partial class RedisResourceResponse : OperationResponse
    {
        private RedisResource _value;
        
        /// <summary>
        /// Results of the GET operation
        /// </summary>
        public RedisResource Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RedisResourceResponse class.
        /// </summary>
        public RedisResourceResponse()
        {
        }
    }
}

namespace Microsoft.Azure.Management.RedisCache
{
    /// <summary>
    /// .Net client wrapper for the REST API for Azure Cache Management Service
    /// </summary>
    public static partial class RedisCacheManagementClientExtensions
    {
    }
    
    /// <summary>
    /// .Net client wrapper for the REST API for Azure Cache Management Service
    /// </summary>
    public partial interface IRedisCacheManagementClient : IDisposable
    {
        /// <summary>
        /// The URI used as the base for all Service Management requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the redis cache.
        /// </summary>
        IRedisOperations Redis
        {
            get; 
        }
    }
    
    /// <summary>
    /// .Net client wrapper for the REST API for Azure Cache Management Service
    /// </summary>
    public partial class RedisCacheManagementClient : ServiceClient<RedisCacheManagementClient>, IRedisCacheManagementClient
    {
        private Uri _baseUri;
        
        /// <summary>
        /// The URI used as the base for all Service Management requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private IRedisOperations _redis;
        
        /// <summary>
        /// Operations for managing the redis cache.
        /// </summary>
        public virtual IRedisOperations Redis
        {
            get { return this._redis; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RedisCacheManagementClient class.
        /// </summary>
        private RedisCacheManagementClient()
            : base()
        {
            this._redis = new RedisOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the RedisCacheManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        /// <param name='baseUri'>
        /// The URI used as the base for all Service Management requests.
        /// </param>
        public RedisCacheManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the RedisCacheManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        public RedisCacheManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://api-next.resources.windows-int.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
    }
    
    /// <summary>
    /// .Net client wrapper for the REST API for Azure Cache Management Service
    /// </summary>
    public static partial class RedisOperationsExtensions
    {
        /// <summary>
        /// Create a redis cache, or replace (overwrite/recreate, with
        /// potential downtime) an existing cache
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the create redis operation.
        /// </param>
        /// <returns>
        /// The response to a create/get redis operation.
        /// </returns>
        public static RedisResourceResponse CreateOrUpdate(this IRedisOperations operations, string resourceGroupName, string name, RedisCreateParameters parameters)
        {
            try
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, name, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Create a redis cache, or replace (overwrite/recreate, with
        /// potential downtime) an existing cache
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the create redis operation.
        /// </param>
        /// <returns>
        /// The response to a create/get redis operation.
        /// </returns>
        public static Task<RedisResourceResponse> CreateOrUpdateAsync(this IRedisOperations operations, string resourceGroupName, string name, RedisCreateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, name, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes a redis cache. This operation takes a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IRedisOperations operations, string resourceGroupName, string name)
        {
            try
            {
                return operations.DeleteAsync(resourceGroupName, name).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Deletes a redis cache. This operation takes a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IRedisOperations operations, string resourceGroupName, string name)
        {
            return operations.DeleteAsync(resourceGroupName, name, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a redis cache (resource description).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <returns>
        /// The response to a create/get redis operation.
        /// </returns>
        public static RedisResourceResponse Get(this IRedisOperations operations, string resourceGroupName, string name)
        {
            try
            {
                return operations.GetAsync(resourceGroupName, name).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Gets a redis cache (resource description).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <returns>
        /// The response to a create/get redis operation.
        /// </returns>
        public static Task<RedisResourceResponse> GetAsync(this IRedisOperations operations, string resourceGroupName, string name)
        {
            return operations.GetAsync(resourceGroupName, name, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets all redis caches in a resource group (resource descriptions).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static RedisResourceListResponse GetAll(this IRedisOperations operations, string resourceGroupName)
        {
            try
            {
                return operations.GetAllAsync(resourceGroupName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Gets all redis caches in a resource group (resource descriptions).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static Task<RedisResourceListResponse> GetAllAsync(this IRedisOperations operations, string resourceGroupName)
        {
            return operations.GetAllAsync(resourceGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets all redis caches (resource descriptions).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static RedisResourceListResponse GetAllInSubscription(this IRedisOperations operations)
        {
            try
            {
                return operations.GetAllInSubscriptionAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Gets all redis caches (resource descriptions).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static Task<RedisResourceListResponse> GetAllInSubscriptionAsync(this IRedisOperations operations)
        {
            return operations.GetAllInSubscriptionAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Gets all redis caches (resource descriptions) using next link.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='nextLink'>
        /// NextLink from the previous successful call to GetAllInSubscription
        /// operation.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static RedisResourceListResponse GetAllInSubscriptionUsingNextLink(this IRedisOperations operations, string nextLink)
        {
            try
            {
                return operations.GetAllInSubscriptionUsingNextLinkAsync(nextLink).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Gets all redis caches (resource descriptions) using next link.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='nextLink'>
        /// NextLink from the previous successful call to GetAllInSubscription
        /// operation.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static Task<RedisResourceListResponse> GetAllInSubscriptionUsingNextLinkAsync(this IRedisOperations operations, string nextLink)
        {
            return operations.GetAllInSubscriptionUsingNextLinkAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets all redis caches in a resource group (resource descriptions)
        /// using next link.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='nextLink'>
        /// NextLink from the previous successful call to GetAllInSubscription
        /// operation.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static RedisResourceListResponse GetAllUsingNextLink(this IRedisOperations operations, string nextLink)
        {
            try
            {
                return operations.GetAllUsingNextLinkAsync(nextLink).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Gets all redis caches in a resource group (resource descriptions)
        /// using next link.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='nextLink'>
        /// NextLink from the previous successful call to GetAllInSubscription
        /// operation.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static Task<RedisResourceListResponse> GetAllUsingNextLinkAsync(this IRedisOperations operations, string nextLink)
        {
            return operations.GetAllUsingNextLinkAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a redis cache's access keys. This operation requires write
        /// permission to the cache resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <returns>
        /// Response to the redis list keys operation.
        /// </returns>
        public static RedisListKeysResponse ListKeys(this IRedisOperations operations, string resourceGroupName, string name)
        {
            try
            {
                return operations.ListKeysAsync(resourceGroupName, name).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Retrieve a redis cache's access keys. This operation requires write
        /// permission to the cache resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <returns>
        /// Response to the redis list keys operation.
        /// </returns>
        public static Task<RedisListKeysResponse> ListKeysAsync(this IRedisOperations operations, string resourceGroupName, string name)
        {
            return operations.ListKeysAsync(resourceGroupName, name, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a redis cache's access keys. This operation requires write
        /// permission to the cache resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='parameters'>
        /// Specifies which key to reset.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse RegenerateKey(this IRedisOperations operations, string resourceGroupName, string name, RedisRegenerateKeyParameters parameters)
        {
            try
            {
                return operations.RegenerateKeyAsync(resourceGroupName, name, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Retrieve a redis cache's access keys. This operation requires write
        /// permission to the cache resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='parameters'>
        /// Specifies which key to reset.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RegenerateKeyAsync(this IRedisOperations operations, string resourceGroupName, string name, RedisRegenerateKeyParameters parameters)
        {
            return operations.RegenerateKeyAsync(resourceGroupName, name, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the redis cache.
    /// </summary>
    public partial interface IRedisOperations
    {
        /// <summary>
        /// Create a redis cache, or replace (overwrite/recreate, with
        /// potential downtime) an existing cache
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the create redis operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a create/get redis operation.
        /// </returns>
        Task<RedisResourceResponse> CreateOrUpdateAsync(string resourceGroupName, string name, RedisCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Deletes a redis cache. This operation takes a while to complete.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteAsync(string resourceGroupName, string name, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a redis cache (resource description).
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a create/get redis operation.
        /// </returns>
        Task<RedisResourceResponse> GetAsync(string resourceGroupName, string name, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets all redis caches in a resource group (resource descriptions).
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        Task<RedisResourceListResponse> GetAllAsync(string resourceGroupName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets all redis caches (resource descriptions).
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        Task<RedisResourceListResponse> GetAllInSubscriptionAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets all redis caches (resource descriptions) using next link.
        /// </summary>
        /// <param name='nextLink'>
        /// NextLink from the previous successful call to GetAllInSubscription
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        Task<RedisResourceListResponse> GetAllInSubscriptionUsingNextLinkAsync(string nextLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets all redis caches in a resource group (resource descriptions)
        /// using next link.
        /// </summary>
        /// <param name='nextLink'>
        /// NextLink from the previous successful call to GetAllInSubscription
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        Task<RedisResourceListResponse> GetAllUsingNextLinkAsync(string nextLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// Retrieve a redis cache's access keys. This operation requires write
        /// permission to the cache resource.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response to the redis list keys operation.
        /// </returns>
        Task<RedisListKeysResponse> ListKeysAsync(string resourceGroupName, string name, CancellationToken cancellationToken);
        
        /// <summary>
        /// Retrieve a redis cache's access keys. This operation requires write
        /// permission to the cache resource.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='parameters'>
        /// Specifies which key to reset.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> RegenerateKeyAsync(string resourceGroupName, string name, RedisRegenerateKeyParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the redis cache.
    /// </summary>
    internal partial class RedisOperations : IServiceOperations<RedisCacheManagementClient>, IRedisOperations
    {
        /// <summary>
        /// Initializes a new instance of the RedisOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RedisOperations(RedisCacheManagementClient client)
        {
            this._client = client;
        }
        
        private RedisCacheManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RedisCache.RedisCacheManagementClient.
        /// </summary>
        public RedisCacheManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create a redis cache, or replace (overwrite/recreate, with
        /// potential downtime) an existing cache
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the create redis operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a create/get redis operation.
        /// </returns>
        public async Task<RedisResourceResponse> CreateOrUpdateAsync(string resourceGroupName, string name, RedisCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            if (parameters.Properties.RedisVersion == null)
            {
                throw new ArgumentNullException("parameters.Properties.RedisVersion");
            }
            if (parameters.Properties.Size == null)
            {
                throw new ArgumentNullException("parameters.Properties.Size");
            }
            if (parameters.Properties.Sku == null)
            {
                throw new ArgumentNullException("parameters.Properties.Sku");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/subscriptions/").AbsoluteUri + this.Client.Credentials.SubscriptionId + "/resourceGroups/" + resourceGroupName + "/providers/Microsoft.Cache/Redis/" + name + "?";
            url = url + "api-version=2014-04-01-preview";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject redisCreateParametersValue = new JObject();
                requestDoc = redisCreateParametersValue;
                
                redisCreateParametersValue["location"] = parameters.Location;
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                redisCreateParametersValue["tags"] = tagsDictionary;
                
                JObject propertiesValue = new JObject();
                redisCreateParametersValue["properties"] = propertiesValue;
                
                propertiesValue["version"] = parameters.Properties.RedisVersion;
                
                propertiesValue["sku"] = parameters.Properties.Sku;
                
                propertiesValue["size"] = parameters.Properties.Size;
                
                JObject configDictionary = new JObject();
                if (parameters.Properties.Config != null)
                {
                    foreach (KeyValuePair<string, string> pair2 in parameters.Properties.Config)
                    {
                        string configKey = pair2.Key;
                        string configValue = pair2.Value;
                        configDictionary[configKey] = configValue;
                    }
                }
                propertiesValue["config"] = configDictionary;
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RedisResourceResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RedisResourceResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        RedisResource valueInstance = new RedisResource();
                        result.Value = valueInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = (string)idValue;
                            valueInstance.Id = idInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = (string)locationValue;
                            valueInstance.Location = locationInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = (string)nameValue;
                            valueInstance.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = (string)typeValue;
                            valueInstance.Type = typeInstance;
                        }
                        
                        JToken tagsSequenceElement = (JToken)responseDoc["tags"];
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = (string)property.Name;
                                string tagsValue2 = (string)property.Value;
                                valueInstance.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                        
                        JToken propertiesValue2 = responseDoc["properties"];
                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                        {
                            RedisProperties propertiesInstance = new RedisProperties();
                            valueInstance.Properties = propertiesInstance;
                            
                            JToken provisioningStateValue = propertiesValue2["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = (string)provisioningStateValue;
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken hostNameValue = propertiesValue2["hostName"];
                            if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                            {
                                string hostNameInstance = (string)hostNameValue;
                                propertiesInstance.HostName = hostNameInstance;
                            }
                            
                            JToken portValue = propertiesValue2["port"];
                            if (portValue != null && portValue.Type != JTokenType.Null)
                            {
                                string portInstance = (string)portValue;
                                propertiesInstance.Port = portInstance;
                            }
                            
                            JToken sslPortValue = propertiesValue2["sslPort"];
                            if (sslPortValue != null && sslPortValue.Type != JTokenType.Null)
                            {
                                string sslPortInstance = (string)sslPortValue;
                                propertiesInstance.SslPort = sslPortInstance;
                            }
                            
                            JToken versionValue = propertiesValue2["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                string versionInstance = (string)versionValue;
                                propertiesInstance.RedisVersion = versionInstance;
                            }
                            
                            JToken skuValue = propertiesValue2["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                string skuInstance = (string)skuValue;
                                propertiesInstance.Sku = skuInstance;
                            }
                            
                            JToken sizeValue = propertiesValue2["size"];
                            if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                            {
                                string sizeInstance = (string)sizeValue;
                                propertiesInstance.Size = sizeInstance;
                            }
                            
                            JToken configSequenceElement = (JToken)propertiesValue2["config"];
                            if (configSequenceElement != null && configSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in configSequenceElement)
                                {
                                    string configKey2 = (string)property2.Name;
                                    string configValue2 = (string)property2.Value;
                                    propertiesInstance.Config.Add(configKey2, configValue2);
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a redis cache. This operation takes a while to complete.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string resourceGroupName, string name, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/subscriptions/").AbsoluteUri + this.Client.Credentials.SubscriptionId + "/resourceGroups/" + resourceGroupName + "/providers/Microsoft.Cache/Redis/" + name + "?";
            url = url + "api-version=2014-04-01-preview";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NotFound)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a redis cache (resource description).
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a create/get redis operation.
        /// </returns>
        public async Task<RedisResourceResponse> GetAsync(string resourceGroupName, string name, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/subscriptions/").AbsoluteUri + this.Client.Credentials.SubscriptionId + "/resourceGroups/" + resourceGroupName + "/providers/Microsoft.Cache/Redis/" + name + "?";
            url = url + "api-version=2014-04-01-preview";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RedisResourceResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RedisResourceResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        RedisResource valueInstance = new RedisResource();
                        result.Value = valueInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = (string)idValue;
                            valueInstance.Id = idInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = (string)locationValue;
                            valueInstance.Location = locationInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = (string)nameValue;
                            valueInstance.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = (string)typeValue;
                            valueInstance.Type = typeInstance;
                        }
                        
                        JToken tagsSequenceElement = (JToken)responseDoc["tags"];
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = (string)property.Name;
                                string tagsValue = (string)property.Value;
                                valueInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            RedisProperties propertiesInstance = new RedisProperties();
                            valueInstance.Properties = propertiesInstance;
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = (string)provisioningStateValue;
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken hostNameValue = propertiesValue["hostName"];
                            if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                            {
                                string hostNameInstance = (string)hostNameValue;
                                propertiesInstance.HostName = hostNameInstance;
                            }
                            
                            JToken portValue = propertiesValue["port"];
                            if (portValue != null && portValue.Type != JTokenType.Null)
                            {
                                string portInstance = (string)portValue;
                                propertiesInstance.Port = portInstance;
                            }
                            
                            JToken sslPortValue = propertiesValue["sslPort"];
                            if (sslPortValue != null && sslPortValue.Type != JTokenType.Null)
                            {
                                string sslPortInstance = (string)sslPortValue;
                                propertiesInstance.SslPort = sslPortInstance;
                            }
                            
                            JToken versionValue = propertiesValue["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                string versionInstance = (string)versionValue;
                                propertiesInstance.RedisVersion = versionInstance;
                            }
                            
                            JToken skuValue = propertiesValue["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                string skuInstance = (string)skuValue;
                                propertiesInstance.Sku = skuInstance;
                            }
                            
                            JToken sizeValue = propertiesValue["size"];
                            if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                            {
                                string sizeInstance = (string)sizeValue;
                                propertiesInstance.Size = sizeInstance;
                            }
                            
                            JToken configSequenceElement = (JToken)propertiesValue["config"];
                            if (configSequenceElement != null && configSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in configSequenceElement)
                                {
                                    string configKey = (string)property2.Name;
                                    string configValue = (string)property2.Value;
                                    propertiesInstance.Config.Add(configKey, configValue);
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets all redis caches in a resource group (resource descriptions).
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public async Task<RedisResourceListResponse> GetAllAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                Tracing.Enter(invocationId, this, "GetAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/subscriptions/").AbsoluteUri + this.Client.Credentials.SubscriptionId + "/resourceGroups/" + resourceGroupName + "/providers/Microsoft.Cache/Redis/?";
            url = url + "api-version=2014-04-01-preview";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RedisResourceListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RedisResourceListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in (JArray)valueArray)
                            {
                                RedisResource redisResourceInstance = new RedisResource();
                                result.Value.Add(redisResourceInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = (string)idValue;
                                    redisResourceInstance.Id = idInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = (string)locationValue;
                                    redisResourceInstance.Location = locationInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = (string)nameValue;
                                    redisResourceInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = (string)typeValue;
                                    redisResourceInstance.Type = typeInstance;
                                }
                                
                                JToken tagsSequenceElement = (JToken)valueValue["tags"];
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = (string)property.Name;
                                        string tagsValue = (string)property.Value;
                                        redisResourceInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    RedisProperties propertiesInstance = new RedisProperties();
                                    redisResourceInstance.Properties = propertiesInstance;
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = (string)provisioningStateValue;
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken hostNameValue = propertiesValue["hostName"];
                                    if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                                    {
                                        string hostNameInstance = (string)hostNameValue;
                                        propertiesInstance.HostName = hostNameInstance;
                                    }
                                    
                                    JToken portValue = propertiesValue["port"];
                                    if (portValue != null && portValue.Type != JTokenType.Null)
                                    {
                                        string portInstance = (string)portValue;
                                        propertiesInstance.Port = portInstance;
                                    }
                                    
                                    JToken sslPortValue = propertiesValue["sslPort"];
                                    if (sslPortValue != null && sslPortValue.Type != JTokenType.Null)
                                    {
                                        string sslPortInstance = (string)sslPortValue;
                                        propertiesInstance.SslPort = sslPortInstance;
                                    }
                                    
                                    JToken versionValue = propertiesValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = (string)versionValue;
                                        propertiesInstance.RedisVersion = versionInstance;
                                    }
                                    
                                    JToken skuValue = propertiesValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        string skuInstance = (string)skuValue;
                                        propertiesInstance.Sku = skuInstance;
                                    }
                                    
                                    JToken sizeValue = propertiesValue["size"];
                                    if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                                    {
                                        string sizeInstance = (string)sizeValue;
                                        propertiesInstance.Size = sizeInstance;
                                    }
                                    
                                    JToken configSequenceElement = (JToken)propertiesValue["config"];
                                    if (configSequenceElement != null && configSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in configSequenceElement)
                                        {
                                            string configKey = (string)property2.Name;
                                            string configValue = (string)property2.Value;
                                            propertiesInstance.Config.Add(configKey, configValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = (string)nextLinkValue;
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets all redis caches (resource descriptions).
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public async Task<RedisResourceListResponse> GetAllInSubscriptionAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "GetAllInSubscriptionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/subscriptions/").AbsoluteUri + this.Client.Credentials.SubscriptionId + "/providers/Microsoft.Cache/Redis/?";
            url = url + "api-version=2014-04-01-preview";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RedisResourceListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RedisResourceListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in (JArray)valueArray)
                            {
                                RedisResource redisResourceInstance = new RedisResource();
                                result.Value.Add(redisResourceInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = (string)idValue;
                                    redisResourceInstance.Id = idInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = (string)locationValue;
                                    redisResourceInstance.Location = locationInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = (string)nameValue;
                                    redisResourceInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = (string)typeValue;
                                    redisResourceInstance.Type = typeInstance;
                                }
                                
                                JToken tagsSequenceElement = (JToken)valueValue["tags"];
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = (string)property.Name;
                                        string tagsValue = (string)property.Value;
                                        redisResourceInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    RedisProperties propertiesInstance = new RedisProperties();
                                    redisResourceInstance.Properties = propertiesInstance;
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = (string)provisioningStateValue;
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken hostNameValue = propertiesValue["hostName"];
                                    if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                                    {
                                        string hostNameInstance = (string)hostNameValue;
                                        propertiesInstance.HostName = hostNameInstance;
                                    }
                                    
                                    JToken portValue = propertiesValue["port"];
                                    if (portValue != null && portValue.Type != JTokenType.Null)
                                    {
                                        string portInstance = (string)portValue;
                                        propertiesInstance.Port = portInstance;
                                    }
                                    
                                    JToken sslPortValue = propertiesValue["sslPort"];
                                    if (sslPortValue != null && sslPortValue.Type != JTokenType.Null)
                                    {
                                        string sslPortInstance = (string)sslPortValue;
                                        propertiesInstance.SslPort = sslPortInstance;
                                    }
                                    
                                    JToken versionValue = propertiesValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = (string)versionValue;
                                        propertiesInstance.RedisVersion = versionInstance;
                                    }
                                    
                                    JToken skuValue = propertiesValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        string skuInstance = (string)skuValue;
                                        propertiesInstance.Sku = skuInstance;
                                    }
                                    
                                    JToken sizeValue = propertiesValue["size"];
                                    if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                                    {
                                        string sizeInstance = (string)sizeValue;
                                        propertiesInstance.Size = sizeInstance;
                                    }
                                    
                                    JToken configSequenceElement = (JToken)propertiesValue["config"];
                                    if (configSequenceElement != null && configSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in configSequenceElement)
                                        {
                                            string configKey = (string)property2.Name;
                                            string configValue = (string)property2.Value;
                                            propertiesInstance.Config.Add(configKey, configValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = (string)nextLinkValue;
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets all redis caches (resource descriptions) using next link.
        /// </summary>
        /// <param name='nextLink'>
        /// NextLink from the previous successful call to GetAllInSubscription
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public async Task<RedisResourceListResponse> GetAllInSubscriptionUsingNextLinkAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                Tracing.Enter(invocationId, this, "GetAllInSubscriptionUsingNextLinkAsync", tracingParameters);
            }
            
            // Construct URL
            string url = nextLink;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RedisResourceListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RedisResourceListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in (JArray)valueArray)
                            {
                                RedisResource redisResourceInstance = new RedisResource();
                                result.Value.Add(redisResourceInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = (string)idValue;
                                    redisResourceInstance.Id = idInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = (string)locationValue;
                                    redisResourceInstance.Location = locationInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = (string)nameValue;
                                    redisResourceInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = (string)typeValue;
                                    redisResourceInstance.Type = typeInstance;
                                }
                                
                                JToken tagsSequenceElement = (JToken)valueValue["tags"];
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = (string)property.Name;
                                        string tagsValue = (string)property.Value;
                                        redisResourceInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    RedisProperties propertiesInstance = new RedisProperties();
                                    redisResourceInstance.Properties = propertiesInstance;
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = (string)provisioningStateValue;
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken hostNameValue = propertiesValue["hostName"];
                                    if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                                    {
                                        string hostNameInstance = (string)hostNameValue;
                                        propertiesInstance.HostName = hostNameInstance;
                                    }
                                    
                                    JToken portValue = propertiesValue["port"];
                                    if (portValue != null && portValue.Type != JTokenType.Null)
                                    {
                                        string portInstance = (string)portValue;
                                        propertiesInstance.Port = portInstance;
                                    }
                                    
                                    JToken sslPortValue = propertiesValue["sslPort"];
                                    if (sslPortValue != null && sslPortValue.Type != JTokenType.Null)
                                    {
                                        string sslPortInstance = (string)sslPortValue;
                                        propertiesInstance.SslPort = sslPortInstance;
                                    }
                                    
                                    JToken versionValue = propertiesValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = (string)versionValue;
                                        propertiesInstance.RedisVersion = versionInstance;
                                    }
                                    
                                    JToken skuValue = propertiesValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        string skuInstance = (string)skuValue;
                                        propertiesInstance.Sku = skuInstance;
                                    }
                                    
                                    JToken sizeValue = propertiesValue["size"];
                                    if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                                    {
                                        string sizeInstance = (string)sizeValue;
                                        propertiesInstance.Size = sizeInstance;
                                    }
                                    
                                    JToken configSequenceElement = (JToken)propertiesValue["config"];
                                    if (configSequenceElement != null && configSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in configSequenceElement)
                                        {
                                            string configKey = (string)property2.Name;
                                            string configValue = (string)property2.Value;
                                            propertiesInstance.Config.Add(configKey, configValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = (string)nextLinkValue;
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets all redis caches in a resource group (resource descriptions)
        /// using next link.
        /// </summary>
        /// <param name='nextLink'>
        /// NextLink from the previous successful call to GetAllInSubscription
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public async Task<RedisResourceListResponse> GetAllUsingNextLinkAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                Tracing.Enter(invocationId, this, "GetAllUsingNextLinkAsync", tracingParameters);
            }
            
            // Construct URL
            string url = nextLink;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RedisResourceListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RedisResourceListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in (JArray)valueArray)
                            {
                                RedisResource redisResourceInstance = new RedisResource();
                                result.Value.Add(redisResourceInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = (string)idValue;
                                    redisResourceInstance.Id = idInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = (string)locationValue;
                                    redisResourceInstance.Location = locationInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = (string)nameValue;
                                    redisResourceInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = (string)typeValue;
                                    redisResourceInstance.Type = typeInstance;
                                }
                                
                                JToken tagsSequenceElement = (JToken)valueValue["tags"];
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = (string)property.Name;
                                        string tagsValue = (string)property.Value;
                                        redisResourceInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    RedisProperties propertiesInstance = new RedisProperties();
                                    redisResourceInstance.Properties = propertiesInstance;
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = (string)provisioningStateValue;
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken hostNameValue = propertiesValue["hostName"];
                                    if (hostNameValue != null && hostNameValue.Type != JTokenType.Null)
                                    {
                                        string hostNameInstance = (string)hostNameValue;
                                        propertiesInstance.HostName = hostNameInstance;
                                    }
                                    
                                    JToken portValue = propertiesValue["port"];
                                    if (portValue != null && portValue.Type != JTokenType.Null)
                                    {
                                        string portInstance = (string)portValue;
                                        propertiesInstance.Port = portInstance;
                                    }
                                    
                                    JToken sslPortValue = propertiesValue["sslPort"];
                                    if (sslPortValue != null && sslPortValue.Type != JTokenType.Null)
                                    {
                                        string sslPortInstance = (string)sslPortValue;
                                        propertiesInstance.SslPort = sslPortInstance;
                                    }
                                    
                                    JToken versionValue = propertiesValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = (string)versionValue;
                                        propertiesInstance.RedisVersion = versionInstance;
                                    }
                                    
                                    JToken skuValue = propertiesValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        string skuInstance = (string)skuValue;
                                        propertiesInstance.Sku = skuInstance;
                                    }
                                    
                                    JToken sizeValue = propertiesValue["size"];
                                    if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                                    {
                                        string sizeInstance = (string)sizeValue;
                                        propertiesInstance.Size = sizeInstance;
                                    }
                                    
                                    JToken configSequenceElement = (JToken)propertiesValue["config"];
                                    if (configSequenceElement != null && configSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in configSequenceElement)
                                        {
                                            string configKey = (string)property2.Name;
                                            string configValue = (string)property2.Value;
                                            propertiesInstance.Config.Add(configKey, configValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = (string)nextLinkValue;
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a redis cache's access keys. This operation requires write
        /// permission to the cache resource.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response to the redis list keys operation.
        /// </returns>
        public async Task<RedisListKeysResponse> ListKeysAsync(string resourceGroupName, string name, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                Tracing.Enter(invocationId, this, "ListKeysAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/subscriptions/").AbsoluteUri + this.Client.Credentials.SubscriptionId + "/resourceGroups/" + resourceGroupName + "/providers/Microsoft.Cache/Redis/" + name + "/listKeys?";
            url = url + "api-version=2014-04-01-preview";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RedisListKeysResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RedisListKeysResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken primaryKeyValue = responseDoc["primaryKey"];
                        if (primaryKeyValue != null && primaryKeyValue.Type != JTokenType.Null)
                        {
                            string primaryKeyInstance = (string)primaryKeyValue;
                            result.PrimaryKey = primaryKeyInstance;
                        }
                        
                        JToken secondaryKeyValue = responseDoc["secondaryKey"];
                        if (secondaryKeyValue != null && secondaryKeyValue.Type != JTokenType.Null)
                        {
                            string secondaryKeyInstance = (string)secondaryKeyValue;
                            result.SecondaryKey = secondaryKeyInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a redis cache's access keys. This operation requires write
        /// permission to the cache resource.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// The name of the redis cache.
        /// </param>
        /// <param name='parameters'>
        /// Specifies which key to reset.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RegenerateKeyAsync(string resourceGroupName, string name, RedisRegenerateKeyParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "RegenerateKeyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/subscriptions/").AbsoluteUri + this.Client.Credentials.SubscriptionId + "/resourceGroups/" + resourceGroupName + "/providers/Microsoft.Cache/Redis/" + name + "/regenerateKey?";
            url = url + "api-version=2014-04-01-preview";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject redisRegenerateKeyParametersValue = new JObject();
                requestDoc = redisRegenerateKeyParametersValue;
                
                redisRegenerateKeyParametersValue["keyType"] = parameters.KeyType.ToString();
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
