// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.RedisCache;
using Microsoft.Azure.Management.RedisCache.Models;
using Microsoft.WindowsAzure;

namespace Microsoft.Azure.Management.RedisCache
{
    /// <summary>
    /// .Net client wrapper for the REST API for Azure Cache Management Service
    /// </summary>
    public static partial class RedisOperationsExtensions
    {
        /// <summary>
        /// Create a redis cache, or replace (overwrite/recreate, with
        /// potential downtime) an existing cache
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the redis cache.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create redis operation.
        /// </param>
        /// <returns>
        /// The response to a create/get redis operation.
        /// </returns>
        public static RedisResourceResponse CreateOrUpdate(this IRedisOperations operations, string resourceGroupName, string name, RedisCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRedisOperations)s).CreateOrUpdateAsync(resourceGroupName, name, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a redis cache, or replace (overwrite/recreate, with
        /// potential downtime) an existing cache
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the redis cache.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create redis operation.
        /// </param>
        /// <returns>
        /// The response to a create/get redis operation.
        /// </returns>
        public static Task<RedisResourceResponse> CreateOrUpdateAsync(this IRedisOperations operations, string resourceGroupName, string name, RedisCreateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, name, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes a redis cache. This operation takes a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the redis cache.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IRedisOperations operations, string resourceGroupName, string name)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRedisOperations)s).DeleteAsync(resourceGroupName, name);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes a redis cache. This operation takes a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the redis cache.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IRedisOperations operations, string resourceGroupName, string name)
        {
            return operations.DeleteAsync(resourceGroupName, name, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a redis cache (resource description).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the redis cache.
        /// </param>
        /// <returns>
        /// The response to a create/get redis operation.
        /// </returns>
        public static RedisResourceResponse Get(this IRedisOperations operations, string resourceGroupName, string name)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRedisOperations)s).GetAsync(resourceGroupName, name);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a redis cache (resource description).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the redis cache.
        /// </param>
        /// <returns>
        /// The response to a create/get redis operation.
        /// </returns>
        public static Task<RedisResourceResponse> GetAsync(this IRedisOperations operations, string resourceGroupName, string name)
        {
            return operations.GetAsync(resourceGroupName, name, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets all redis caches in a resource group (resource descriptions).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static RedisResourceListResponse GetAll(this IRedisOperations operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRedisOperations)s).GetAllAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets all redis caches in a resource group (resource descriptions).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static Task<RedisResourceListResponse> GetAllAsync(this IRedisOperations operations, string resourceGroupName)
        {
            return operations.GetAllAsync(resourceGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets all redis caches (resource descriptions).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static RedisResourceListResponse GetAllInSubscription(this IRedisOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRedisOperations)s).GetAllInSubscriptionAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets all redis caches (resource descriptions).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static Task<RedisResourceListResponse> GetAllInSubscriptionAsync(this IRedisOperations operations)
        {
            return operations.GetAllInSubscriptionAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Gets all redis caches (resource descriptions) using next link.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// GetAllInSubscription operation.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static RedisResourceListResponse GetAllInSubscriptionUsingNextLink(this IRedisOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRedisOperations)s).GetAllInSubscriptionUsingNextLinkAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets all redis caches (resource descriptions) using next link.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// GetAllInSubscription operation.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static Task<RedisResourceListResponse> GetAllInSubscriptionUsingNextLinkAsync(this IRedisOperations operations, string nextLink)
        {
            return operations.GetAllInSubscriptionUsingNextLinkAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets all redis caches in a resource group (resource descriptions)
        /// using next link.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// GetAllInSubscription operation.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static RedisResourceListResponse GetAllUsingNextLink(this IRedisOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRedisOperations)s).GetAllUsingNextLinkAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets all redis caches in a resource group (resource descriptions)
        /// using next link.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. NextLink from the previous successful call to
        /// GetAllInSubscription operation.
        /// </param>
        /// <returns>
        /// The response to a get-all redis operation.
        /// </returns>
        public static Task<RedisResourceListResponse> GetAllUsingNextLinkAsync(this IRedisOperations operations, string nextLink)
        {
            return operations.GetAllUsingNextLinkAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a redis cache's access keys. This operation requires write
        /// permission to the cache resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the redis cache.
        /// </param>
        /// <returns>
        /// Response to the redis list keys operation.
        /// </returns>
        public static RedisListKeysResponse ListKeys(this IRedisOperations operations, string resourceGroupName, string name)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRedisOperations)s).ListKeysAsync(resourceGroupName, name);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a redis cache's access keys. This operation requires write
        /// permission to the cache resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the redis cache.
        /// </param>
        /// <returns>
        /// Response to the redis list keys operation.
        /// </returns>
        public static Task<RedisListKeysResponse> ListKeysAsync(this IRedisOperations operations, string resourceGroupName, string name)
        {
            return operations.ListKeysAsync(resourceGroupName, name, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a redis cache's access keys. This operation requires write
        /// permission to the cache resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the redis cache.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies which key to reset.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse RegenerateKey(this IRedisOperations operations, string resourceGroupName, string name, RedisRegenerateKeyParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRedisOperations)s).RegenerateKeyAsync(resourceGroupName, name, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a redis cache's access keys. This operation requires write
        /// permission to the cache resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RedisCache.IRedisOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the redis cache.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies which key to reset.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RegenerateKeyAsync(this IRedisOperations operations, string resourceGroupName, string name, RedisRegenerateKeyParameters parameters)
        {
            return operations.RegenerateKeyAsync(resourceGroupName, name, parameters, CancellationToken.None);
        }
    }
}
