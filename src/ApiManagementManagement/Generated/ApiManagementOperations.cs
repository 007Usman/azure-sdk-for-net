// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.ApiManagement;
using Microsoft.Azure.Management.ApiManagement.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.ApiManagement
{
    /// <summary>
    /// Operations for managing Api Management service.
    /// </summary>
    internal partial class ApiManagementOperations : IServiceOperations<ApiManagementClient>, IApiManagementOperations
    {
        /// <summary>
        /// Initializes a new instance of the ApiManagementOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ApiManagementOperations(ApiManagementClient client)
        {
            this._client = client;
        }
        
        private ApiManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.ApiManagement.ApiManagementClient.
        /// </summary>
        public ApiManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Backs up an Api Management service.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Backup operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BackupAsync(string resourceGroupName, string name, ApiServiceBackupRestoreParameters parameters, CancellationToken cancellationToken)
        {
            ApiManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BackupAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.ApiManagement.BeginBackupAsync(resourceGroupName, name, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.ApiManagement.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 60;
                }
                if (client.LongRunningOperationInitialTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationInitialTimeout;
                }
                while ((result.Status != Microsoft.WindowsAzure.OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.ApiManagement.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 60;
                    }
                    if (client.LongRunningOperationRetryTimeout >= 0)
                    {
                        delayInSeconds = client.LongRunningOperationRetryTimeout;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin backup operation of an Api Management service.To determine
        /// whether the operation has finished processing the request, call
        /// GetLongRunningOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the BeginBackup operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginBackupAsync(string resourceGroupName, string name, ApiServiceBackupRestoreParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.AccessKey == null)
            {
                throw new ArgumentNullException("parameters.AccessKey");
            }
            if (parameters.BackupName == null)
            {
                throw new ArgumentNullException("parameters.BackupName");
            }
            if (parameters.ContainerName == null)
            {
                throw new ArgumentNullException("parameters.ContainerName");
            }
            if (parameters.StorageAccount == null)
            {
                throw new ArgumentNullException("parameters.StorageAccount");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginBackupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.ApiManagement/service/" + name.Trim() + "/backup?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject apiServiceBackupRestoreParametersValue = new JObject();
                requestDoc = apiServiceBackupRestoreParametersValue;
                
                apiServiceBackupRestoreParametersValue["storageAccount"] = parameters.StorageAccount;
                
                apiServiceBackupRestoreParametersValue["accessKey"] = parameters.AccessKey;
                
                apiServiceBackupRestoreParametersValue["containerName"] = parameters.ContainerName;
                
                apiServiceBackupRestoreParametersValue["backupName"] = parameters.BackupName;
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begins creating new or updating existing Api Management service.To
        /// determine whether the operation has finished processing the
        /// request, call GetApiServiceLongRunningOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the CreateOrUpdate Api Management
        /// service operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the CreateOrUpdate Api Management service long
        /// running operation.
        /// </returns>
        public async Task<ApiServiceLongRunningOperationResponse> BeginCreatingOrUpdatingAsync(string resourceGroupName, string name, ApiServiceCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            if (parameters.Properties.HostnameConfigurations != null)
            {
                foreach (HostnameConfiguration hostnameConfigurationsParameterItem in parameters.Properties.HostnameConfigurations)
                {
                    if (hostnameConfigurationsParameterItem.Certificate == null)
                    {
                        throw new ArgumentNullException("parameters.Properties.HostnameConfigurations.Certificate");
                    }
                    if (hostnameConfigurationsParameterItem.Certificate.Subject == null)
                    {
                        throw new ArgumentNullException("parameters.Properties.HostnameConfigurations.Certificate.Subject");
                    }
                    if (hostnameConfigurationsParameterItem.Certificate.Thumbprint == null)
                    {
                        throw new ArgumentNullException("parameters.Properties.HostnameConfigurations.Certificate.Thumbprint");
                    }
                    if (hostnameConfigurationsParameterItem.Hostname == null)
                    {
                        throw new ArgumentNullException("parameters.Properties.HostnameConfigurations.Hostname");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginCreatingOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.ApiManagement/service/" + name.Trim() + "?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject apiServiceCreateOrUpdateParametersValue = new JObject();
                requestDoc = apiServiceCreateOrUpdateParametersValue;
                
                apiServiceCreateOrUpdateParametersValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    if (parameters.Tags is ILazyCollection == false || ((ILazyCollection)parameters.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in parameters.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        apiServiceCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                    }
                }
                
                JObject propertiesValue = new JObject();
                apiServiceCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.PublisherEmail != null)
                {
                    propertiesValue["publisherEmail"] = parameters.Properties.PublisherEmail;
                }
                
                if (parameters.Properties.PublisherName != null)
                {
                    propertiesValue["publisherName"] = parameters.Properties.PublisherName;
                }
                
                if (parameters.Properties.SkuProperties != null)
                {
                    JObject skuValue = new JObject();
                    propertiesValue["sku"] = skuValue;
                    
                    skuValue["name"] = parameters.Properties.SkuProperties.SkuType.ToString();
                    
                    if (parameters.Properties.SkuProperties.Capacity != null)
                    {
                        skuValue["capacity"] = parameters.Properties.SkuProperties.Capacity.Value;
                    }
                }
                
                if (parameters.Properties.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = parameters.Properties.ProvisioningState;
                }
                
                if (parameters.Properties.TargetProvisioningState != null)
                {
                    propertiesValue["targetProvisioningState"] = parameters.Properties.TargetProvisioningState;
                }
                
                propertiesValue["createdAtUtc"] = parameters.Properties.CreatedAtUtc;
                
                if (parameters.Properties.ProxyEndpoint != null)
                {
                    propertiesValue["runtimeUrl"] = parameters.Properties.ProxyEndpoint;
                }
                
                if (parameters.Properties.ManagementPortalEndpoint != null)
                {
                    propertiesValue["portalUrl"] = parameters.Properties.ManagementPortalEndpoint;
                }
                
                if (parameters.Properties.AddresserEmail != null)
                {
                    propertiesValue["addresserEmail"] = parameters.Properties.AddresserEmail;
                }
                
                if (parameters.Properties.HostnameConfigurations != null)
                {
                    if (parameters.Properties.HostnameConfigurations is ILazyCollection == false || ((ILazyCollection)parameters.Properties.HostnameConfigurations).IsInitialized)
                    {
                        JArray hostnameConfigurationsArray = new JArray();
                        foreach (HostnameConfiguration hostnameConfigurationsItem in parameters.Properties.HostnameConfigurations)
                        {
                            requestDoc["type"] = hostnameConfigurationsItem.Type.ToString();
                            
                            requestDoc["hostname"] = hostnameConfigurationsItem.Hostname;
                            
                            JObject certificateValue = new JObject();
                            requestDoc["certificate"] = certificateValue;
                            
                            certificateValue["expiry"] = hostnameConfigurationsItem.Certificate.Expiry;
                            
                            certificateValue["thumbprint"] = hostnameConfigurationsItem.Certificate.Thumbprint;
                            
                            certificateValue["subject"] = hostnameConfigurationsItem.Certificate.Subject;
                        }
                        propertiesValue["hostnameConfigurations"] = hostnameConfigurationsArray;
                    }
                }
                
                if (parameters.Properties.StaticIPs != null)
                {
                    if (parameters.Properties.StaticIPs is ILazyCollection == false || ((ILazyCollection)parameters.Properties.StaticIPs).IsInitialized)
                    {
                        JArray staticIPsArray = new JArray();
                        foreach (string staticIPsItem in parameters.Properties.StaticIPs)
                        {
                            staticIPsArray.Add(staticIPsItem);
                        }
                        propertiesValue["staticIPs"] = staticIPsArray;
                    }
                }
                
                if (parameters.Properties.AdditionalRegions != null)
                {
                    if (parameters.Properties.AdditionalRegions is ILazyCollection == false || ((ILazyCollection)parameters.Properties.AdditionalRegions).IsInitialized)
                    {
                        JArray additionalLocationsArray = new JArray();
                        foreach (AdditionalRegion additionalLocationsItem in parameters.Properties.AdditionalRegions)
                        {
                            if (additionalLocationsItem.Location != null)
                            {
                                requestDoc["location"] = additionalLocationsItem.Location;
                            }
                            
                            requestDoc["skuType"] = additionalLocationsItem.SkuType.ToString();
                            
                            if (additionalLocationsItem.SkuUnitCount != null)
                            {
                                requestDoc["skuUnitCount"] = additionalLocationsItem.SkuUnitCount.Value;
                            }
                            
                            if (additionalLocationsItem.StaticIPs != null)
                            {
                                if (additionalLocationsItem.StaticIPs is ILazyCollection == false || ((ILazyCollection)additionalLocationsItem.StaticIPs).IsInitialized)
                                {
                                    JArray staticIPsArray2 = new JArray();
                                    foreach (string staticIPsItem2 in additionalLocationsItem.StaticIPs)
                                    {
                                        staticIPsArray2.Add(staticIPsItem2);
                                    }
                                    requestDoc = staticIPsArray2;
                                }
                            }
                            
                            if (additionalLocationsItem.VirtualNetworkConfiguration != null)
                            {
                                JObject vpnConfigurationValue = new JObject();
                                requestDoc["vpnConfiguration"] = vpnConfigurationValue;
                                
                                vpnConfigurationValue["vnetid"] = additionalLocationsItem.VirtualNetworkConfiguration.VnetId.ToString();
                                
                                if (additionalLocationsItem.VirtualNetworkConfiguration.SubnetName != null)
                                {
                                    vpnConfigurationValue["subnetname"] = additionalLocationsItem.VirtualNetworkConfiguration.SubnetName;
                                }
                                
                                if (additionalLocationsItem.VirtualNetworkConfiguration.Location != null)
                                {
                                    vpnConfigurationValue["location"] = additionalLocationsItem.VirtualNetworkConfiguration.Location;
                                }
                            }
                        }
                        propertiesValue["additionalLocations"] = additionalLocationsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApiServiceLongRunningOperationResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ApiServiceLongRunningOperationResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        ApiServiceResource valueInstance = new ApiServiceResource();
                        result.Value = valueInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            valueInstance.Id = idInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            valueInstance.Location = locationInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            valueInstance.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            valueInstance.Type = typeInstance;
                        }
                        
                        JToken subscriptionIdValue = responseDoc["subscriptionId"];
                        if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                        {
                            string subscriptionIdInstance = ((string)subscriptionIdValue);
                            valueInstance.SubscriptionId = subscriptionIdInstance;
                        }
                        
                        JToken resourceGroupNameValue = responseDoc["resourceGroupName"];
                        if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                        {
                            string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                            valueInstance.ResourceGroupName = resourceGroupNameInstance;
                        }
                        
                        JToken etagValue = responseDoc["etag"];
                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                        {
                            string etagInstance = ((string)etagValue);
                            valueInstance.ETag = etagInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                valueInstance.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                        
                        JToken propertiesValue2 = responseDoc["properties"];
                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                        {
                            ApiServiceProperties propertiesInstance = new ApiServiceProperties();
                            valueInstance.Properties = propertiesInstance;
                            
                            JToken publisherEmailValue = propertiesValue2["publisherEmail"];
                            if (publisherEmailValue != null && publisherEmailValue.Type != JTokenType.Null)
                            {
                                string publisherEmailInstance = ((string)publisherEmailValue);
                                propertiesInstance.PublisherEmail = publisherEmailInstance;
                            }
                            
                            JToken publisherNameValue = propertiesValue2["publisherName"];
                            if (publisherNameValue != null && publisherNameValue.Type != JTokenType.Null)
                            {
                                string publisherNameInstance = ((string)publisherNameValue);
                                propertiesInstance.PublisherName = publisherNameInstance;
                            }
                            
                            JToken skuValue2 = propertiesValue2["sku"];
                            if (skuValue2 != null && skuValue2.Type != JTokenType.Null)
                            {
                                ApiServiceSkuProperties skuInstance = new ApiServiceSkuProperties();
                                propertiesInstance.SkuProperties = skuInstance;
                                
                                JToken nameValue2 = skuValue2["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    SkuType nameInstance2 = ((SkuType)Enum.Parse(typeof(SkuType), ((string)nameValue2), true));
                                    skuInstance.SkuType = nameInstance2;
                                }
                                
                                JToken capacityValue = skuValue2["capacity"];
                                if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                {
                                    int capacityInstance = ((int)capacityValue);
                                    skuInstance.Capacity = capacityInstance;
                                }
                            }
                            
                            JToken provisioningStateValue = propertiesValue2["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken targetProvisioningStateValue = propertiesValue2["targetProvisioningState"];
                            if (targetProvisioningStateValue != null && targetProvisioningStateValue.Type != JTokenType.Null)
                            {
                                string targetProvisioningStateInstance = ((string)targetProvisioningStateValue);
                                propertiesInstance.TargetProvisioningState = targetProvisioningStateInstance;
                            }
                            
                            JToken createdAtUtcValue = propertiesValue2["createdAtUtc"];
                            if (createdAtUtcValue != null && createdAtUtcValue.Type != JTokenType.Null)
                            {
                                DateTime createdAtUtcInstance = ((DateTime)createdAtUtcValue);
                                propertiesInstance.CreatedAtUtc = createdAtUtcInstance;
                            }
                            
                            JToken runtimeUrlValue = propertiesValue2["runtimeUrl"];
                            if (runtimeUrlValue != null && runtimeUrlValue.Type != JTokenType.Null)
                            {
                                string runtimeUrlInstance = ((string)runtimeUrlValue);
                                propertiesInstance.ProxyEndpoint = runtimeUrlInstance;
                            }
                            
                            JToken portalUrlValue = propertiesValue2["portalUrl"];
                            if (portalUrlValue != null && portalUrlValue.Type != JTokenType.Null)
                            {
                                string portalUrlInstance = ((string)portalUrlValue);
                                propertiesInstance.ManagementPortalEndpoint = portalUrlInstance;
                            }
                            
                            JToken addresserEmailValue = propertiesValue2["addresserEmail"];
                            if (addresserEmailValue != null && addresserEmailValue.Type != JTokenType.Null)
                            {
                                string addresserEmailInstance = ((string)addresserEmailValue);
                                propertiesInstance.AddresserEmail = addresserEmailInstance;
                            }
                            
                            JToken hostnameConfigurationsArray2 = propertiesValue2["hostnameConfigurations"];
                            if (hostnameConfigurationsArray2 != null && hostnameConfigurationsArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken hostnameConfigurationsValue in ((JArray)hostnameConfigurationsArray2))
                                {
                                    HostnameConfiguration hostnameConfigurationInstance = new HostnameConfiguration();
                                    propertiesInstance.HostnameConfigurations.Add(hostnameConfigurationInstance);
                                    
                                    JToken typeValue2 = hostnameConfigurationsValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        HostnameType typeInstance2 = ((HostnameType)Enum.Parse(typeof(HostnameType), ((string)typeValue2), true));
                                        hostnameConfigurationInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken hostnameValue = hostnameConfigurationsValue["hostname"];
                                    if (hostnameValue != null && hostnameValue.Type != JTokenType.Null)
                                    {
                                        string hostnameInstance = ((string)hostnameValue);
                                        hostnameConfigurationInstance.Hostname = hostnameInstance;
                                    }
                                    
                                    JToken certificateValue2 = hostnameConfigurationsValue["certificate"];
                                    if (certificateValue2 != null && certificateValue2.Type != JTokenType.Null)
                                    {
                                        CertificateInformation certificateInstance = new CertificateInformation();
                                        hostnameConfigurationInstance.Certificate = certificateInstance;
                                        
                                        JToken expiryValue = certificateValue2["expiry"];
                                        if (expiryValue != null && expiryValue.Type != JTokenType.Null)
                                        {
                                            DateTime expiryInstance = ((DateTime)expiryValue);
                                            certificateInstance.Expiry = expiryInstance;
                                        }
                                        
                                        JToken thumbprintValue = certificateValue2["thumbprint"];
                                        if (thumbprintValue != null && thumbprintValue.Type != JTokenType.Null)
                                        {
                                            string thumbprintInstance = ((string)thumbprintValue);
                                            certificateInstance.Thumbprint = thumbprintInstance;
                                        }
                                        
                                        JToken subjectValue = certificateValue2["subject"];
                                        if (subjectValue != null && subjectValue.Type != JTokenType.Null)
                                        {
                                            string subjectInstance = ((string)subjectValue);
                                            certificateInstance.Subject = subjectInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken staticIPsArray3 = propertiesValue2["staticIPs"];
                            if (staticIPsArray3 != null && staticIPsArray3.Type != JTokenType.Null)
                            {
                                foreach (JToken staticIPsValue in ((JArray)staticIPsArray3))
                                {
                                    propertiesInstance.StaticIPs.Add(((string)staticIPsValue));
                                }
                            }
                            
                            JToken additionalLocationsArray2 = propertiesValue2["additionalLocations"];
                            if (additionalLocationsArray2 != null && additionalLocationsArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken additionalLocationsValue in ((JArray)additionalLocationsArray2))
                                {
                                    AdditionalRegion additionalRegionInstance = new AdditionalRegion();
                                    propertiesInstance.AdditionalRegions.Add(additionalRegionInstance);
                                    
                                    JToken locationValue2 = additionalLocationsValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        additionalRegionInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken skuTypeValue = additionalLocationsValue["skuType"];
                                    if (skuTypeValue != null && skuTypeValue.Type != JTokenType.Null)
                                    {
                                        SkuType skuTypeInstance = ((SkuType)Enum.Parse(typeof(SkuType), ((string)skuTypeValue), true));
                                        additionalRegionInstance.SkuType = skuTypeInstance;
                                    }
                                    
                                    JToken skuUnitCountValue = additionalLocationsValue["skuUnitCount"];
                                    if (skuUnitCountValue != null && skuUnitCountValue.Type != JTokenType.Null)
                                    {
                                        int skuUnitCountInstance = ((int)skuUnitCountValue);
                                        additionalRegionInstance.SkuUnitCount = skuUnitCountInstance;
                                    }
                                    
                                    JToken staticIPsArray4 = additionalLocationsValue["staticIPs"];
                                    if (staticIPsArray4 != null && staticIPsArray4.Type != JTokenType.Null)
                                    {
                                        foreach (JToken staticIPsValue2 in ((JArray)staticIPsArray4))
                                        {
                                            additionalRegionInstance.StaticIPs.Add(((string)staticIPsValue2));
                                        }
                                    }
                                    
                                    JToken vpnConfigurationValue2 = additionalLocationsValue["vpnConfiguration"];
                                    if (vpnConfigurationValue2 != null && vpnConfigurationValue2.Type != JTokenType.Null)
                                    {
                                        VirtualNetworkConfiguration vpnConfigurationInstance = new VirtualNetworkConfiguration();
                                        additionalRegionInstance.VirtualNetworkConfiguration = vpnConfigurationInstance;
                                        
                                        JToken vnetidValue = vpnConfigurationValue2["vnetid"];
                                        if (vnetidValue != null && vnetidValue.Type != JTokenType.Null)
                                        {
                                            Guid vnetidInstance = Guid.Parse(((string)vnetidValue));
                                            vpnConfigurationInstance.VnetId = vnetidInstance;
                                        }
                                        
                                        JToken subnetnameValue = vpnConfigurationValue2["subnetname"];
                                        if (subnetnameValue != null && subnetnameValue.Type != JTokenType.Null)
                                        {
                                            string subnetnameInstance = ((string)subnetnameValue);
                                            vpnConfigurationInstance.SubnetName = subnetnameInstance;
                                        }
                                        
                                        JToken locationValue3 = vpnConfigurationValue2["location"];
                                        if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                        {
                                            string locationInstance3 = ((string)locationValue3);
                                            vpnConfigurationInstance.Location = locationInstance3;
                                        }
                                    }
                                }
                            }
                        }
                        
                        ApiManagementError errorInstance = new ApiManagementError();
                        result.Error = errorInstance;
                        
                        JToken codeValue = responseDoc["code"];
                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                        {
                            string codeInstance = ((string)codeValue);
                            errorInstance.Code = codeInstance;
                        }
                        
                        JToken messageValue = responseDoc["message"];
                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                        {
                            string messageInstance = ((string)messageValue);
                            errorInstance.Message = messageInstance;
                        }
                        
                        JToken detailsSequenceElement = ((JToken)responseDoc["details"]);
                        if (detailsSequenceElement != null && detailsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property2 in detailsSequenceElement)
                            {
                                string detailsKey = ((string)property2.Name);
                                string detailsValue = ((string)property2.Value);
                                errorInstance.Details.Add(detailsKey, detailsValue);
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin to manage (CUD) all regions of an Api Management service.To
        /// determine whether the operation has finished processing the
        /// request, call GetLongRunningOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the ManageScale operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginManagingScaleAsync(string resourceGroupName, string name, ApiServiceManageScaleParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginManagingScaleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.ApiManagement/service/" + name.Trim() + "/managescale?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject apiServiceManageScaleParametersValue = new JObject();
                requestDoc = apiServiceManageScaleParametersValue;
                
                apiServiceManageScaleParametersValue["location"] = parameters.Location;
                
                apiServiceManageScaleParametersValue["skuType"] = parameters.SkuType.ToString();
                
                if (parameters.SkuUnitCount != null)
                {
                    apiServiceManageScaleParametersValue["skuUnitCount"] = parameters.SkuUnitCount.Value;
                }
                
                if (parameters.AdditionalRegions != null)
                {
                    apiServiceManageScaleParametersValue["additionalLocations"] = parameters.AdditionalRegions.ToString();
                }
                
                if (parameters.VirtualNetworkConfiguration != null)
                {
                    JObject vpnConfigurationValue = new JObject();
                    apiServiceManageScaleParametersValue["vpnConfiguration"] = vpnConfigurationValue;
                    
                    vpnConfigurationValue["vnetid"] = parameters.VirtualNetworkConfiguration.VnetId.ToString();
                    
                    if (parameters.VirtualNetworkConfiguration.SubnetName != null)
                    {
                        vpnConfigurationValue["subnetname"] = parameters.VirtualNetworkConfiguration.SubnetName;
                    }
                    
                    if (parameters.VirtualNetworkConfiguration.Location != null)
                    {
                        vpnConfigurationValue["location"] = parameters.VirtualNetworkConfiguration.Location;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin to manage (CUD) VPN configuration of an Api Management
        /// service.To determine whether the operation has finished processing
        /// the request, call GetLongRunningOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the ManageVirtualNetworks
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginManagingVirtualNetworksAsync(string resourceGroupName, string name, ApiServiceManageVirtualNetworksParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginManagingVirtualNetworksAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.ApiManagement/service/" + name.Trim() + "/managevpn?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject apiServiceManageVirtualNetworksParametersValue = new JObject();
                requestDoc = apiServiceManageVirtualNetworksParametersValue;
                
                if (parameters.VirtualNetworkConfigurations != null)
                {
                    apiServiceManageVirtualNetworksParametersValue["vpnconfigurations"] = parameters.VirtualNetworkConfigurations.ToString();
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin restore from backup operation of an Api Management service.To
        /// determine whether the operation has finished processing the
        /// request, call GetLongRunningOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Restore Api Management service
        /// from backup operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginRestoringAsync(string resourceGroupName, string name, ApiServiceBackupRestoreParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.AccessKey == null)
            {
                throw new ArgumentNullException("parameters.AccessKey");
            }
            if (parameters.BackupName == null)
            {
                throw new ArgumentNullException("parameters.BackupName");
            }
            if (parameters.ContainerName == null)
            {
                throw new ArgumentNullException("parameters.ContainerName");
            }
            if (parameters.StorageAccount == null)
            {
                throw new ArgumentNullException("parameters.StorageAccount");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginRestoringAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.ApiManagement/service/" + name.Trim() + "/restore?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject apiServiceBackupRestoreParametersValue = new JObject();
                requestDoc = apiServiceBackupRestoreParametersValue;
                
                apiServiceBackupRestoreParametersValue["storageAccount"] = parameters.StorageAccount;
                
                apiServiceBackupRestoreParametersValue["accessKey"] = parameters.AccessKey;
                
                apiServiceBackupRestoreParametersValue["containerName"] = parameters.ContainerName;
                
                apiServiceBackupRestoreParametersValue["backupName"] = parameters.BackupName;
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin updating hostname of an Api Management service.To determine
        /// whether the operation has finished processing the request, call
        /// GetLongRunningOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the UpdateHostname operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginUpdatingHostnameAsync(string resourceGroupName, string name, ApiServiceUpdateHostnameParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.HostnamesToCreateOrUpdate != null)
            {
                foreach (HostnameConfiguration hostnamesToCreateOrUpdateParameterItem in parameters.HostnamesToCreateOrUpdate)
                {
                    if (hostnamesToCreateOrUpdateParameterItem.Certificate == null)
                    {
                        throw new ArgumentNullException("parameters.HostnamesToCreateOrUpdate.Certificate");
                    }
                    if (hostnamesToCreateOrUpdateParameterItem.Certificate.Subject == null)
                    {
                        throw new ArgumentNullException("parameters.HostnamesToCreateOrUpdate.Certificate.Subject");
                    }
                    if (hostnamesToCreateOrUpdateParameterItem.Certificate.Thumbprint == null)
                    {
                        throw new ArgumentNullException("parameters.HostnamesToCreateOrUpdate.Certificate.Thumbprint");
                    }
                    if (hostnamesToCreateOrUpdateParameterItem.Hostname == null)
                    {
                        throw new ArgumentNullException("parameters.HostnamesToCreateOrUpdate.Hostname");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginUpdatingHostnameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.ApiManagement/service/" + name.Trim() + "/updatehostname?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject apiServiceUpdateHostnameParametersValue = new JObject();
                requestDoc = apiServiceUpdateHostnameParametersValue;
                
                if (parameters.HostnamesToCreateOrUpdate != null)
                {
                    apiServiceUpdateHostnameParametersValue["update"] = parameters.HostnamesToCreateOrUpdate.ToString();
                }
                
                if (parameters.HostnamesToDelete != null)
                {
                    apiServiceUpdateHostnameParametersValue["delete"] = parameters.HostnamesToDelete.ToString();
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin updating SKU of an Api Management service.To determine
        /// whether the operation has finished processing the request, call
        /// GetLongRunningOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the UpdateSku operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginUpdatingSkuAsync(string resourceGroupName, string name, ApiServiceUpdateSkuParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginUpdatingSkuAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.ApiManagement/service/" + name.Trim() + "/updatesku?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject apiServiceUpdateSkuParametersValue = new JObject();
                requestDoc = apiServiceUpdateSkuParametersValue;
                
                apiServiceUpdateSkuParametersValue["skuType"] = parameters.SkuType.ToString();
                
                apiServiceUpdateSkuParametersValue["skuUnitCount"] = parameters.SkuUnitCount;
                
                apiServiceUpdateSkuParametersValue["updateOperationType"] = parameters.UpdateSkuOperationType.ToString();
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Checks whether the custom host name maps to an Api Management
        /// service.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the CheckCustomHostname operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the CheckCustomHostname operation.
        /// </returns>
        public async Task<ApiServiceCheckCustomHostnameResponse> CheckCustomHostnameAsync(string resourceGroupName, string name, ApiServiceCheckCustomHostnameParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.HostnamesToCheck != null)
            {
                foreach (HostnameConfiguration hostnamesToCheckParameterItem in parameters.HostnamesToCheck)
                {
                    if (hostnamesToCheckParameterItem.Certificate == null)
                    {
                        throw new ArgumentNullException("parameters.HostnamesToCheck.Certificate");
                    }
                    if (hostnamesToCheckParameterItem.Certificate.Subject == null)
                    {
                        throw new ArgumentNullException("parameters.HostnamesToCheck.Certificate.Subject");
                    }
                    if (hostnamesToCheckParameterItem.Certificate.Thumbprint == null)
                    {
                        throw new ArgumentNullException("parameters.HostnamesToCheck.Certificate.Thumbprint");
                    }
                    if (hostnamesToCheckParameterItem.Hostname == null)
                    {
                        throw new ArgumentNullException("parameters.HostnamesToCheck.Hostname");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CheckCustomHostnameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.ApiManagement/service/" + name.Trim() + "/checkcustomhostname?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject apiServiceCheckCustomHostnameParametersValue = new JObject();
                requestDoc = apiServiceCheckCustomHostnameParametersValue;
                
                if (parameters.HostnamesToCheck != null)
                {
                    apiServiceCheckCustomHostnameParametersValue["update"] = parameters.HostnamesToCheck.ToString();
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApiServiceCheckCustomHostnameResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ApiServiceCheckCustomHostnameResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["Value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                CheckCustomHostnameResult checkCustomHostnameResultInstance = new CheckCustomHostnameResult();
                                result.Value.Add(checkCustomHostnameResultInstance);
                                
                                JToken hostnameValue = valueValue["hostname"];
                                if (hostnameValue != null && hostnameValue.Type != JTokenType.Null)
                                {
                                    string hostnameInstance = ((string)hostnameValue);
                                    checkCustomHostnameResultInstance.Hostname = hostnameInstance;
                                }
                                
                                JToken isMappedValue = valueValue["isMapped"];
                                if (isMappedValue != null && isMappedValue.Type != JTokenType.Null)
                                {
                                    bool isMappedInstance = ((bool)isMappedValue);
                                    checkCustomHostnameResultInstance.IsMapped = isMappedInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Checks availability and correctness of a name for an Api Management
        /// service.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the CheckServiceNameAvailability
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of the CheckServiceNameAvailability operation.
        /// </returns>
        public async Task<ApiServiceCheckNameAvailabilityResponse> CheckServiceNameAvailabilityAsync(ApiServiceCheckNameAvailabilityParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CheckServiceNameAvailabilityAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/providers/Microsoft.ApiManagement/checkServiceNameAvailability?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject apiServiceCheckNameAvailabilityParametersValue = new JObject();
                requestDoc = apiServiceCheckNameAvailabilityParametersValue;
                
                apiServiceCheckNameAvailabilityParametersValue["name"] = parameters.Name;
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApiServiceCheckNameAvailabilityResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ApiServiceCheckNameAvailabilityResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken isAvailableValue = responseDoc["isAvailable"];
                        if (isAvailableValue != null && isAvailableValue.Type != JTokenType.Null)
                        {
                            bool isAvailableInstance = ((bool)isAvailableValue);
                            result.IsAvailable = isAvailableInstance;
                        }
                        
                        JToken reasonValue = responseDoc["reason"];
                        if (reasonValue != null && reasonValue.Type != JTokenType.Null)
                        {
                            string reasonInstance = ((string)reasonValue);
                            result.Reason = reasonInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates new or updates existing Api Management service
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the CreateOrUpdate Api Management
        /// service operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the CreateOrUpdate Api Management service long
        /// running operation.
        /// </returns>
        public async Task<ApiServiceLongRunningOperationResponse> CreateOrUpdateAsync(string resourceGroupName, string name, ApiServiceCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            ApiManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                ApiServiceLongRunningOperationResponse response = await client.ApiManagement.BeginCreatingOrUpdatingAsync(resourceGroupName, name, parameters, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                ApiServiceLongRunningOperationResponse result = await client.ApiManagement.GetApiServiceLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 60;
                }
                if (client.LongRunningOperationInitialTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationInitialTimeout;
                }
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.ApiManagement.GetApiServiceLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 60;
                    }
                    if (client.LongRunningOperationRetryTimeout >= 0)
                    {
                        delayInSeconds = client.LongRunningOperationRetryTimeout;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes existing Api Management service
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string resourceGroupName, string name, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.ApiManagement/service/" + name.Trim() + "?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get an Api Management service resource description.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the Get Api Management service operation.
        /// </returns>
        public async Task<ApiServiceGetResponse> GetAsync(string resourceGroupName, string name, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.ApiManagement/service/" + name.Trim() + "?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApiServiceGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ApiServiceGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        ApiServiceResource valueInstance = new ApiServiceResource();
                        result.Value = valueInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            valueInstance.Id = idInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            valueInstance.Location = locationInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            valueInstance.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            valueInstance.Type = typeInstance;
                        }
                        
                        JToken subscriptionIdValue = responseDoc["subscriptionId"];
                        if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                        {
                            string subscriptionIdInstance = ((string)subscriptionIdValue);
                            valueInstance.SubscriptionId = subscriptionIdInstance;
                        }
                        
                        JToken resourceGroupNameValue = responseDoc["resourceGroupName"];
                        if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                        {
                            string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                            valueInstance.ResourceGroupName = resourceGroupNameInstance;
                        }
                        
                        JToken etagValue = responseDoc["etag"];
                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                        {
                            string etagInstance = ((string)etagValue);
                            valueInstance.ETag = etagInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                valueInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            ApiServiceProperties propertiesInstance = new ApiServiceProperties();
                            valueInstance.Properties = propertiesInstance;
                            
                            JToken publisherEmailValue = propertiesValue["publisherEmail"];
                            if (publisherEmailValue != null && publisherEmailValue.Type != JTokenType.Null)
                            {
                                string publisherEmailInstance = ((string)publisherEmailValue);
                                propertiesInstance.PublisherEmail = publisherEmailInstance;
                            }
                            
                            JToken publisherNameValue = propertiesValue["publisherName"];
                            if (publisherNameValue != null && publisherNameValue.Type != JTokenType.Null)
                            {
                                string publisherNameInstance = ((string)publisherNameValue);
                                propertiesInstance.PublisherName = publisherNameInstance;
                            }
                            
                            JToken skuValue = propertiesValue["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                ApiServiceSkuProperties skuInstance = new ApiServiceSkuProperties();
                                propertiesInstance.SkuProperties = skuInstance;
                                
                                JToken nameValue2 = skuValue["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    SkuType nameInstance2 = ((SkuType)Enum.Parse(typeof(SkuType), ((string)nameValue2), true));
                                    skuInstance.SkuType = nameInstance2;
                                }
                                
                                JToken capacityValue = skuValue["capacity"];
                                if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                {
                                    int capacityInstance = ((int)capacityValue);
                                    skuInstance.Capacity = capacityInstance;
                                }
                            }
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken targetProvisioningStateValue = propertiesValue["targetProvisioningState"];
                            if (targetProvisioningStateValue != null && targetProvisioningStateValue.Type != JTokenType.Null)
                            {
                                string targetProvisioningStateInstance = ((string)targetProvisioningStateValue);
                                propertiesInstance.TargetProvisioningState = targetProvisioningStateInstance;
                            }
                            
                            JToken createdAtUtcValue = propertiesValue["createdAtUtc"];
                            if (createdAtUtcValue != null && createdAtUtcValue.Type != JTokenType.Null)
                            {
                                DateTime createdAtUtcInstance = ((DateTime)createdAtUtcValue);
                                propertiesInstance.CreatedAtUtc = createdAtUtcInstance;
                            }
                            
                            JToken runtimeUrlValue = propertiesValue["runtimeUrl"];
                            if (runtimeUrlValue != null && runtimeUrlValue.Type != JTokenType.Null)
                            {
                                string runtimeUrlInstance = ((string)runtimeUrlValue);
                                propertiesInstance.ProxyEndpoint = runtimeUrlInstance;
                            }
                            
                            JToken portalUrlValue = propertiesValue["portalUrl"];
                            if (portalUrlValue != null && portalUrlValue.Type != JTokenType.Null)
                            {
                                string portalUrlInstance = ((string)portalUrlValue);
                                propertiesInstance.ManagementPortalEndpoint = portalUrlInstance;
                            }
                            
                            JToken addresserEmailValue = propertiesValue["addresserEmail"];
                            if (addresserEmailValue != null && addresserEmailValue.Type != JTokenType.Null)
                            {
                                string addresserEmailInstance = ((string)addresserEmailValue);
                                propertiesInstance.AddresserEmail = addresserEmailInstance;
                            }
                            
                            JToken hostnameConfigurationsArray = propertiesValue["hostnameConfigurations"];
                            if (hostnameConfigurationsArray != null && hostnameConfigurationsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken hostnameConfigurationsValue in ((JArray)hostnameConfigurationsArray))
                                {
                                    HostnameConfiguration hostnameConfigurationInstance = new HostnameConfiguration();
                                    propertiesInstance.HostnameConfigurations.Add(hostnameConfigurationInstance);
                                    
                                    JToken typeValue2 = hostnameConfigurationsValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        HostnameType typeInstance2 = ((HostnameType)Enum.Parse(typeof(HostnameType), ((string)typeValue2), true));
                                        hostnameConfigurationInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken hostnameValue = hostnameConfigurationsValue["hostname"];
                                    if (hostnameValue != null && hostnameValue.Type != JTokenType.Null)
                                    {
                                        string hostnameInstance = ((string)hostnameValue);
                                        hostnameConfigurationInstance.Hostname = hostnameInstance;
                                    }
                                    
                                    JToken certificateValue = hostnameConfigurationsValue["certificate"];
                                    if (certificateValue != null && certificateValue.Type != JTokenType.Null)
                                    {
                                        CertificateInformation certificateInstance = new CertificateInformation();
                                        hostnameConfigurationInstance.Certificate = certificateInstance;
                                        
                                        JToken expiryValue = certificateValue["expiry"];
                                        if (expiryValue != null && expiryValue.Type != JTokenType.Null)
                                        {
                                            DateTime expiryInstance = ((DateTime)expiryValue);
                                            certificateInstance.Expiry = expiryInstance;
                                        }
                                        
                                        JToken thumbprintValue = certificateValue["thumbprint"];
                                        if (thumbprintValue != null && thumbprintValue.Type != JTokenType.Null)
                                        {
                                            string thumbprintInstance = ((string)thumbprintValue);
                                            certificateInstance.Thumbprint = thumbprintInstance;
                                        }
                                        
                                        JToken subjectValue = certificateValue["subject"];
                                        if (subjectValue != null && subjectValue.Type != JTokenType.Null)
                                        {
                                            string subjectInstance = ((string)subjectValue);
                                            certificateInstance.Subject = subjectInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken staticIPsArray = propertiesValue["staticIPs"];
                            if (staticIPsArray != null && staticIPsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken staticIPsValue in ((JArray)staticIPsArray))
                                {
                                    propertiesInstance.StaticIPs.Add(((string)staticIPsValue));
                                }
                            }
                            
                            JToken additionalLocationsArray = propertiesValue["additionalLocations"];
                            if (additionalLocationsArray != null && additionalLocationsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken additionalLocationsValue in ((JArray)additionalLocationsArray))
                                {
                                    AdditionalRegion additionalRegionInstance = new AdditionalRegion();
                                    propertiesInstance.AdditionalRegions.Add(additionalRegionInstance);
                                    
                                    JToken locationValue2 = additionalLocationsValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        additionalRegionInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken skuTypeValue = additionalLocationsValue["skuType"];
                                    if (skuTypeValue != null && skuTypeValue.Type != JTokenType.Null)
                                    {
                                        SkuType skuTypeInstance = ((SkuType)Enum.Parse(typeof(SkuType), ((string)skuTypeValue), true));
                                        additionalRegionInstance.SkuType = skuTypeInstance;
                                    }
                                    
                                    JToken skuUnitCountValue = additionalLocationsValue["skuUnitCount"];
                                    if (skuUnitCountValue != null && skuUnitCountValue.Type != JTokenType.Null)
                                    {
                                        int skuUnitCountInstance = ((int)skuUnitCountValue);
                                        additionalRegionInstance.SkuUnitCount = skuUnitCountInstance;
                                    }
                                    
                                    JToken staticIPsArray2 = additionalLocationsValue["staticIPs"];
                                    if (staticIPsArray2 != null && staticIPsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken staticIPsValue2 in ((JArray)staticIPsArray2))
                                        {
                                            additionalRegionInstance.StaticIPs.Add(((string)staticIPsValue2));
                                        }
                                    }
                                    
                                    JToken vpnConfigurationValue = additionalLocationsValue["vpnConfiguration"];
                                    if (vpnConfigurationValue != null && vpnConfigurationValue.Type != JTokenType.Null)
                                    {
                                        VirtualNetworkConfiguration vpnConfigurationInstance = new VirtualNetworkConfiguration();
                                        additionalRegionInstance.VirtualNetworkConfiguration = vpnConfigurationInstance;
                                        
                                        JToken vnetidValue = vpnConfigurationValue["vnetid"];
                                        if (vnetidValue != null && vnetidValue.Type != JTokenType.Null)
                                        {
                                            Guid vnetidInstance = Guid.Parse(((string)vnetidValue));
                                            vpnConfigurationInstance.VnetId = vnetidInstance;
                                        }
                                        
                                        JToken subnetnameValue = vpnConfigurationValue["subnetname"];
                                        if (subnetnameValue != null && subnetnameValue.Type != JTokenType.Null)
                                        {
                                            string subnetnameInstance = ((string)subnetnameValue);
                                            vpnConfigurationInstance.SubnetName = subnetnameInstance;
                                        }
                                        
                                        JToken locationValue3 = vpnConfigurationValue["location"];
                                        if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                        {
                                            string locationInstance3 = ((string)locationValue3);
                                            vpnConfigurationInstance.Location = locationInstance3;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get ApiService Operation Status operation returns the status of
        /// the create or update operation. After calling the operation, you
        /// can call Get ApiService Operation Status to determine whether the
        /// operation has succeeded, failed, or is still in progress. This
        /// method differs GetLongRunningOperationStatus in providing Api
        /// Management service resource description.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the CreateOrUpdate Api Management service long
        /// running operation.
        /// </returns>
        public async Task<ApiServiceLongRunningOperationResponse> GetApiServiceLongRunningOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                Tracing.Enter(invocationId, this, "GetApiServiceLongRunningOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = operationStatusLink.Trim();
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-02-14");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApiServiceLongRunningOperationResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ApiServiceLongRunningOperationResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        ApiServiceResource valueInstance = new ApiServiceResource();
                        result.Value = valueInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            valueInstance.Id = idInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            valueInstance.Location = locationInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            valueInstance.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            valueInstance.Type = typeInstance;
                        }
                        
                        JToken subscriptionIdValue = responseDoc["subscriptionId"];
                        if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                        {
                            string subscriptionIdInstance = ((string)subscriptionIdValue);
                            valueInstance.SubscriptionId = subscriptionIdInstance;
                        }
                        
                        JToken resourceGroupNameValue = responseDoc["resourceGroupName"];
                        if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                        {
                            string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                            valueInstance.ResourceGroupName = resourceGroupNameInstance;
                        }
                        
                        JToken etagValue = responseDoc["etag"];
                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                        {
                            string etagInstance = ((string)etagValue);
                            valueInstance.ETag = etagInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                valueInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            ApiServiceProperties propertiesInstance = new ApiServiceProperties();
                            valueInstance.Properties = propertiesInstance;
                            
                            JToken publisherEmailValue = propertiesValue["publisherEmail"];
                            if (publisherEmailValue != null && publisherEmailValue.Type != JTokenType.Null)
                            {
                                string publisherEmailInstance = ((string)publisherEmailValue);
                                propertiesInstance.PublisherEmail = publisherEmailInstance;
                            }
                            
                            JToken publisherNameValue = propertiesValue["publisherName"];
                            if (publisherNameValue != null && publisherNameValue.Type != JTokenType.Null)
                            {
                                string publisherNameInstance = ((string)publisherNameValue);
                                propertiesInstance.PublisherName = publisherNameInstance;
                            }
                            
                            JToken skuValue = propertiesValue["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                ApiServiceSkuProperties skuInstance = new ApiServiceSkuProperties();
                                propertiesInstance.SkuProperties = skuInstance;
                                
                                JToken nameValue2 = skuValue["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    SkuType nameInstance2 = ((SkuType)Enum.Parse(typeof(SkuType), ((string)nameValue2), true));
                                    skuInstance.SkuType = nameInstance2;
                                }
                                
                                JToken capacityValue = skuValue["capacity"];
                                if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                {
                                    int capacityInstance = ((int)capacityValue);
                                    skuInstance.Capacity = capacityInstance;
                                }
                            }
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken targetProvisioningStateValue = propertiesValue["targetProvisioningState"];
                            if (targetProvisioningStateValue != null && targetProvisioningStateValue.Type != JTokenType.Null)
                            {
                                string targetProvisioningStateInstance = ((string)targetProvisioningStateValue);
                                propertiesInstance.TargetProvisioningState = targetProvisioningStateInstance;
                            }
                            
                            JToken createdAtUtcValue = propertiesValue["createdAtUtc"];
                            if (createdAtUtcValue != null && createdAtUtcValue.Type != JTokenType.Null)
                            {
                                DateTime createdAtUtcInstance = ((DateTime)createdAtUtcValue);
                                propertiesInstance.CreatedAtUtc = createdAtUtcInstance;
                            }
                            
                            JToken runtimeUrlValue = propertiesValue["runtimeUrl"];
                            if (runtimeUrlValue != null && runtimeUrlValue.Type != JTokenType.Null)
                            {
                                string runtimeUrlInstance = ((string)runtimeUrlValue);
                                propertiesInstance.ProxyEndpoint = runtimeUrlInstance;
                            }
                            
                            JToken portalUrlValue = propertiesValue["portalUrl"];
                            if (portalUrlValue != null && portalUrlValue.Type != JTokenType.Null)
                            {
                                string portalUrlInstance = ((string)portalUrlValue);
                                propertiesInstance.ManagementPortalEndpoint = portalUrlInstance;
                            }
                            
                            JToken addresserEmailValue = propertiesValue["addresserEmail"];
                            if (addresserEmailValue != null && addresserEmailValue.Type != JTokenType.Null)
                            {
                                string addresserEmailInstance = ((string)addresserEmailValue);
                                propertiesInstance.AddresserEmail = addresserEmailInstance;
                            }
                            
                            JToken hostnameConfigurationsArray = propertiesValue["hostnameConfigurations"];
                            if (hostnameConfigurationsArray != null && hostnameConfigurationsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken hostnameConfigurationsValue in ((JArray)hostnameConfigurationsArray))
                                {
                                    HostnameConfiguration hostnameConfigurationInstance = new HostnameConfiguration();
                                    propertiesInstance.HostnameConfigurations.Add(hostnameConfigurationInstance);
                                    
                                    JToken typeValue2 = hostnameConfigurationsValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        HostnameType typeInstance2 = ((HostnameType)Enum.Parse(typeof(HostnameType), ((string)typeValue2), true));
                                        hostnameConfigurationInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken hostnameValue = hostnameConfigurationsValue["hostname"];
                                    if (hostnameValue != null && hostnameValue.Type != JTokenType.Null)
                                    {
                                        string hostnameInstance = ((string)hostnameValue);
                                        hostnameConfigurationInstance.Hostname = hostnameInstance;
                                    }
                                    
                                    JToken certificateValue = hostnameConfigurationsValue["certificate"];
                                    if (certificateValue != null && certificateValue.Type != JTokenType.Null)
                                    {
                                        CertificateInformation certificateInstance = new CertificateInformation();
                                        hostnameConfigurationInstance.Certificate = certificateInstance;
                                        
                                        JToken expiryValue = certificateValue["expiry"];
                                        if (expiryValue != null && expiryValue.Type != JTokenType.Null)
                                        {
                                            DateTime expiryInstance = ((DateTime)expiryValue);
                                            certificateInstance.Expiry = expiryInstance;
                                        }
                                        
                                        JToken thumbprintValue = certificateValue["thumbprint"];
                                        if (thumbprintValue != null && thumbprintValue.Type != JTokenType.Null)
                                        {
                                            string thumbprintInstance = ((string)thumbprintValue);
                                            certificateInstance.Thumbprint = thumbprintInstance;
                                        }
                                        
                                        JToken subjectValue = certificateValue["subject"];
                                        if (subjectValue != null && subjectValue.Type != JTokenType.Null)
                                        {
                                            string subjectInstance = ((string)subjectValue);
                                            certificateInstance.Subject = subjectInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken staticIPsArray = propertiesValue["staticIPs"];
                            if (staticIPsArray != null && staticIPsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken staticIPsValue in ((JArray)staticIPsArray))
                                {
                                    propertiesInstance.StaticIPs.Add(((string)staticIPsValue));
                                }
                            }
                            
                            JToken additionalLocationsArray = propertiesValue["additionalLocations"];
                            if (additionalLocationsArray != null && additionalLocationsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken additionalLocationsValue in ((JArray)additionalLocationsArray))
                                {
                                    AdditionalRegion additionalRegionInstance = new AdditionalRegion();
                                    propertiesInstance.AdditionalRegions.Add(additionalRegionInstance);
                                    
                                    JToken locationValue2 = additionalLocationsValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        additionalRegionInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken skuTypeValue = additionalLocationsValue["skuType"];
                                    if (skuTypeValue != null && skuTypeValue.Type != JTokenType.Null)
                                    {
                                        SkuType skuTypeInstance = ((SkuType)Enum.Parse(typeof(SkuType), ((string)skuTypeValue), true));
                                        additionalRegionInstance.SkuType = skuTypeInstance;
                                    }
                                    
                                    JToken skuUnitCountValue = additionalLocationsValue["skuUnitCount"];
                                    if (skuUnitCountValue != null && skuUnitCountValue.Type != JTokenType.Null)
                                    {
                                        int skuUnitCountInstance = ((int)skuUnitCountValue);
                                        additionalRegionInstance.SkuUnitCount = skuUnitCountInstance;
                                    }
                                    
                                    JToken staticIPsArray2 = additionalLocationsValue["staticIPs"];
                                    if (staticIPsArray2 != null && staticIPsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken staticIPsValue2 in ((JArray)staticIPsArray2))
                                        {
                                            additionalRegionInstance.StaticIPs.Add(((string)staticIPsValue2));
                                        }
                                    }
                                    
                                    JToken vpnConfigurationValue = additionalLocationsValue["vpnConfiguration"];
                                    if (vpnConfigurationValue != null && vpnConfigurationValue.Type != JTokenType.Null)
                                    {
                                        VirtualNetworkConfiguration vpnConfigurationInstance = new VirtualNetworkConfiguration();
                                        additionalRegionInstance.VirtualNetworkConfiguration = vpnConfigurationInstance;
                                        
                                        JToken vnetidValue = vpnConfigurationValue["vnetid"];
                                        if (vnetidValue != null && vnetidValue.Type != JTokenType.Null)
                                        {
                                            Guid vnetidInstance = Guid.Parse(((string)vnetidValue));
                                            vpnConfigurationInstance.VnetId = vnetidInstance;
                                        }
                                        
                                        JToken subnetnameValue = vpnConfigurationValue["subnetname"];
                                        if (subnetnameValue != null && subnetnameValue.Type != JTokenType.Null)
                                        {
                                            string subnetnameInstance = ((string)subnetnameValue);
                                            vpnConfigurationInstance.SubnetName = subnetnameInstance;
                                        }
                                        
                                        JToken locationValue3 = vpnConfigurationValue["location"];
                                        if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                        {
                                            string locationInstance3 = ((string)locationValue3);
                                            vpnConfigurationInstance.Location = locationInstance3;
                                        }
                                    }
                                }
                            }
                        }
                        
                        ApiManagementError errorInstance = new ApiManagementError();
                        result.Error = errorInstance;
                        
                        JToken codeValue = responseDoc["code"];
                        if (codeValue != null && codeValue.Type != JTokenType.Null)
                        {
                            string codeInstance = ((string)codeValue);
                            errorInstance.Code = codeInstance;
                        }
                        
                        JToken messageValue = responseDoc["message"];
                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                        {
                            string messageInstance = ((string)messageValue);
                            errorInstance.Message = messageInstance;
                        }
                        
                        JToken detailsSequenceElement = ((JToken)responseDoc["details"]);
                        if (detailsSequenceElement != null && detailsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property2 in detailsSequenceElement)
                            {
                                string detailsKey = ((string)property2.Name);
                                string detailsValue = ((string)property2.Value);
                                errorInstance.Details.Add(detailsKey, detailsValue);
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.BadRequest)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> GetLongRunningOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                Tracing.Enter(invocationId, this, "GetLongRunningOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = operationStatusLink.Trim();
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-02-14");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict || statusCode == HttpStatusCode.BadRequest)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets SsoToken for an Api Management service.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the GetSsoToken operation.
        /// </returns>
        public async Task<ApiServiceGetSsoTokenResponse> GetSsoTokenAsync(string resourceGroupName, string name, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                Tracing.Enter(invocationId, this, "GetSsoTokenAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.ApiManagement/service/" + name.Trim() + "/getssotoken?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApiServiceGetSsoTokenResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ApiServiceGetSsoTokenResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken redirectUriValue = responseDoc["redirect_uri"];
                        if (redirectUriValue != null && redirectUriValue.Type != JTokenType.Null)
                        {
                            string redirectUriInstance = ((string)redirectUriValue);
                            result.RedirectUrl = redirectUriInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all Api Management services within a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Optional. The name of the resource group. If resourceGroupName
        /// value is null the method lists all Api Management services within
        /// subscription
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the List Api Management services operation.
        /// </returns>
        public async Task<ApiServiceListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "");
            if (resourceGroupName != null)
            {
                url = url + "/resourceGroups/" + Uri.EscapeDataString(resourceGroupName != null ? resourceGroupName.Trim() : "");
            }
            url = url + "/providers/Microsoft.ApiManagement/service/?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApiServiceListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ApiServiceListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                ApiServiceResource apiServiceResourceInstance = new ApiServiceResource();
                                result.Value.Add(apiServiceResourceInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    apiServiceResourceInstance.Id = idInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    apiServiceResourceInstance.Location = locationInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    apiServiceResourceInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    apiServiceResourceInstance.Type = typeInstance;
                                }
                                
                                JToken subscriptionIdValue = valueValue["subscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    apiServiceResourceInstance.SubscriptionId = subscriptionIdInstance;
                                }
                                
                                JToken resourceGroupNameValue = valueValue["resourceGroupName"];
                                if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                    apiServiceResourceInstance.ResourceGroupName = resourceGroupNameInstance;
                                }
                                
                                JToken etagValue = valueValue["etag"];
                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                {
                                    string etagInstance = ((string)etagValue);
                                    apiServiceResourceInstance.ETag = etagInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        apiServiceResourceInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    ApiServiceProperties propertiesInstance = new ApiServiceProperties();
                                    apiServiceResourceInstance.Properties = propertiesInstance;
                                    
                                    JToken publisherEmailValue = propertiesValue["publisherEmail"];
                                    if (publisherEmailValue != null && publisherEmailValue.Type != JTokenType.Null)
                                    {
                                        string publisherEmailInstance = ((string)publisherEmailValue);
                                        propertiesInstance.PublisherEmail = publisherEmailInstance;
                                    }
                                    
                                    JToken publisherNameValue = propertiesValue["publisherName"];
                                    if (publisherNameValue != null && publisherNameValue.Type != JTokenType.Null)
                                    {
                                        string publisherNameInstance = ((string)publisherNameValue);
                                        propertiesInstance.PublisherName = publisherNameInstance;
                                    }
                                    
                                    JToken skuValue = propertiesValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        ApiServiceSkuProperties skuInstance = new ApiServiceSkuProperties();
                                        propertiesInstance.SkuProperties = skuInstance;
                                        
                                        JToken nameValue2 = skuValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            SkuType nameInstance2 = ((SkuType)Enum.Parse(typeof(SkuType), ((string)nameValue2), true));
                                            skuInstance.SkuType = nameInstance2;
                                        }
                                        
                                        JToken capacityValue = skuValue["capacity"];
                                        if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                        {
                                            int capacityInstance = ((int)capacityValue);
                                            skuInstance.Capacity = capacityInstance;
                                        }
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken targetProvisioningStateValue = propertiesValue["targetProvisioningState"];
                                    if (targetProvisioningStateValue != null && targetProvisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string targetProvisioningStateInstance = ((string)targetProvisioningStateValue);
                                        propertiesInstance.TargetProvisioningState = targetProvisioningStateInstance;
                                    }
                                    
                                    JToken createdAtUtcValue = propertiesValue["createdAtUtc"];
                                    if (createdAtUtcValue != null && createdAtUtcValue.Type != JTokenType.Null)
                                    {
                                        DateTime createdAtUtcInstance = ((DateTime)createdAtUtcValue);
                                        propertiesInstance.CreatedAtUtc = createdAtUtcInstance;
                                    }
                                    
                                    JToken runtimeUrlValue = propertiesValue["runtimeUrl"];
                                    if (runtimeUrlValue != null && runtimeUrlValue.Type != JTokenType.Null)
                                    {
                                        string runtimeUrlInstance = ((string)runtimeUrlValue);
                                        propertiesInstance.ProxyEndpoint = runtimeUrlInstance;
                                    }
                                    
                                    JToken portalUrlValue = propertiesValue["portalUrl"];
                                    if (portalUrlValue != null && portalUrlValue.Type != JTokenType.Null)
                                    {
                                        string portalUrlInstance = ((string)portalUrlValue);
                                        propertiesInstance.ManagementPortalEndpoint = portalUrlInstance;
                                    }
                                    
                                    JToken addresserEmailValue = propertiesValue["addresserEmail"];
                                    if (addresserEmailValue != null && addresserEmailValue.Type != JTokenType.Null)
                                    {
                                        string addresserEmailInstance = ((string)addresserEmailValue);
                                        propertiesInstance.AddresserEmail = addresserEmailInstance;
                                    }
                                    
                                    JToken hostnameConfigurationsArray = propertiesValue["hostnameConfigurations"];
                                    if (hostnameConfigurationsArray != null && hostnameConfigurationsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken hostnameConfigurationsValue in ((JArray)hostnameConfigurationsArray))
                                        {
                                            HostnameConfiguration hostnameConfigurationInstance = new HostnameConfiguration();
                                            propertiesInstance.HostnameConfigurations.Add(hostnameConfigurationInstance);
                                            
                                            JToken typeValue2 = hostnameConfigurationsValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                HostnameType typeInstance2 = ((HostnameType)Enum.Parse(typeof(HostnameType), ((string)typeValue2), true));
                                                hostnameConfigurationInstance.Type = typeInstance2;
                                            }
                                            
                                            JToken hostnameValue = hostnameConfigurationsValue["hostname"];
                                            if (hostnameValue != null && hostnameValue.Type != JTokenType.Null)
                                            {
                                                string hostnameInstance = ((string)hostnameValue);
                                                hostnameConfigurationInstance.Hostname = hostnameInstance;
                                            }
                                            
                                            JToken certificateValue = hostnameConfigurationsValue["certificate"];
                                            if (certificateValue != null && certificateValue.Type != JTokenType.Null)
                                            {
                                                CertificateInformation certificateInstance = new CertificateInformation();
                                                hostnameConfigurationInstance.Certificate = certificateInstance;
                                                
                                                JToken expiryValue = certificateValue["expiry"];
                                                if (expiryValue != null && expiryValue.Type != JTokenType.Null)
                                                {
                                                    DateTime expiryInstance = ((DateTime)expiryValue);
                                                    certificateInstance.Expiry = expiryInstance;
                                                }
                                                
                                                JToken thumbprintValue = certificateValue["thumbprint"];
                                                if (thumbprintValue != null && thumbprintValue.Type != JTokenType.Null)
                                                {
                                                    string thumbprintInstance = ((string)thumbprintValue);
                                                    certificateInstance.Thumbprint = thumbprintInstance;
                                                }
                                                
                                                JToken subjectValue = certificateValue["subject"];
                                                if (subjectValue != null && subjectValue.Type != JTokenType.Null)
                                                {
                                                    string subjectInstance = ((string)subjectValue);
                                                    certificateInstance.Subject = subjectInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken staticIPsArray = propertiesValue["staticIPs"];
                                    if (staticIPsArray != null && staticIPsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken staticIPsValue in ((JArray)staticIPsArray))
                                        {
                                            propertiesInstance.StaticIPs.Add(((string)staticIPsValue));
                                        }
                                    }
                                    
                                    JToken additionalLocationsArray = propertiesValue["additionalLocations"];
                                    if (additionalLocationsArray != null && additionalLocationsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken additionalLocationsValue in ((JArray)additionalLocationsArray))
                                        {
                                            AdditionalRegion additionalRegionInstance = new AdditionalRegion();
                                            propertiesInstance.AdditionalRegions.Add(additionalRegionInstance);
                                            
                                            JToken locationValue2 = additionalLocationsValue["location"];
                                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                            {
                                                string locationInstance2 = ((string)locationValue2);
                                                additionalRegionInstance.Location = locationInstance2;
                                            }
                                            
                                            JToken skuTypeValue = additionalLocationsValue["skuType"];
                                            if (skuTypeValue != null && skuTypeValue.Type != JTokenType.Null)
                                            {
                                                SkuType skuTypeInstance = ((SkuType)Enum.Parse(typeof(SkuType), ((string)skuTypeValue), true));
                                                additionalRegionInstance.SkuType = skuTypeInstance;
                                            }
                                            
                                            JToken skuUnitCountValue = additionalLocationsValue["skuUnitCount"];
                                            if (skuUnitCountValue != null && skuUnitCountValue.Type != JTokenType.Null)
                                            {
                                                int skuUnitCountInstance = ((int)skuUnitCountValue);
                                                additionalRegionInstance.SkuUnitCount = skuUnitCountInstance;
                                            }
                                            
                                            JToken staticIPsArray2 = additionalLocationsValue["staticIPs"];
                                            if (staticIPsArray2 != null && staticIPsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken staticIPsValue2 in ((JArray)staticIPsArray2))
                                                {
                                                    additionalRegionInstance.StaticIPs.Add(((string)staticIPsValue2));
                                                }
                                            }
                                            
                                            JToken vpnConfigurationValue = additionalLocationsValue["vpnConfiguration"];
                                            if (vpnConfigurationValue != null && vpnConfigurationValue.Type != JTokenType.Null)
                                            {
                                                VirtualNetworkConfiguration vpnConfigurationInstance = new VirtualNetworkConfiguration();
                                                additionalRegionInstance.VirtualNetworkConfiguration = vpnConfigurationInstance;
                                                
                                                JToken vnetidValue = vpnConfigurationValue["vnetid"];
                                                if (vnetidValue != null && vnetidValue.Type != JTokenType.Null)
                                                {
                                                    Guid vnetidInstance = Guid.Parse(((string)vnetidValue));
                                                    vpnConfigurationInstance.VnetId = vnetidInstance;
                                                }
                                                
                                                JToken subnetnameValue = vpnConfigurationValue["subnetname"];
                                                if (subnetnameValue != null && subnetnameValue.Type != JTokenType.Null)
                                                {
                                                    string subnetnameInstance = ((string)subnetnameValue);
                                                    vpnConfigurationInstance.SubnetName = subnetnameInstance;
                                                }
                                                
                                                JToken locationValue3 = vpnConfigurationValue["location"];
                                                if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                                {
                                                    string locationInstance3 = ((string)locationValue3);
                                                    vpnConfigurationInstance.Location = locationInstance3;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Manage (CUD) all regions of an Api Management service.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the ManageScale operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> ManageScaleAsync(string resourceGroupName, string name, ApiServiceManageScaleParameters parameters, CancellationToken cancellationToken)
        {
            ApiManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ManageScaleAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.ApiManagement.BeginManagingScaleAsync(resourceGroupName, name, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.ApiManagement.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 60;
                }
                if (client.LongRunningOperationInitialTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationInitialTimeout;
                }
                while ((result.Status != Microsoft.WindowsAzure.OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.ApiManagement.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 60;
                    }
                    if (client.LongRunningOperationRetryTimeout >= 0)
                    {
                        delayInSeconds = client.LongRunningOperationRetryTimeout;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Manage (CUD) VPN configuration of an Api Management service.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the ManageVirtualNetworks
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> ManageVirtualNetworksAsync(string resourceGroupName, string name, ApiServiceManageVirtualNetworksParameters parameters, CancellationToken cancellationToken)
        {
            ApiManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ManageVirtualNetworksAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.ApiManagement.BeginManagingVirtualNetworksAsync(resourceGroupName, name, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.ApiManagement.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 60;
                }
                if (client.LongRunningOperationInitialTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationInitialTimeout;
                }
                while ((result.Status != Microsoft.WindowsAzure.OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.ApiManagement.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 60;
                    }
                    if (client.LongRunningOperationRetryTimeout >= 0)
                    {
                        delayInSeconds = client.LongRunningOperationRetryTimeout;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Restore an Api Management service from backup.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Restore Api Management service
        /// from backup operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RestoreAsync(string resourceGroupName, string name, ApiServiceBackupRestoreParameters parameters, CancellationToken cancellationToken)
        {
            ApiManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "RestoreAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.ApiManagement.BeginRestoringAsync(resourceGroupName, name, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.ApiManagement.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 60;
                }
                if (client.LongRunningOperationInitialTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationInitialTimeout;
                }
                while ((result.Status != Microsoft.WindowsAzure.OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.ApiManagement.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 60;
                    }
                    if (client.LongRunningOperationRetryTimeout >= 0)
                    {
                        delayInSeconds = client.LongRunningOperationRetryTimeout;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Upload SSL certificate for an Api Management service.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Upload SSL certificate for an
        /// Api Management service operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the Upload SSL certificate for an Api Management
        /// service operation.
        /// </returns>
        public async Task<ApiServiceUpdateCertificateResponse> UpdateCertificateAsync(string resourceGroupName, string name, ApiServiceUpdateCertificateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.CertificatePassword == null)
            {
                throw new ArgumentNullException("parameters.CertificatePassword");
            }
            if (parameters.EncodedCertificate == null)
            {
                throw new ArgumentNullException("parameters.EncodedCertificate");
            }
            if (parameters.Thumbprint == null)
            {
                throw new ArgumentNullException("parameters.Thumbprint");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateCertificateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.ApiManagement/service/" + name.Trim() + "/updatecertificate?";
            url = url + "api-version=2014-02-14";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject apiServiceUpdateCertificateParametersValue = new JObject();
                requestDoc = apiServiceUpdateCertificateParametersValue;
                
                apiServiceUpdateCertificateParametersValue["type"] = parameters.Type.ToString();
                
                apiServiceUpdateCertificateParametersValue["certificate"] = parameters.EncodedCertificate;
                
                apiServiceUpdateCertificateParametersValue["certificate_thumbprint"] = parameters.Thumbprint;
                
                apiServiceUpdateCertificateParametersValue["certificate_password"] = parameters.CertificatePassword;
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApiServiceUpdateCertificateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ApiServiceUpdateCertificateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        CertificateInformation valueInstance = new CertificateInformation();
                        result.Value = valueInstance;
                        
                        JToken expiryValue = responseDoc["expiry"];
                        if (expiryValue != null && expiryValue.Type != JTokenType.Null)
                        {
                            DateTime expiryInstance = ((DateTime)expiryValue);
                            valueInstance.Expiry = expiryInstance;
                        }
                        
                        JToken thumbprintValue = responseDoc["thumbprint"];
                        if (thumbprintValue != null && thumbprintValue.Type != JTokenType.Null)
                        {
                            string thumbprintInstance = ((string)thumbprintValue);
                            valueInstance.Thumbprint = thumbprintInstance;
                        }
                        
                        JToken subjectValue = responseDoc["subject"];
                        if (subjectValue != null && subjectValue.Type != JTokenType.Null)
                        {
                            string subjectInstance = ((string)subjectValue);
                            valueInstance.Subject = subjectInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update hostname of an Api Management service.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the UpdateHostname operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateHostnameAsync(string resourceGroupName, string name, ApiServiceUpdateHostnameParameters parameters, CancellationToken cancellationToken)
        {
            ApiManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateHostnameAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.ApiManagement.BeginUpdatingHostnameAsync(resourceGroupName, name, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.ApiManagement.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 60;
                }
                if (client.LongRunningOperationInitialTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationInitialTimeout;
                }
                while ((result.Status != Microsoft.WindowsAzure.OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.ApiManagement.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 60;
                    }
                    if (client.LongRunningOperationRetryTimeout >= 0)
                    {
                        delayInSeconds = client.LongRunningOperationRetryTimeout;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update SKU of an Api Management service.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='name'>
        /// Required. The name of the Api Management service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the UpdateSku operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateSkuAsync(string resourceGroupName, string name, ApiServiceUpdateSkuParameters parameters, CancellationToken cancellationToken)
        {
            ApiManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("name", name);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateSkuAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.ApiManagement.BeginUpdatingSkuAsync(resourceGroupName, name, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.ApiManagement.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 60;
                }
                if (client.LongRunningOperationInitialTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationInitialTimeout;
                }
                while ((result.Status != Microsoft.WindowsAzure.OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.ApiManagement.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 60;
                    }
                    if (client.LongRunningOperationRetryTimeout >= 0)
                    {
                        delayInSeconds = client.LongRunningOperationRetryTimeout;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
    }
}
