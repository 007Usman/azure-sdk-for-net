// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of protection entity operations for the Site Recovery
    /// extension.
    /// </summary>
    internal partial class ProtectionEntityOperations : IServiceOperations<SiteRecoveryManagementClient>, IProtectionEntityOperations
    {
        /// <summary>
        /// Initializes a new instance of the ProtectionEntityOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ProtectionEntityOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Disable Protection for the given protection enity.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Parent Protection Container ID.
        /// </param>
        /// <param name='protectionEntityId'>
        /// Required. Protection entity ID.
        /// </param>
        /// <param name='input'>
        /// Optional. Protection entity ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public async Task<JobResponse> DisableProtectionAsync(string protectionContainerId, string protectionEntityId, DisableProtectionInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            if (protectionEntityId == null)
            {
                throw new ArgumentNullException("protectionEntityId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("protectionEntityId", protectionEntityId);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DisableProtectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerId);
            url = url + "/ProtectionEntities/";
            url = url + Uri.EscapeDataString(protectionEntityId);
            url = url + "/DisableProtection";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (input != null)
                {
                    JObject disableProtectionInputValue = new JObject();
                    requestDoc = disableProtectionInputValue;
                    
                    if (input.ProtectionProfileId != null)
                    {
                        disableProtectionInputValue["protectionProfileId"] = input.ProtectionProfileId;
                    }
                    
                    if (input.ProviderSettings != null)
                    {
                        JObject providerSettingsValue = new JObject();
                        disableProtectionInputValue["ProviderSettings"] = providerSettingsValue;
                        if (input.ProviderSettings is SanDisableProtectionInput)
                        {
                            providerSettingsValue["__type"] = "SanDisableProtectionInput";
                            SanDisableProtectionInput derived = ((SanDisableProtectionInput)input.ProviderSettings);
                            
                            providerSettingsValue["deleteReplicaLuns"] = derived.DeleteReplicaLuns;
                            
                            if (derived.TargetCloudIdForLunDeletion != null)
                            {
                                providerSettingsValue["targetCloudIdForLunDeletion"] = derived.TargetCloudIdForLunDeletion;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Job jobInstance = new Job();
                            result.Job = jobInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JobProperties propertiesInstance = new JobProperties();
                                jobInstance.Properties = propertiesInstance;
                                
                                JToken activityIdValue = propertiesValue["activityId"];
                                if (activityIdValue != null && activityIdValue.Type != JTokenType.Null)
                                {
                                    string activityIdInstance = ((string)activityIdValue);
                                    propertiesInstance.ActivityId = activityIdInstance;
                                }
                                
                                JToken startTimeValue = propertiesValue["startTime"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                    propertiesInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken endTimeValue = propertiesValue["endTime"];
                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                    propertiesInstance.EndTime = endTimeInstance;
                                }
                                
                                JToken displayNameValue = propertiesValue["displayName"];
                                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                {
                                    string displayNameInstance = ((string)displayNameValue);
                                    propertiesInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken targetObjectIdValue = propertiesValue["targetObjectId"];
                                if (targetObjectIdValue != null && targetObjectIdValue.Type != JTokenType.Null)
                                {
                                    string targetObjectIdInstance = ((string)targetObjectIdValue);
                                    propertiesInstance.TargetObjectId = targetObjectIdInstance;
                                }
                                
                                JToken targetObjectTypeValue = propertiesValue["targetObjectType"];
                                if (targetObjectTypeValue != null && targetObjectTypeValue.Type != JTokenType.Null)
                                {
                                    string targetObjectTypeInstance = ((string)targetObjectTypeValue);
                                    propertiesInstance.TargetObjectType = targetObjectTypeInstance;
                                }
                                
                                JToken targetObjectNameValue = propertiesValue["targetObjectName"];
                                if (targetObjectNameValue != null && targetObjectNameValue.Type != JTokenType.Null)
                                {
                                    string targetObjectNameInstance = ((string)targetObjectNameValue);
                                    propertiesInstance.TargetObjectName = targetObjectNameInstance;
                                }
                                
                                JToken allowedActionsArray = propertiesValue["allowedActions"];
                                if (allowedActionsArray != null && allowedActionsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedActionsValue in ((JArray)allowedActionsArray))
                                    {
                                        propertiesInstance.AllowedActions.Add(((string)allowedActionsValue));
                                    }
                                }
                                
                                JToken stateValue = propertiesValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    string stateInstance = ((string)stateValue);
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken stateDescriptionValue = propertiesValue["stateDescription"];
                                if (stateDescriptionValue != null && stateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string stateDescriptionInstance = ((string)stateDescriptionValue);
                                    propertiesInstance.StateDescription = stateDescriptionInstance;
                                }
                                
                                JToken tasksArray = propertiesValue["tasks"];
                                if (tasksArray != null && tasksArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken tasksValue in ((JArray)tasksArray))
                                    {
                                        AsrTask asrTaskInstance = new AsrTask();
                                        propertiesInstance.Tasks.Add(asrTaskInstance);
                                        
                                        JToken startTimeValue2 = tasksValue["startTime"];
                                        if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance2 = ((DateTime)startTimeValue2);
                                            asrTaskInstance.StartTime = startTimeInstance2;
                                        }
                                        
                                        JToken endTimeValue2 = tasksValue["endTime"];
                                        if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance2 = ((DateTime)endTimeValue2);
                                            asrTaskInstance.EndTime = endTimeInstance2;
                                        }
                                        
                                        JToken actionsArray = tasksValue["actions"];
                                        if (actionsArray != null && actionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken actionsValue in ((JArray)actionsArray))
                                            {
                                                asrTaskInstance.Actions.Add(((string)actionsValue));
                                            }
                                        }
                                        
                                        JToken taskTypeValue = tasksValue["taskType"];
                                        if (taskTypeValue != null && taskTypeValue.Type != JTokenType.Null)
                                        {
                                            string taskTypeInstance = ((string)taskTypeValue);
                                            asrTaskInstance.TaskType = taskTypeInstance;
                                        }
                                        
                                        JToken taskNameValue = tasksValue["taskName"];
                                        if (taskNameValue != null && taskNameValue.Type != JTokenType.Null)
                                        {
                                            string taskNameInstance = ((string)taskNameValue);
                                            asrTaskInstance.TaskName = taskNameInstance;
                                        }
                                        
                                        JToken stateValue2 = tasksValue["state"];
                                        if (stateValue2 != null && stateValue2.Type != JTokenType.Null)
                                        {
                                            string stateInstance2 = ((string)stateValue2);
                                            asrTaskInstance.State = stateInstance2;
                                        }
                                        
                                        JToken stateDescriptionValue2 = tasksValue["stateDescription"];
                                        if (stateDescriptionValue2 != null && stateDescriptionValue2.Type != JTokenType.Null)
                                        {
                                            string stateDescriptionInstance2 = ((string)stateDescriptionValue2);
                                            asrTaskInstance.StateDescription = stateDescriptionInstance2;
                                        }
                                        
                                        JToken extendedDetailsValue = tasksValue["extendedDetails"];
                                        if (extendedDetailsValue != null && extendedDetailsValue.Type != JTokenType.Null)
                                        {
                                            string extendedDetailsInstance = ((string)extendedDetailsValue);
                                            asrTaskInstance.ExtendedDetails = extendedDetailsInstance;
                                        }
                                        
                                        JToken idValue = tasksValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            asrTaskInstance.Id = idInstance;
                                        }
                                        
                                        JToken nameValue = tasksValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            asrTaskInstance.Name = nameInstance;
                                        }
                                        
                                        JToken typeValue = tasksValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            asrTaskInstance.Type = typeInstance;
                                        }
                                        
                                        JToken locationValue = tasksValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            asrTaskInstance.Location = locationInstance;
                                        }
                                        
                                        JToken tagsSequenceElement = ((JToken)tasksValue["tags"]);
                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in tagsSequenceElement)
                                            {
                                                string tagsKey = ((string)property.Name);
                                                string tagsValue = ((string)property.Value);
                                                asrTaskInstance.Tags.Add(tagsKey, tagsValue);
                                            }
                                        }
                                    }
                                }
                                
                                JToken errorsArray = propertiesValue["errors"];
                                if (errorsArray != null && errorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken errorsValue in ((JArray)errorsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        propertiesInstance.Errors.Add(errorDetailsInstance);
                                        
                                        JToken serviceErrorDetailsValue = errorsValue["serviceErrorDetails"];
                                        if (serviceErrorDetailsValue != null && serviceErrorDetailsValue.Type != JTokenType.Null)
                                        {
                                            ServiceError serviceErrorDetailsInstance = new ServiceError();
                                            errorDetailsInstance.ServiceErrorDetails = serviceErrorDetailsInstance;
                                            
                                            JToken codeValue = serviceErrorDetailsValue["Code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                serviceErrorDetailsInstance.Code = codeInstance;
                                            }
                                            
                                            JToken messageValue = serviceErrorDetailsValue["Message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                serviceErrorDetailsInstance.Message = messageInstance;
                                            }
                                            
                                            JToken possibleCausesValue = serviceErrorDetailsValue["PossibleCauses"];
                                            if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                            {
                                                string possibleCausesInstance = ((string)possibleCausesValue);
                                                serviceErrorDetailsInstance.PossibleCauses = possibleCausesInstance;
                                            }
                                            
                                            JToken recommendedActionValue = serviceErrorDetailsValue["RecommendedAction"];
                                            if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                            {
                                                string recommendedActionInstance = ((string)recommendedActionValue);
                                                serviceErrorDetailsInstance.RecommendedAction = recommendedActionInstance;
                                            }
                                            
                                            JToken activityIdValue2 = serviceErrorDetailsValue["ActivityId"];
                                            if (activityIdValue2 != null && activityIdValue2.Type != JTokenType.Null)
                                            {
                                                string activityIdInstance2 = ((string)activityIdValue2);
                                                serviceErrorDetailsInstance.ActivityId = activityIdInstance2;
                                            }
                                        }
                                        
                                        JToken providerErrorDetailsValue = errorsValue["providerErrorDetails"];
                                        if (providerErrorDetailsValue != null && providerErrorDetailsValue.Type != JTokenType.Null)
                                        {
                                            ProviderError providerErrorDetailsInstance = new ProviderError();
                                            errorDetailsInstance.ProviderErrorDetails = providerErrorDetailsInstance;
                                            
                                            JToken errorCodeValue = providerErrorDetailsValue["errorCode"];
                                            if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                            {
                                                int errorCodeInstance = ((int)errorCodeValue);
                                                providerErrorDetailsInstance.ErrorCode = errorCodeInstance;
                                            }
                                            
                                            JToken errorMessageValue = providerErrorDetailsValue["errorMessage"];
                                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance = ((string)errorMessageValue);
                                                providerErrorDetailsInstance.ErrorMessage = errorMessageInstance;
                                            }
                                            
                                            JToken errorIdValue = providerErrorDetailsValue["errorId"];
                                            if (errorIdValue != null && errorIdValue.Type != JTokenType.Null)
                                            {
                                                string errorIdInstance = ((string)errorIdValue);
                                                providerErrorDetailsInstance.ErrorId = errorIdInstance;
                                            }
                                            
                                            JToken workflowIdValue = providerErrorDetailsValue["workflowId"];
                                            if (workflowIdValue != null && workflowIdValue.Type != JTokenType.Null)
                                            {
                                                string workflowIdInstance = ((string)workflowIdValue);
                                                providerErrorDetailsInstance.WorkflowId = workflowIdInstance;
                                            }
                                            
                                            JToken creationTimeUtcValue = providerErrorDetailsValue["creationTimeUtc"];
                                            if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                            {
                                                DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                                providerErrorDetailsInstance.CreationTimeUtc = creationTimeUtcInstance;
                                            }
                                            
                                            JToken errorLevelValue = providerErrorDetailsValue["errorLevel"];
                                            if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                            {
                                                string errorLevelInstance = ((string)errorLevelValue);
                                                providerErrorDetailsInstance.ErrorLevel = errorLevelInstance;
                                            }
                                            
                                            JToken affectedObjectsSequenceElement = ((JToken)providerErrorDetailsValue["affectedObjects"]);
                                            if (affectedObjectsSequenceElement != null && affectedObjectsSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property2 in affectedObjectsSequenceElement)
                                                {
                                                    string affectedObjectsKey = ((string)property2.Name);
                                                    string affectedObjectsValue = ((string)property2.Value);
                                                    providerErrorDetailsInstance.AffectedObjects.Add(affectedObjectsKey, affectedObjectsValue);
                                                }
                                            }
                                        }
                                        
                                        JToken taskIdValue = errorsValue["taskId"];
                                        if (taskIdValue != null && taskIdValue.Type != JTokenType.Null)
                                        {
                                            string taskIdInstance = ((string)taskIdValue);
                                            errorDetailsInstance.TaskId = taskIdInstance;
                                        }
                                    }
                                }
                                
                                JToken idValue2 = propertiesValue["id"];
                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                {
                                    string idInstance2 = ((string)idValue2);
                                    propertiesInstance.Id = idInstance2;
                                }
                                
                                JToken nameValue2 = propertiesValue["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    propertiesInstance.Name = nameInstance2;
                                }
                                
                                JToken typeValue2 = propertiesValue["type"];
                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                {
                                    string typeInstance2 = ((string)typeValue2);
                                    propertiesInstance.Type = typeInstance2;
                                }
                                
                                JToken locationValue2 = propertiesValue["location"];
                                if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                {
                                    string locationInstance2 = ((string)locationValue2);
                                    propertiesInstance.Location = locationInstance2;
                                }
                                
                                JToken tagsSequenceElement2 = ((JToken)propertiesValue["tags"]);
                                if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property3 in tagsSequenceElement2)
                                    {
                                        string tagsKey2 = ((string)property3.Name);
                                        string tagsValue2 = ((string)property3.Value);
                                        propertiesInstance.Tags.Add(tagsKey2, tagsValue2);
                                    }
                                }
                            }
                            
                            JToken idValue3 = responseDoc["id"];
                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                            {
                                string idInstance3 = ((string)idValue3);
                                jobInstance.Id = idInstance3;
                            }
                            
                            JToken nameValue3 = responseDoc["name"];
                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                            {
                                string nameInstance3 = ((string)nameValue3);
                                jobInstance.Name = nameInstance3;
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                jobInstance.Type = typeInstance3;
                            }
                            
                            JToken locationValue3 = responseDoc["location"];
                            if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                            {
                                string locationInstance3 = ((string)locationValue3);
                                jobInstance.Location = locationInstance3;
                            }
                            
                            JToken tagsSequenceElement3 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                            {
                                foreach (JProperty property4 in tagsSequenceElement3)
                                {
                                    string tagsKey3 = ((string)property4.Name);
                                    string tagsValue3 = ((string)property4.Value);
                                    jobInstance.Tags.Add(tagsKey3, tagsValue3);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Enable Protection for the given protection entity.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Parent Protection Container ID.
        /// </param>
        /// <param name='protectionEntityId'>
        /// Required. Protection entity ID.
        /// </param>
        /// <param name='input'>
        /// Optional. Protection entity ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public async Task<JobResponse> EnableProtectionAsync(string protectionContainerId, string protectionEntityId, EnableProtectionInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            if (protectionEntityId == null)
            {
                throw new ArgumentNullException("protectionEntityId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("protectionEntityId", protectionEntityId);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "EnableProtectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerId);
            url = url + "/ProtectionEntities/";
            url = url + Uri.EscapeDataString(protectionEntityId);
            url = url + "/EnableProtection";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (input != null)
                {
                    JObject enableProtectionInputValue = new JObject();
                    requestDoc = enableProtectionInputValue;
                    
                    if (input.ProtectionProfileId != null)
                    {
                        enableProtectionInputValue["protectionProfileId"] = input.ProtectionProfileId;
                    }
                    
                    if (input.ProviderSettings != null)
                    {
                        JObject providerSettingsValue = new JObject();
                        enableProtectionInputValue["ProviderSettings"] = providerSettingsValue;
                        if (input.ProviderSettings is AzureEnableProtectionInput)
                        {
                            providerSettingsValue["__type"] = "AzureEnableProtectionInput";
                            AzureEnableProtectionInput derived = ((AzureEnableProtectionInput)input.ProviderSettings);
                            
                            if (derived.HvHostVmId != null)
                            {
                                providerSettingsValue["HvHostVmId"] = derived.HvHostVmId;
                            }
                            
                            if (derived.VmName != null)
                            {
                                providerSettingsValue["vmName"] = derived.VmName;
                            }
                            
                            if (derived.OSType != null)
                            {
                                providerSettingsValue["osType"] = derived.OSType;
                            }
                            
                            if (derived.VHDId != null)
                            {
                                providerSettingsValue["vHDId"] = derived.VHDId;
                            }
                        }
                        if (input.ProviderSettings is SanEnableProtectionInput)
                        {
                            providerSettingsValue["__type"] = "SanEnableProtectionInput";
                            SanEnableProtectionInput derived2 = ((SanEnableProtectionInput)input.ProviderSettings);
                            
                            if (derived2.FabricId != null)
                            {
                                providerSettingsValue["fabricId"] = derived2.FabricId;
                            }
                            
                            if (derived2.CloudId != null)
                            {
                                providerSettingsValue["cloudId"] = derived2.CloudId;
                            }
                            
                            if (derived2.FabricReplicationGroupId != null)
                            {
                                providerSettingsValue["fabricReplicationGroupId"] = derived2.FabricReplicationGroupId;
                            }
                            
                            if (derived2.ReplicationType != null)
                            {
                                providerSettingsValue["replicationType"] = derived2.ReplicationType;
                            }
                            
                            providerSettingsValue["recoveryPointObjective"] = derived2.RecoveryPointObjective;
                            
                            if (derived2.RemoteArrayId != null)
                            {
                                providerSettingsValue["remoteArrayId"] = derived2.RemoteArrayId;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Job jobInstance = new Job();
                            result.Job = jobInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JobProperties propertiesInstance = new JobProperties();
                                jobInstance.Properties = propertiesInstance;
                                
                                JToken activityIdValue = propertiesValue["activityId"];
                                if (activityIdValue != null && activityIdValue.Type != JTokenType.Null)
                                {
                                    string activityIdInstance = ((string)activityIdValue);
                                    propertiesInstance.ActivityId = activityIdInstance;
                                }
                                
                                JToken startTimeValue = propertiesValue["startTime"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                    propertiesInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken endTimeValue = propertiesValue["endTime"];
                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                    propertiesInstance.EndTime = endTimeInstance;
                                }
                                
                                JToken displayNameValue = propertiesValue["displayName"];
                                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                {
                                    string displayNameInstance = ((string)displayNameValue);
                                    propertiesInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken targetObjectIdValue = propertiesValue["targetObjectId"];
                                if (targetObjectIdValue != null && targetObjectIdValue.Type != JTokenType.Null)
                                {
                                    string targetObjectIdInstance = ((string)targetObjectIdValue);
                                    propertiesInstance.TargetObjectId = targetObjectIdInstance;
                                }
                                
                                JToken targetObjectTypeValue = propertiesValue["targetObjectType"];
                                if (targetObjectTypeValue != null && targetObjectTypeValue.Type != JTokenType.Null)
                                {
                                    string targetObjectTypeInstance = ((string)targetObjectTypeValue);
                                    propertiesInstance.TargetObjectType = targetObjectTypeInstance;
                                }
                                
                                JToken targetObjectNameValue = propertiesValue["targetObjectName"];
                                if (targetObjectNameValue != null && targetObjectNameValue.Type != JTokenType.Null)
                                {
                                    string targetObjectNameInstance = ((string)targetObjectNameValue);
                                    propertiesInstance.TargetObjectName = targetObjectNameInstance;
                                }
                                
                                JToken allowedActionsArray = propertiesValue["allowedActions"];
                                if (allowedActionsArray != null && allowedActionsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedActionsValue in ((JArray)allowedActionsArray))
                                    {
                                        propertiesInstance.AllowedActions.Add(((string)allowedActionsValue));
                                    }
                                }
                                
                                JToken stateValue = propertiesValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    string stateInstance = ((string)stateValue);
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken stateDescriptionValue = propertiesValue["stateDescription"];
                                if (stateDescriptionValue != null && stateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string stateDescriptionInstance = ((string)stateDescriptionValue);
                                    propertiesInstance.StateDescription = stateDescriptionInstance;
                                }
                                
                                JToken tasksArray = propertiesValue["tasks"];
                                if (tasksArray != null && tasksArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken tasksValue in ((JArray)tasksArray))
                                    {
                                        AsrTask asrTaskInstance = new AsrTask();
                                        propertiesInstance.Tasks.Add(asrTaskInstance);
                                        
                                        JToken startTimeValue2 = tasksValue["startTime"];
                                        if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance2 = ((DateTime)startTimeValue2);
                                            asrTaskInstance.StartTime = startTimeInstance2;
                                        }
                                        
                                        JToken endTimeValue2 = tasksValue["endTime"];
                                        if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance2 = ((DateTime)endTimeValue2);
                                            asrTaskInstance.EndTime = endTimeInstance2;
                                        }
                                        
                                        JToken actionsArray = tasksValue["actions"];
                                        if (actionsArray != null && actionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken actionsValue in ((JArray)actionsArray))
                                            {
                                                asrTaskInstance.Actions.Add(((string)actionsValue));
                                            }
                                        }
                                        
                                        JToken taskTypeValue = tasksValue["taskType"];
                                        if (taskTypeValue != null && taskTypeValue.Type != JTokenType.Null)
                                        {
                                            string taskTypeInstance = ((string)taskTypeValue);
                                            asrTaskInstance.TaskType = taskTypeInstance;
                                        }
                                        
                                        JToken taskNameValue = tasksValue["taskName"];
                                        if (taskNameValue != null && taskNameValue.Type != JTokenType.Null)
                                        {
                                            string taskNameInstance = ((string)taskNameValue);
                                            asrTaskInstance.TaskName = taskNameInstance;
                                        }
                                        
                                        JToken stateValue2 = tasksValue["state"];
                                        if (stateValue2 != null && stateValue2.Type != JTokenType.Null)
                                        {
                                            string stateInstance2 = ((string)stateValue2);
                                            asrTaskInstance.State = stateInstance2;
                                        }
                                        
                                        JToken stateDescriptionValue2 = tasksValue["stateDescription"];
                                        if (stateDescriptionValue2 != null && stateDescriptionValue2.Type != JTokenType.Null)
                                        {
                                            string stateDescriptionInstance2 = ((string)stateDescriptionValue2);
                                            asrTaskInstance.StateDescription = stateDescriptionInstance2;
                                        }
                                        
                                        JToken extendedDetailsValue = tasksValue["extendedDetails"];
                                        if (extendedDetailsValue != null && extendedDetailsValue.Type != JTokenType.Null)
                                        {
                                            string extendedDetailsInstance = ((string)extendedDetailsValue);
                                            asrTaskInstance.ExtendedDetails = extendedDetailsInstance;
                                        }
                                        
                                        JToken idValue = tasksValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            asrTaskInstance.Id = idInstance;
                                        }
                                        
                                        JToken nameValue = tasksValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            asrTaskInstance.Name = nameInstance;
                                        }
                                        
                                        JToken typeValue = tasksValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            asrTaskInstance.Type = typeInstance;
                                        }
                                        
                                        JToken locationValue = tasksValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            asrTaskInstance.Location = locationInstance;
                                        }
                                        
                                        JToken tagsSequenceElement = ((JToken)tasksValue["tags"]);
                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in tagsSequenceElement)
                                            {
                                                string tagsKey = ((string)property.Name);
                                                string tagsValue = ((string)property.Value);
                                                asrTaskInstance.Tags.Add(tagsKey, tagsValue);
                                            }
                                        }
                                    }
                                }
                                
                                JToken errorsArray = propertiesValue["errors"];
                                if (errorsArray != null && errorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken errorsValue in ((JArray)errorsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        propertiesInstance.Errors.Add(errorDetailsInstance);
                                        
                                        JToken serviceErrorDetailsValue = errorsValue["serviceErrorDetails"];
                                        if (serviceErrorDetailsValue != null && serviceErrorDetailsValue.Type != JTokenType.Null)
                                        {
                                            ServiceError serviceErrorDetailsInstance = new ServiceError();
                                            errorDetailsInstance.ServiceErrorDetails = serviceErrorDetailsInstance;
                                            
                                            JToken codeValue = serviceErrorDetailsValue["Code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                serviceErrorDetailsInstance.Code = codeInstance;
                                            }
                                            
                                            JToken messageValue = serviceErrorDetailsValue["Message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                serviceErrorDetailsInstance.Message = messageInstance;
                                            }
                                            
                                            JToken possibleCausesValue = serviceErrorDetailsValue["PossibleCauses"];
                                            if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                            {
                                                string possibleCausesInstance = ((string)possibleCausesValue);
                                                serviceErrorDetailsInstance.PossibleCauses = possibleCausesInstance;
                                            }
                                            
                                            JToken recommendedActionValue = serviceErrorDetailsValue["RecommendedAction"];
                                            if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                            {
                                                string recommendedActionInstance = ((string)recommendedActionValue);
                                                serviceErrorDetailsInstance.RecommendedAction = recommendedActionInstance;
                                            }
                                            
                                            JToken activityIdValue2 = serviceErrorDetailsValue["ActivityId"];
                                            if (activityIdValue2 != null && activityIdValue2.Type != JTokenType.Null)
                                            {
                                                string activityIdInstance2 = ((string)activityIdValue2);
                                                serviceErrorDetailsInstance.ActivityId = activityIdInstance2;
                                            }
                                        }
                                        
                                        JToken providerErrorDetailsValue = errorsValue["providerErrorDetails"];
                                        if (providerErrorDetailsValue != null && providerErrorDetailsValue.Type != JTokenType.Null)
                                        {
                                            ProviderError providerErrorDetailsInstance = new ProviderError();
                                            errorDetailsInstance.ProviderErrorDetails = providerErrorDetailsInstance;
                                            
                                            JToken errorCodeValue = providerErrorDetailsValue["errorCode"];
                                            if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                            {
                                                int errorCodeInstance = ((int)errorCodeValue);
                                                providerErrorDetailsInstance.ErrorCode = errorCodeInstance;
                                            }
                                            
                                            JToken errorMessageValue = providerErrorDetailsValue["errorMessage"];
                                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance = ((string)errorMessageValue);
                                                providerErrorDetailsInstance.ErrorMessage = errorMessageInstance;
                                            }
                                            
                                            JToken errorIdValue = providerErrorDetailsValue["errorId"];
                                            if (errorIdValue != null && errorIdValue.Type != JTokenType.Null)
                                            {
                                                string errorIdInstance = ((string)errorIdValue);
                                                providerErrorDetailsInstance.ErrorId = errorIdInstance;
                                            }
                                            
                                            JToken workflowIdValue = providerErrorDetailsValue["workflowId"];
                                            if (workflowIdValue != null && workflowIdValue.Type != JTokenType.Null)
                                            {
                                                string workflowIdInstance = ((string)workflowIdValue);
                                                providerErrorDetailsInstance.WorkflowId = workflowIdInstance;
                                            }
                                            
                                            JToken creationTimeUtcValue = providerErrorDetailsValue["creationTimeUtc"];
                                            if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                            {
                                                DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                                providerErrorDetailsInstance.CreationTimeUtc = creationTimeUtcInstance;
                                            }
                                            
                                            JToken errorLevelValue = providerErrorDetailsValue["errorLevel"];
                                            if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                            {
                                                string errorLevelInstance = ((string)errorLevelValue);
                                                providerErrorDetailsInstance.ErrorLevel = errorLevelInstance;
                                            }
                                            
                                            JToken affectedObjectsSequenceElement = ((JToken)providerErrorDetailsValue["affectedObjects"]);
                                            if (affectedObjectsSequenceElement != null && affectedObjectsSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property2 in affectedObjectsSequenceElement)
                                                {
                                                    string affectedObjectsKey = ((string)property2.Name);
                                                    string affectedObjectsValue = ((string)property2.Value);
                                                    providerErrorDetailsInstance.AffectedObjects.Add(affectedObjectsKey, affectedObjectsValue);
                                                }
                                            }
                                        }
                                        
                                        JToken taskIdValue = errorsValue["taskId"];
                                        if (taskIdValue != null && taskIdValue.Type != JTokenType.Null)
                                        {
                                            string taskIdInstance = ((string)taskIdValue);
                                            errorDetailsInstance.TaskId = taskIdInstance;
                                        }
                                    }
                                }
                                
                                JToken idValue2 = propertiesValue["id"];
                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                {
                                    string idInstance2 = ((string)idValue2);
                                    propertiesInstance.Id = idInstance2;
                                }
                                
                                JToken nameValue2 = propertiesValue["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    propertiesInstance.Name = nameInstance2;
                                }
                                
                                JToken typeValue2 = propertiesValue["type"];
                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                {
                                    string typeInstance2 = ((string)typeValue2);
                                    propertiesInstance.Type = typeInstance2;
                                }
                                
                                JToken locationValue2 = propertiesValue["location"];
                                if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                {
                                    string locationInstance2 = ((string)locationValue2);
                                    propertiesInstance.Location = locationInstance2;
                                }
                                
                                JToken tagsSequenceElement2 = ((JToken)propertiesValue["tags"]);
                                if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property3 in tagsSequenceElement2)
                                    {
                                        string tagsKey2 = ((string)property3.Name);
                                        string tagsValue2 = ((string)property3.Value);
                                        propertiesInstance.Tags.Add(tagsKey2, tagsValue2);
                                    }
                                }
                            }
                            
                            JToken idValue3 = responseDoc["id"];
                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                            {
                                string idInstance3 = ((string)idValue3);
                                jobInstance.Id = idInstance3;
                            }
                            
                            JToken nameValue3 = responseDoc["name"];
                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                            {
                                string nameInstance3 = ((string)nameValue3);
                                jobInstance.Name = nameInstance3;
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                jobInstance.Type = typeInstance3;
                            }
                            
                            JToken locationValue3 = responseDoc["location"];
                            if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                            {
                                string locationInstance3 = ((string)locationValue3);
                                jobInstance.Location = locationInstance3;
                            }
                            
                            JToken tagsSequenceElement3 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                            {
                                foreach (JProperty property4 in tagsSequenceElement3)
                                {
                                    string tagsKey3 = ((string)property4.Name);
                                    string tagsValue3 = ((string)property4.Value);
                                    jobInstance.Tags.Add(tagsKey3, tagsValue3);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the protection entity object by Id.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Parent Protection Container ID.
        /// </param>
        /// <param name='protectionEntityId'>
        /// Required. Protection entity ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Vm object.
        /// </returns>
        public async Task<ProtectionEntityResponse> GetAsync(string protectionContainerId, string protectionEntityId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            if (protectionEntityId == null)
            {
                throw new ArgumentNullException("protectionEntityId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("protectionEntityId", protectionEntityId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerId);
            url = url + "/ProtectionEntities/";
            url = url + Uri.EscapeDataString(protectionEntityId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionEntityResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionEntityResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionEntity protectionEntityInstance = new ProtectionEntity();
                            result.ProtectionEntity = protectionEntityInstance;
                            
                            JToken friendlyNameValue = responseDoc["friendlyName"];
                            if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                            {
                                string friendlyNameInstance = ((string)friendlyNameValue);
                                protectionEntityInstance.FriendlyName = friendlyNameInstance;
                            }
                            
                            JToken replicationProviderSettingsValue = responseDoc["replicationProviderSettings"];
                            if (replicationProviderSettingsValue != null && replicationProviderSettingsValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)replicationProviderSettingsValue["__type"]);
                                if (typeName == "OnPremProtectionEntityProviderSettings")
                                {
                                    OnPremProtectionEntityProviderSettings onPremProtectionEntityProviderSettingsInstance = new OnPremProtectionEntityProviderSettings();
                                    
                                    JToken vmDiskDetailsValue = replicationProviderSettingsValue["vmDiskDetails"];
                                    if (vmDiskDetailsValue != null && vmDiskDetailsValue.Type != JTokenType.Null)
                                    {
                                        AzureVmDiskDetails vmDiskDetailsInstance = new AzureVmDiskDetails();
                                        onPremProtectionEntityProviderSettingsInstance.VMDiskDetails = vmDiskDetailsInstance;
                                        
                                        JToken osTypeValue = vmDiskDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vmDiskDetailsInstance.OsType = osTypeInstance;
                                        }
                                        
                                        JToken disksArray = vmDiskDetailsValue;
                                        if (disksArray != null && disksArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken disksValue in ((JArray)disksArray))
                                            {
                                                VirtualHardDisk virtualHardDiskInstance = new VirtualHardDisk();
                                                vmDiskDetailsInstance.Disks.Add(virtualHardDiskInstance);
                                                
                                                JToken idValue = disksValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    virtualHardDiskInstance.Id = idInstance;
                                                }
                                                
                                                JToken nameValue = disksValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    virtualHardDiskInstance.Name = nameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken osDiskValue = vmDiskDetailsValue["osDisk"];
                                        if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                        {
                                            string osDiskInstance = ((string)osDiskValue);
                                            vmDiskDetailsInstance.OsDisk = osDiskInstance;
                                        }
                                        
                                        JToken vHDIdValue = vmDiskDetailsValue["vHDId"];
                                        if (vHDIdValue != null && vHDIdValue.Type != JTokenType.Null)
                                        {
                                            string vHDIdInstance = ((string)vHDIdValue);
                                            vmDiskDetailsInstance.VHDId = vHDIdInstance;
                                        }
                                        
                                        JToken maxSizeMBValue = vmDiskDetailsValue["maxSizeMB"];
                                        if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                        {
                                            ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                            vmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                        }
                                    }
                                    protectionEntityInstance.ReplicationProviderSettings = onPremProtectionEntityProviderSettingsInstance;
                                }
                                if (typeName == "AzureProtectionEntityProviderSettings")
                                {
                                    AzureProtectionEntityProviderSettings azureProtectionEntityProviderSettingsInstance = new AzureProtectionEntityProviderSettings();
                                    
                                    JToken vmDiskDetailsValue2 = replicationProviderSettingsValue["vmDiskDetails"];
                                    if (vmDiskDetailsValue2 != null && vmDiskDetailsValue2.Type != JTokenType.Null)
                                    {
                                        AzureVmDiskDetails vmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                        azureProtectionEntityProviderSettingsInstance.VMDiskDetails = vmDiskDetailsInstance2;
                                        
                                        JToken osTypeValue2 = vmDiskDetailsValue2["osType"];
                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance2 = ((string)osTypeValue2);
                                            vmDiskDetailsInstance2.OsType = osTypeInstance2;
                                        }
                                        
                                        JToken disksArray2 = vmDiskDetailsValue2;
                                        if (disksArray2 != null && disksArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken disksValue2 in ((JArray)disksArray2))
                                            {
                                                VirtualHardDisk virtualHardDiskInstance2 = new VirtualHardDisk();
                                                vmDiskDetailsInstance2.Disks.Add(virtualHardDiskInstance2);
                                                
                                                JToken idValue2 = disksValue2["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    virtualHardDiskInstance2.Id = idInstance2;
                                                }
                                                
                                                JToken nameValue2 = disksValue2["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    virtualHardDiskInstance2.Name = nameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken osDiskValue2 = vmDiskDetailsValue2["osDisk"];
                                        if (osDiskValue2 != null && osDiskValue2.Type != JTokenType.Null)
                                        {
                                            string osDiskInstance2 = ((string)osDiskValue2);
                                            vmDiskDetailsInstance2.OsDisk = osDiskInstance2;
                                        }
                                        
                                        JToken vHDIdValue2 = vmDiskDetailsValue2["vHDId"];
                                        if (vHDIdValue2 != null && vHDIdValue2.Type != JTokenType.Null)
                                        {
                                            string vHDIdInstance2 = ((string)vHDIdValue2);
                                            vmDiskDetailsInstance2.VHDId = vHDIdInstance2;
                                        }
                                        
                                        JToken maxSizeMBValue2 = vmDiskDetailsValue2["maxSizeMB"];
                                        if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                        {
                                            ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                            vmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                        }
                                    }
                                    
                                    JToken vmPropertiesValue = replicationProviderSettingsValue["vmProperties"];
                                    if (vmPropertiesValue != null && vmPropertiesValue.Type != JTokenType.Null)
                                    {
                                        VMProperties vmPropertiesInstance = new VMProperties();
                                        azureProtectionEntityProviderSettingsInstance.VMProperties = vmPropertiesInstance;
                                        
                                        JToken recoveryAzureVMNameValue = vmPropertiesValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            vmPropertiesInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = vmPropertiesValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            vmPropertiesInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = vmPropertiesValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            vmPropertiesInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken vmNicsArray = vmPropertiesValue;
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                vmPropertiesInstance.VMNics.Add(vMNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["NicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken vMSubnetNameValue = vmNicsValue["VMSubnetName"];
                                                if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                    vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                }
                                                
                                                JToken vMNetworkNameValue = vmNicsValue["VMNetworkName"];
                                                if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                {
                                                    string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                    vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                }
                                                
                                                JToken recoveryVMNetworkIdValue = vmNicsValue["RecoveryVMNetworkId"];
                                                if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                    vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                }
                                                
                                                JToken recoveryVMSubnetNameValue = vmNicsValue["RecoveryVMSubnetName"];
                                                if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                    vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                }
                                                
                                                JToken replicaNicStaticIPAddressValue = vmNicsValue["ReplicaNicStaticIPAddress"];
                                                if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                    vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                }
                                            }
                                        }
                                    }
                                    protectionEntityInstance.ReplicationProviderSettings = azureProtectionEntityProviderSettingsInstance;
                                }
                            }
                            
                            JToken fabricObjectIdValue = responseDoc["fabricObjectId"];
                            if (fabricObjectIdValue != null && fabricObjectIdValue.Type != JTokenType.Null)
                            {
                                string fabricObjectIdInstance = ((string)fabricObjectIdValue);
                                protectionEntityInstance.FabricObjectId = fabricObjectIdInstance;
                            }
                            
                            JToken serverIdValue = responseDoc["serverId"];
                            if (serverIdValue != null && serverIdValue.Type != JTokenType.Null)
                            {
                                string serverIdInstance = ((string)serverIdValue);
                                protectionEntityInstance.ServerId = serverIdInstance;
                            }
                            
                            JToken protectionContainerIdValue = responseDoc["protectionContainerId"];
                            if (protectionContainerIdValue != null && protectionContainerIdValue.Type != JTokenType.Null)
                            {
                                string protectionContainerIdInstance = ((string)protectionContainerIdValue);
                                protectionEntityInstance.ProtectionContainerId = protectionContainerIdInstance;
                            }
                            
                            JToken protectedValue = responseDoc["protected"];
                            if (protectedValue != null && protectedValue.Type != JTokenType.Null)
                            {
                                bool protectedInstance = ((bool)protectedValue);
                                protectionEntityInstance.Protected = protectedInstance;
                            }
                            
                            JToken protectionStateDescriptionValue = responseDoc["protectionStateDescription"];
                            if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                            {
                                string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                protectionEntityInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                            }
                            
                            JToken activeLocationValue = responseDoc["activeLocation"];
                            if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                            {
                                string activeLocationInstance = ((string)activeLocationValue);
                                protectionEntityInstance.ActiveLocation = activeLocationInstance;
                            }
                            
                            JToken testFailoverStateDescriptionValue = responseDoc["testFailoverStateDescription"];
                            if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                            {
                                string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                protectionEntityInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                            }
                            
                            JToken canFailoverValue = responseDoc["canFailover"];
                            if (canFailoverValue != null && canFailoverValue.Type != JTokenType.Null)
                            {
                                bool canFailoverInstance = ((bool)canFailoverValue);
                                protectionEntityInstance.CanFailover = canFailoverInstance;
                            }
                            
                            JToken canReverseReplicateValue = responseDoc["canReverseReplicate"];
                            if (canReverseReplicateValue != null && canReverseReplicateValue.Type != JTokenType.Null)
                            {
                                bool canReverseReplicateInstance = ((bool)canReverseReplicateValue);
                                protectionEntityInstance.CanReverseReplicate = canReverseReplicateInstance;
                            }
                            
                            JToken canCommitValue = responseDoc["canCommit"];
                            if (canCommitValue != null && canCommitValue.Type != JTokenType.Null)
                            {
                                bool canCommitInstance = ((bool)canCommitValue);
                                protectionEntityInstance.CanCommit = canCommitInstance;
                            }
                            
                            JToken replicationHealthValue = responseDoc["replicationHealth"];
                            if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                            {
                                string replicationHealthInstance = ((string)replicationHealthValue);
                                protectionEntityInstance.ReplicationHealth = replicationHealthInstance;
                            }
                            
                            JToken replicationProviderValue = responseDoc["replicationProvider"];
                            if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                            {
                                string replicationProviderInstance = ((string)replicationProviderValue);
                                protectionEntityInstance.ReplicationProvider = replicationProviderInstance;
                            }
                            
                            JToken protectionProfileValue = responseDoc["protectionProfile"];
                            if (protectionProfileValue != null && protectionProfileValue.Type != JTokenType.Null)
                            {
                                ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                                protectionEntityInstance.ProtectionProfile = protectionProfileInstance;
                                
                                JToken propertiesValue = protectionProfileValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    ProtectionProfileProperties propertiesInstance = new ProtectionProfileProperties();
                                    protectionProfileInstance.CustomData = propertiesInstance;
                                    
                                    JToken friendlyNameValue2 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                        propertiesInstance.FriendlyName = friendlyNameInstance2;
                                    }
                                    
                                    JToken protectedEntityCountValue = propertiesValue["protectedEntityCount"];
                                    if (protectedEntityCountValue != null && protectedEntityCountValue.Type != JTokenType.Null)
                                    {
                                        int protectedEntityCountInstance = ((int)protectedEntityCountValue);
                                        propertiesInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                    }
                                    
                                    JToken replicationProviderValue2 = propertiesValue["replicationProvider"];
                                    if (replicationProviderValue2 != null && replicationProviderValue2.Type != JTokenType.Null)
                                    {
                                        string replicationProviderInstance2 = ((string)replicationProviderValue2);
                                        propertiesInstance.ReplicationProvider = replicationProviderInstance2;
                                    }
                                    
                                    JToken replicationProviderSettingValue = propertiesValue["replicationProviderSetting"];
                                    if (replicationProviderSettingValue != null && replicationProviderSettingValue.Type != JTokenType.Null)
                                    {
                                        string replicationProviderSettingInstance = ((string)replicationProviderSettingValue);
                                        propertiesInstance.ReplicationProviderSetting = replicationProviderSettingInstance;
                                    }
                                    
                                    JToken canDissociateValue = propertiesValue["canDissociate"];
                                    if (canDissociateValue != null && canDissociateValue.Type != JTokenType.Null)
                                    {
                                        bool canDissociateInstance = ((bool)canDissociateValue);
                                        propertiesInstance.CanDissociate = canDissociateInstance;
                                    }
                                    
                                    JToken associationDetailArray = propertiesValue["associationDetail"];
                                    if (associationDetailArray != null && associationDetailArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken associationDetailValue in ((JArray)associationDetailArray))
                                        {
                                            ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                            propertiesInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                            
                                            JToken primaryProtectionContainerIdValue = associationDetailValue["primaryProtectionContainerId"];
                                            if (primaryProtectionContainerIdValue != null && primaryProtectionContainerIdValue.Type != JTokenType.Null)
                                            {
                                                string primaryProtectionContainerIdInstance = ((string)primaryProtectionContainerIdValue);
                                                protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                            }
                                            
                                            JToken recoveryProtectionContainerIdValue = associationDetailValue["recoveryProtectionContainerId"];
                                            if (recoveryProtectionContainerIdValue != null && recoveryProtectionContainerIdValue.Type != JTokenType.Null)
                                            {
                                                string recoveryProtectionContainerIdInstance = ((string)recoveryProtectionContainerIdValue);
                                                protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                            }
                                            
                                            JToken associationStatusValue = associationDetailValue["associationStatus"];
                                            if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                            {
                                                string associationStatusInstance = ((string)associationStatusValue);
                                                protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance;
                                            }
                                        }
                                    }
                                }
                                
                                JToken idValue3 = protectionProfileValue["id"];
                                if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                {
                                    string idInstance3 = ((string)idValue3);
                                    protectionProfileInstance.Id = idInstance3;
                                }
                                
                                JToken nameValue3 = protectionProfileValue["name"];
                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                {
                                    string nameInstance3 = ((string)nameValue3);
                                    protectionProfileInstance.Name = nameInstance3;
                                }
                                
                                JToken typeValue = protectionProfileValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    protectionProfileInstance.Type = typeInstance;
                                }
                                
                                JToken locationValue = protectionProfileValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    protectionProfileInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)protectionProfileValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        protectionProfileInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                            }
                            
                            JToken idValue4 = responseDoc["id"];
                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                            {
                                string idInstance4 = ((string)idValue4);
                                protectionEntityInstance.Id = idInstance4;
                            }
                            
                            JToken nameValue4 = responseDoc["name"];
                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                            {
                                string nameInstance4 = ((string)nameValue4);
                                protectionEntityInstance.Name = nameInstance4;
                            }
                            
                            JToken typeValue2 = responseDoc["type"];
                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                            {
                                string typeInstance2 = ((string)typeValue2);
                                protectionEntityInstance.Type = typeInstance2;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                protectionEntityInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property2.Name);
                                    string tagsValue2 = ((string)property2.Value);
                                    protectionEntityInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all protection entities.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Parent Protection Container ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list Vm operation.
        /// </returns>
        public async Task<ProtectionEntityListResponse> ListAsync(string protectionContainerId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/protectioncontainers/";
            url = url + Uri.EscapeDataString(protectionContainerId);
            url = url + "/ProtectionEntities";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionEntityListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionEntityListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ProtectionEntity protectionEntityInstance = new ProtectionEntity();
                                    result.ProtectionEntities.Add(protectionEntityInstance);
                                    
                                    JToken friendlyNameValue = valueValue["friendlyName"];
                                    if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance = ((string)friendlyNameValue);
                                        protectionEntityInstance.FriendlyName = friendlyNameInstance;
                                    }
                                    
                                    JToken replicationProviderSettingsValue = valueValue["replicationProviderSettings"];
                                    if (replicationProviderSettingsValue != null && replicationProviderSettingsValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)replicationProviderSettingsValue["__type"]);
                                        if (typeName == "OnPremProtectionEntityProviderSettings")
                                        {
                                            OnPremProtectionEntityProviderSettings onPremProtectionEntityProviderSettingsInstance = new OnPremProtectionEntityProviderSettings();
                                            
                                            JToken vmDiskDetailsValue = replicationProviderSettingsValue["vmDiskDetails"];
                                            if (vmDiskDetailsValue != null && vmDiskDetailsValue.Type != JTokenType.Null)
                                            {
                                                AzureVmDiskDetails vmDiskDetailsInstance = new AzureVmDiskDetails();
                                                onPremProtectionEntityProviderSettingsInstance.VMDiskDetails = vmDiskDetailsInstance;
                                                
                                                JToken osTypeValue = vmDiskDetailsValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    vmDiskDetailsInstance.OsType = osTypeInstance;
                                                }
                                                
                                                JToken disksArray = vmDiskDetailsValue;
                                                if (disksArray != null && disksArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken disksValue in ((JArray)disksArray))
                                                    {
                                                        VirtualHardDisk virtualHardDiskInstance = new VirtualHardDisk();
                                                        vmDiskDetailsInstance.Disks.Add(virtualHardDiskInstance);
                                                        
                                                        JToken idValue = disksValue["id"];
                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                        {
                                                            string idInstance = ((string)idValue);
                                                            virtualHardDiskInstance.Id = idInstance;
                                                        }
                                                        
                                                        JToken nameValue = disksValue["name"];
                                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance = ((string)nameValue);
                                                            virtualHardDiskInstance.Name = nameInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken osDiskValue = vmDiskDetailsValue["osDisk"];
                                                if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                                {
                                                    string osDiskInstance = ((string)osDiskValue);
                                                    vmDiskDetailsInstance.OsDisk = osDiskInstance;
                                                }
                                                
                                                JToken vHDIdValue = vmDiskDetailsValue["vHDId"];
                                                if (vHDIdValue != null && vHDIdValue.Type != JTokenType.Null)
                                                {
                                                    string vHDIdInstance = ((string)vHDIdValue);
                                                    vmDiskDetailsInstance.VHDId = vHDIdInstance;
                                                }
                                                
                                                JToken maxSizeMBValue = vmDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    vmDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                            }
                                            protectionEntityInstance.ReplicationProviderSettings = onPremProtectionEntityProviderSettingsInstance;
                                        }
                                        if (typeName == "AzureProtectionEntityProviderSettings")
                                        {
                                            AzureProtectionEntityProviderSettings azureProtectionEntityProviderSettingsInstance = new AzureProtectionEntityProviderSettings();
                                            
                                            JToken vmDiskDetailsValue2 = replicationProviderSettingsValue["vmDiskDetails"];
                                            if (vmDiskDetailsValue2 != null && vmDiskDetailsValue2.Type != JTokenType.Null)
                                            {
                                                AzureVmDiskDetails vmDiskDetailsInstance2 = new AzureVmDiskDetails();
                                                azureProtectionEntityProviderSettingsInstance.VMDiskDetails = vmDiskDetailsInstance2;
                                                
                                                JToken osTypeValue2 = vmDiskDetailsValue2["osType"];
                                                if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance2 = ((string)osTypeValue2);
                                                    vmDiskDetailsInstance2.OsType = osTypeInstance2;
                                                }
                                                
                                                JToken disksArray2 = vmDiskDetailsValue2;
                                                if (disksArray2 != null && disksArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken disksValue2 in ((JArray)disksArray2))
                                                    {
                                                        VirtualHardDisk virtualHardDiskInstance2 = new VirtualHardDisk();
                                                        vmDiskDetailsInstance2.Disks.Add(virtualHardDiskInstance2);
                                                        
                                                        JToken idValue2 = disksValue2["id"];
                                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                        {
                                                            string idInstance2 = ((string)idValue2);
                                                            virtualHardDiskInstance2.Id = idInstance2;
                                                        }
                                                        
                                                        JToken nameValue2 = disksValue2["name"];
                                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance2 = ((string)nameValue2);
                                                            virtualHardDiskInstance2.Name = nameInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken osDiskValue2 = vmDiskDetailsValue2["osDisk"];
                                                if (osDiskValue2 != null && osDiskValue2.Type != JTokenType.Null)
                                                {
                                                    string osDiskInstance2 = ((string)osDiskValue2);
                                                    vmDiskDetailsInstance2.OsDisk = osDiskInstance2;
                                                }
                                                
                                                JToken vHDIdValue2 = vmDiskDetailsValue2["vHDId"];
                                                if (vHDIdValue2 != null && vHDIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vHDIdInstance2 = ((string)vHDIdValue2);
                                                    vmDiskDetailsInstance2.VHDId = vHDIdInstance2;
                                                }
                                                
                                                JToken maxSizeMBValue2 = vmDiskDetailsValue2["maxSizeMB"];
                                                if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                    vmDiskDetailsInstance2.MaxSizeMB = maxSizeMBInstance2;
                                                }
                                            }
                                            
                                            JToken vmPropertiesValue = replicationProviderSettingsValue["vmProperties"];
                                            if (vmPropertiesValue != null && vmPropertiesValue.Type != JTokenType.Null)
                                            {
                                                VMProperties vmPropertiesInstance = new VMProperties();
                                                azureProtectionEntityProviderSettingsInstance.VMProperties = vmPropertiesInstance;
                                                
                                                JToken recoveryAzureVMNameValue = vmPropertiesValue["recoveryAzureVMName"];
                                                if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                                    vmPropertiesInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                                }
                                                
                                                JToken recoveryAzureVMSizeValue = vmPropertiesValue["recoveryAzureVMSize"];
                                                if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                                    vmPropertiesInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                                }
                                                
                                                JToken selectedRecoveryAzureNetworkIdValue = vmPropertiesValue["selectedRecoveryAzureNetworkId"];
                                                if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                                    vmPropertiesInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                                }
                                                
                                                JToken vmNicsArray = vmPropertiesValue;
                                                if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                                    {
                                                        VMNicDetails vMNicDetailsInstance = new VMNicDetails();
                                                        vmPropertiesInstance.VMNics.Add(vMNicDetailsInstance);
                                                        
                                                        JToken nicIdValue = vmNicsValue["NicId"];
                                                        if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance = ((string)nicIdValue);
                                                            vMNicDetailsInstance.NicId = nicIdInstance;
                                                        }
                                                        
                                                        JToken vMSubnetNameValue = vmNicsValue["VMSubnetName"];
                                                        if (vMSubnetNameValue != null && vMSubnetNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vMSubnetNameInstance = ((string)vMSubnetNameValue);
                                                            vMNicDetailsInstance.VMSubnetName = vMSubnetNameInstance;
                                                        }
                                                        
                                                        JToken vMNetworkNameValue = vmNicsValue["VMNetworkName"];
                                                        if (vMNetworkNameValue != null && vMNetworkNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vMNetworkNameInstance = ((string)vMNetworkNameValue);
                                                            vMNicDetailsInstance.VMNetworkName = vMNetworkNameInstance;
                                                        }
                                                        
                                                        JToken recoveryVMNetworkIdValue = vmNicsValue["RecoveryVMNetworkId"];
                                                        if (recoveryVMNetworkIdValue != null && recoveryVMNetworkIdValue.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMNetworkIdInstance = ((string)recoveryVMNetworkIdValue);
                                                            vMNicDetailsInstance.RecoveryVMNetworkId = recoveryVMNetworkIdInstance;
                                                        }
                                                        
                                                        JToken recoveryVMSubnetNameValue = vmNicsValue["RecoveryVMSubnetName"];
                                                        if (recoveryVMSubnetNameValue != null && recoveryVMSubnetNameValue.Type != JTokenType.Null)
                                                        {
                                                            string recoveryVMSubnetNameInstance = ((string)recoveryVMSubnetNameValue);
                                                            vMNicDetailsInstance.RecoveryVMSubnetName = recoveryVMSubnetNameInstance;
                                                        }
                                                        
                                                        JToken replicaNicStaticIPAddressValue = vmNicsValue["ReplicaNicStaticIPAddress"];
                                                        if (replicaNicStaticIPAddressValue != null && replicaNicStaticIPAddressValue.Type != JTokenType.Null)
                                                        {
                                                            string replicaNicStaticIPAddressInstance = ((string)replicaNicStaticIPAddressValue);
                                                            vMNicDetailsInstance.ReplicaNicStaticIPAddress = replicaNicStaticIPAddressInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            protectionEntityInstance.ReplicationProviderSettings = azureProtectionEntityProviderSettingsInstance;
                                        }
                                    }
                                    
                                    JToken fabricObjectIdValue = valueValue["fabricObjectId"];
                                    if (fabricObjectIdValue != null && fabricObjectIdValue.Type != JTokenType.Null)
                                    {
                                        string fabricObjectIdInstance = ((string)fabricObjectIdValue);
                                        protectionEntityInstance.FabricObjectId = fabricObjectIdInstance;
                                    }
                                    
                                    JToken serverIdValue = valueValue["serverId"];
                                    if (serverIdValue != null && serverIdValue.Type != JTokenType.Null)
                                    {
                                        string serverIdInstance = ((string)serverIdValue);
                                        protectionEntityInstance.ServerId = serverIdInstance;
                                    }
                                    
                                    JToken protectionContainerIdValue = valueValue["protectionContainerId"];
                                    if (protectionContainerIdValue != null && protectionContainerIdValue.Type != JTokenType.Null)
                                    {
                                        string protectionContainerIdInstance = ((string)protectionContainerIdValue);
                                        protectionEntityInstance.ProtectionContainerId = protectionContainerIdInstance;
                                    }
                                    
                                    JToken protectedValue = valueValue["protected"];
                                    if (protectedValue != null && protectedValue.Type != JTokenType.Null)
                                    {
                                        bool protectedInstance = ((bool)protectedValue);
                                        protectionEntityInstance.Protected = protectedInstance;
                                    }
                                    
                                    JToken protectionStateDescriptionValue = valueValue["protectionStateDescription"];
                                    if (protectionStateDescriptionValue != null && protectionStateDescriptionValue.Type != JTokenType.Null)
                                    {
                                        string protectionStateDescriptionInstance = ((string)protectionStateDescriptionValue);
                                        protectionEntityInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                    }
                                    
                                    JToken activeLocationValue = valueValue["activeLocation"];
                                    if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                    {
                                        string activeLocationInstance = ((string)activeLocationValue);
                                        protectionEntityInstance.ActiveLocation = activeLocationInstance;
                                    }
                                    
                                    JToken testFailoverStateDescriptionValue = valueValue["testFailoverStateDescription"];
                                    if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                    {
                                        string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                        protectionEntityInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                    }
                                    
                                    JToken canFailoverValue = valueValue["canFailover"];
                                    if (canFailoverValue != null && canFailoverValue.Type != JTokenType.Null)
                                    {
                                        bool canFailoverInstance = ((bool)canFailoverValue);
                                        protectionEntityInstance.CanFailover = canFailoverInstance;
                                    }
                                    
                                    JToken canReverseReplicateValue = valueValue["canReverseReplicate"];
                                    if (canReverseReplicateValue != null && canReverseReplicateValue.Type != JTokenType.Null)
                                    {
                                        bool canReverseReplicateInstance = ((bool)canReverseReplicateValue);
                                        protectionEntityInstance.CanReverseReplicate = canReverseReplicateInstance;
                                    }
                                    
                                    JToken canCommitValue = valueValue["canCommit"];
                                    if (canCommitValue != null && canCommitValue.Type != JTokenType.Null)
                                    {
                                        bool canCommitInstance = ((bool)canCommitValue);
                                        protectionEntityInstance.CanCommit = canCommitInstance;
                                    }
                                    
                                    JToken replicationHealthValue = valueValue["replicationHealth"];
                                    if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                    {
                                        string replicationHealthInstance = ((string)replicationHealthValue);
                                        protectionEntityInstance.ReplicationHealth = replicationHealthInstance;
                                    }
                                    
                                    JToken replicationProviderValue = valueValue["replicationProvider"];
                                    if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                    {
                                        string replicationProviderInstance = ((string)replicationProviderValue);
                                        protectionEntityInstance.ReplicationProvider = replicationProviderInstance;
                                    }
                                    
                                    JToken protectionProfileValue = valueValue["protectionProfile"];
                                    if (protectionProfileValue != null && protectionProfileValue.Type != JTokenType.Null)
                                    {
                                        ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                                        protectionEntityInstance.ProtectionProfile = protectionProfileInstance;
                                        
                                        JToken propertiesValue = protectionProfileValue["properties"];
                                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                        {
                                            ProtectionProfileProperties propertiesInstance = new ProtectionProfileProperties();
                                            protectionProfileInstance.CustomData = propertiesInstance;
                                            
                                            JToken friendlyNameValue2 = propertiesValue["friendlyName"];
                                            if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                                propertiesInstance.FriendlyName = friendlyNameInstance2;
                                            }
                                            
                                            JToken protectedEntityCountValue = propertiesValue["protectedEntityCount"];
                                            if (protectedEntityCountValue != null && protectedEntityCountValue.Type != JTokenType.Null)
                                            {
                                                int protectedEntityCountInstance = ((int)protectedEntityCountValue);
                                                propertiesInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                            }
                                            
                                            JToken replicationProviderValue2 = propertiesValue["replicationProvider"];
                                            if (replicationProviderValue2 != null && replicationProviderValue2.Type != JTokenType.Null)
                                            {
                                                string replicationProviderInstance2 = ((string)replicationProviderValue2);
                                                propertiesInstance.ReplicationProvider = replicationProviderInstance2;
                                            }
                                            
                                            JToken replicationProviderSettingValue = propertiesValue["replicationProviderSetting"];
                                            if (replicationProviderSettingValue != null && replicationProviderSettingValue.Type != JTokenType.Null)
                                            {
                                                string replicationProviderSettingInstance = ((string)replicationProviderSettingValue);
                                                propertiesInstance.ReplicationProviderSetting = replicationProviderSettingInstance;
                                            }
                                            
                                            JToken canDissociateValue = propertiesValue["canDissociate"];
                                            if (canDissociateValue != null && canDissociateValue.Type != JTokenType.Null)
                                            {
                                                bool canDissociateInstance = ((bool)canDissociateValue);
                                                propertiesInstance.CanDissociate = canDissociateInstance;
                                            }
                                            
                                            JToken associationDetailArray = propertiesValue["associationDetail"];
                                            if (associationDetailArray != null && associationDetailArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken associationDetailValue in ((JArray)associationDetailArray))
                                                {
                                                    ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                                    propertiesInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                                    
                                                    JToken primaryProtectionContainerIdValue = associationDetailValue["primaryProtectionContainerId"];
                                                    if (primaryProtectionContainerIdValue != null && primaryProtectionContainerIdValue.Type != JTokenType.Null)
                                                    {
                                                        string primaryProtectionContainerIdInstance = ((string)primaryProtectionContainerIdValue);
                                                        protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                                    }
                                                    
                                                    JToken recoveryProtectionContainerIdValue = associationDetailValue["recoveryProtectionContainerId"];
                                                    if (recoveryProtectionContainerIdValue != null && recoveryProtectionContainerIdValue.Type != JTokenType.Null)
                                                    {
                                                        string recoveryProtectionContainerIdInstance = ((string)recoveryProtectionContainerIdValue);
                                                        protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                                    }
                                                    
                                                    JToken associationStatusValue = associationDetailValue["associationStatus"];
                                                    if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                                    {
                                                        string associationStatusInstance = ((string)associationStatusValue);
                                                        protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken idValue3 = protectionProfileValue["id"];
                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                        {
                                            string idInstance3 = ((string)idValue3);
                                            protectionProfileInstance.Id = idInstance3;
                                        }
                                        
                                        JToken nameValue3 = protectionProfileValue["name"];
                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                        {
                                            string nameInstance3 = ((string)nameValue3);
                                            protectionProfileInstance.Name = nameInstance3;
                                        }
                                        
                                        JToken typeValue = protectionProfileValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            protectionProfileInstance.Type = typeInstance;
                                        }
                                        
                                        JToken locationValue = protectionProfileValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            protectionProfileInstance.Location = locationInstance;
                                        }
                                        
                                        JToken tagsSequenceElement = ((JToken)protectionProfileValue["tags"]);
                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in tagsSequenceElement)
                                            {
                                                string tagsKey = ((string)property.Name);
                                                string tagsValue = ((string)property.Value);
                                                protectionProfileInstance.Tags.Add(tagsKey, tagsValue);
                                            }
                                        }
                                    }
                                    
                                    JToken idValue4 = valueValue["id"];
                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                    {
                                        string idInstance4 = ((string)idValue4);
                                        protectionEntityInstance.Id = idInstance4;
                                    }
                                    
                                    JToken nameValue4 = valueValue["name"];
                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                    {
                                        string nameInstance4 = ((string)nameValue4);
                                        protectionEntityInstance.Name = nameInstance4;
                                    }
                                    
                                    JToken typeValue2 = valueValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        protectionEntityInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        protectionEntityInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            protectionEntityInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Test failover of a protection entity.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Parent Protection Container ID.
        /// </param>
        /// <param name='protectionEntityId'>
        /// Required. Protection entity ID.
        /// </param>
        /// <param name='parameters'>
        /// Required. Test failover request.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public async Task<JobResponse> TestFailoverAsync(string protectionContainerId, string protectionEntityId, TestFailoverRequest parameters, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            if (protectionEntityId == null)
            {
                throw new ArgumentNullException("protectionEntityId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.NetworkID == null)
            {
                throw new ArgumentNullException("parameters.NetworkID");
            }
            if (parameters.NetworkType == null)
            {
                throw new ArgumentNullException("parameters.NetworkType");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("protectionEntityId", protectionEntityId);
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "TestFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.SiteRecovery";
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerId);
            url = url + "/ProtectionEntities/";
            url = url + Uri.EscapeDataString(protectionEntityId);
            url = url + "/TestFailover";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Job jobInstance = new Job();
                            result.Job = jobInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JobProperties propertiesInstance = new JobProperties();
                                jobInstance.Properties = propertiesInstance;
                                
                                JToken activityIdValue = propertiesValue["activityId"];
                                if (activityIdValue != null && activityIdValue.Type != JTokenType.Null)
                                {
                                    string activityIdInstance = ((string)activityIdValue);
                                    propertiesInstance.ActivityId = activityIdInstance;
                                }
                                
                                JToken startTimeValue = propertiesValue["startTime"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                    propertiesInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken endTimeValue = propertiesValue["endTime"];
                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                    propertiesInstance.EndTime = endTimeInstance;
                                }
                                
                                JToken displayNameValue = propertiesValue["displayName"];
                                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                {
                                    string displayNameInstance = ((string)displayNameValue);
                                    propertiesInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken targetObjectIdValue = propertiesValue["targetObjectId"];
                                if (targetObjectIdValue != null && targetObjectIdValue.Type != JTokenType.Null)
                                {
                                    string targetObjectIdInstance = ((string)targetObjectIdValue);
                                    propertiesInstance.TargetObjectId = targetObjectIdInstance;
                                }
                                
                                JToken targetObjectTypeValue = propertiesValue["targetObjectType"];
                                if (targetObjectTypeValue != null && targetObjectTypeValue.Type != JTokenType.Null)
                                {
                                    string targetObjectTypeInstance = ((string)targetObjectTypeValue);
                                    propertiesInstance.TargetObjectType = targetObjectTypeInstance;
                                }
                                
                                JToken targetObjectNameValue = propertiesValue["targetObjectName"];
                                if (targetObjectNameValue != null && targetObjectNameValue.Type != JTokenType.Null)
                                {
                                    string targetObjectNameInstance = ((string)targetObjectNameValue);
                                    propertiesInstance.TargetObjectName = targetObjectNameInstance;
                                }
                                
                                JToken allowedActionsArray = propertiesValue["allowedActions"];
                                if (allowedActionsArray != null && allowedActionsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedActionsValue in ((JArray)allowedActionsArray))
                                    {
                                        propertiesInstance.AllowedActions.Add(((string)allowedActionsValue));
                                    }
                                }
                                
                                JToken stateValue = propertiesValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    string stateInstance = ((string)stateValue);
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken stateDescriptionValue = propertiesValue["stateDescription"];
                                if (stateDescriptionValue != null && stateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string stateDescriptionInstance = ((string)stateDescriptionValue);
                                    propertiesInstance.StateDescription = stateDescriptionInstance;
                                }
                                
                                JToken tasksArray = propertiesValue["tasks"];
                                if (tasksArray != null && tasksArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken tasksValue in ((JArray)tasksArray))
                                    {
                                        AsrTask asrTaskInstance = new AsrTask();
                                        propertiesInstance.Tasks.Add(asrTaskInstance);
                                        
                                        JToken startTimeValue2 = tasksValue["startTime"];
                                        if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance2 = ((DateTime)startTimeValue2);
                                            asrTaskInstance.StartTime = startTimeInstance2;
                                        }
                                        
                                        JToken endTimeValue2 = tasksValue["endTime"];
                                        if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance2 = ((DateTime)endTimeValue2);
                                            asrTaskInstance.EndTime = endTimeInstance2;
                                        }
                                        
                                        JToken actionsArray = tasksValue["actions"];
                                        if (actionsArray != null && actionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken actionsValue in ((JArray)actionsArray))
                                            {
                                                asrTaskInstance.Actions.Add(((string)actionsValue));
                                            }
                                        }
                                        
                                        JToken taskTypeValue = tasksValue["taskType"];
                                        if (taskTypeValue != null && taskTypeValue.Type != JTokenType.Null)
                                        {
                                            string taskTypeInstance = ((string)taskTypeValue);
                                            asrTaskInstance.TaskType = taskTypeInstance;
                                        }
                                        
                                        JToken taskNameValue = tasksValue["taskName"];
                                        if (taskNameValue != null && taskNameValue.Type != JTokenType.Null)
                                        {
                                            string taskNameInstance = ((string)taskNameValue);
                                            asrTaskInstance.TaskName = taskNameInstance;
                                        }
                                        
                                        JToken stateValue2 = tasksValue["state"];
                                        if (stateValue2 != null && stateValue2.Type != JTokenType.Null)
                                        {
                                            string stateInstance2 = ((string)stateValue2);
                                            asrTaskInstance.State = stateInstance2;
                                        }
                                        
                                        JToken stateDescriptionValue2 = tasksValue["stateDescription"];
                                        if (stateDescriptionValue2 != null && stateDescriptionValue2.Type != JTokenType.Null)
                                        {
                                            string stateDescriptionInstance2 = ((string)stateDescriptionValue2);
                                            asrTaskInstance.StateDescription = stateDescriptionInstance2;
                                        }
                                        
                                        JToken extendedDetailsValue = tasksValue["extendedDetails"];
                                        if (extendedDetailsValue != null && extendedDetailsValue.Type != JTokenType.Null)
                                        {
                                            string extendedDetailsInstance = ((string)extendedDetailsValue);
                                            asrTaskInstance.ExtendedDetails = extendedDetailsInstance;
                                        }
                                        
                                        JToken idValue = tasksValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            asrTaskInstance.Id = idInstance;
                                        }
                                        
                                        JToken nameValue = tasksValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            asrTaskInstance.Name = nameInstance;
                                        }
                                        
                                        JToken typeValue = tasksValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            asrTaskInstance.Type = typeInstance;
                                        }
                                        
                                        JToken locationValue = tasksValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            asrTaskInstance.Location = locationInstance;
                                        }
                                        
                                        JToken tagsSequenceElement = ((JToken)tasksValue["tags"]);
                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in tagsSequenceElement)
                                            {
                                                string tagsKey = ((string)property.Name);
                                                string tagsValue = ((string)property.Value);
                                                asrTaskInstance.Tags.Add(tagsKey, tagsValue);
                                            }
                                        }
                                    }
                                }
                                
                                JToken errorsArray = propertiesValue["errors"];
                                if (errorsArray != null && errorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken errorsValue in ((JArray)errorsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        propertiesInstance.Errors.Add(errorDetailsInstance);
                                        
                                        JToken serviceErrorDetailsValue = errorsValue["serviceErrorDetails"];
                                        if (serviceErrorDetailsValue != null && serviceErrorDetailsValue.Type != JTokenType.Null)
                                        {
                                            ServiceError serviceErrorDetailsInstance = new ServiceError();
                                            errorDetailsInstance.ServiceErrorDetails = serviceErrorDetailsInstance;
                                            
                                            JToken codeValue = serviceErrorDetailsValue["Code"];
                                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                                            {
                                                string codeInstance = ((string)codeValue);
                                                serviceErrorDetailsInstance.Code = codeInstance;
                                            }
                                            
                                            JToken messageValue = serviceErrorDetailsValue["Message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                serviceErrorDetailsInstance.Message = messageInstance;
                                            }
                                            
                                            JToken possibleCausesValue = serviceErrorDetailsValue["PossibleCauses"];
                                            if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                            {
                                                string possibleCausesInstance = ((string)possibleCausesValue);
                                                serviceErrorDetailsInstance.PossibleCauses = possibleCausesInstance;
                                            }
                                            
                                            JToken recommendedActionValue = serviceErrorDetailsValue["RecommendedAction"];
                                            if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                            {
                                                string recommendedActionInstance = ((string)recommendedActionValue);
                                                serviceErrorDetailsInstance.RecommendedAction = recommendedActionInstance;
                                            }
                                            
                                            JToken activityIdValue2 = serviceErrorDetailsValue["ActivityId"];
                                            if (activityIdValue2 != null && activityIdValue2.Type != JTokenType.Null)
                                            {
                                                string activityIdInstance2 = ((string)activityIdValue2);
                                                serviceErrorDetailsInstance.ActivityId = activityIdInstance2;
                                            }
                                        }
                                        
                                        JToken providerErrorDetailsValue = errorsValue["providerErrorDetails"];
                                        if (providerErrorDetailsValue != null && providerErrorDetailsValue.Type != JTokenType.Null)
                                        {
                                            ProviderError providerErrorDetailsInstance = new ProviderError();
                                            errorDetailsInstance.ProviderErrorDetails = providerErrorDetailsInstance;
                                            
                                            JToken errorCodeValue = providerErrorDetailsValue["errorCode"];
                                            if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                            {
                                                int errorCodeInstance = ((int)errorCodeValue);
                                                providerErrorDetailsInstance.ErrorCode = errorCodeInstance;
                                            }
                                            
                                            JToken errorMessageValue = providerErrorDetailsValue["errorMessage"];
                                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance = ((string)errorMessageValue);
                                                providerErrorDetailsInstance.ErrorMessage = errorMessageInstance;
                                            }
                                            
                                            JToken errorIdValue = providerErrorDetailsValue["errorId"];
                                            if (errorIdValue != null && errorIdValue.Type != JTokenType.Null)
                                            {
                                                string errorIdInstance = ((string)errorIdValue);
                                                providerErrorDetailsInstance.ErrorId = errorIdInstance;
                                            }
                                            
                                            JToken workflowIdValue = providerErrorDetailsValue["workflowId"];
                                            if (workflowIdValue != null && workflowIdValue.Type != JTokenType.Null)
                                            {
                                                string workflowIdInstance = ((string)workflowIdValue);
                                                providerErrorDetailsInstance.WorkflowId = workflowIdInstance;
                                            }
                                            
                                            JToken creationTimeUtcValue = providerErrorDetailsValue["creationTimeUtc"];
                                            if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                            {
                                                DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                                providerErrorDetailsInstance.CreationTimeUtc = creationTimeUtcInstance;
                                            }
                                            
                                            JToken errorLevelValue = providerErrorDetailsValue["errorLevel"];
                                            if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                            {
                                                string errorLevelInstance = ((string)errorLevelValue);
                                                providerErrorDetailsInstance.ErrorLevel = errorLevelInstance;
                                            }
                                            
                                            JToken affectedObjectsSequenceElement = ((JToken)providerErrorDetailsValue["affectedObjects"]);
                                            if (affectedObjectsSequenceElement != null && affectedObjectsSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property2 in affectedObjectsSequenceElement)
                                                {
                                                    string affectedObjectsKey = ((string)property2.Name);
                                                    string affectedObjectsValue = ((string)property2.Value);
                                                    providerErrorDetailsInstance.AffectedObjects.Add(affectedObjectsKey, affectedObjectsValue);
                                                }
                                            }
                                        }
                                        
                                        JToken taskIdValue = errorsValue["taskId"];
                                        if (taskIdValue != null && taskIdValue.Type != JTokenType.Null)
                                        {
                                            string taskIdInstance = ((string)taskIdValue);
                                            errorDetailsInstance.TaskId = taskIdInstance;
                                        }
                                    }
                                }
                                
                                JToken idValue2 = propertiesValue["id"];
                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                {
                                    string idInstance2 = ((string)idValue2);
                                    propertiesInstance.Id = idInstance2;
                                }
                                
                                JToken nameValue2 = propertiesValue["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    propertiesInstance.Name = nameInstance2;
                                }
                                
                                JToken typeValue2 = propertiesValue["type"];
                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                {
                                    string typeInstance2 = ((string)typeValue2);
                                    propertiesInstance.Type = typeInstance2;
                                }
                                
                                JToken locationValue2 = propertiesValue["location"];
                                if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                {
                                    string locationInstance2 = ((string)locationValue2);
                                    propertiesInstance.Location = locationInstance2;
                                }
                                
                                JToken tagsSequenceElement2 = ((JToken)propertiesValue["tags"]);
                                if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property3 in tagsSequenceElement2)
                                    {
                                        string tagsKey2 = ((string)property3.Name);
                                        string tagsValue2 = ((string)property3.Value);
                                        propertiesInstance.Tags.Add(tagsKey2, tagsValue2);
                                    }
                                }
                            }
                            
                            JToken idValue3 = responseDoc["id"];
                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                            {
                                string idInstance3 = ((string)idValue3);
                                jobInstance.Id = idInstance3;
                            }
                            
                            JToken nameValue3 = responseDoc["name"];
                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                            {
                                string nameInstance3 = ((string)nameValue3);
                                jobInstance.Name = nameInstance3;
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                jobInstance.Type = typeInstance3;
                            }
                            
                            JToken locationValue3 = responseDoc["location"];
                            if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                            {
                                string locationInstance3 = ((string)locationValue3);
                                jobInstance.Location = locationInstance3;
                            }
                            
                            JToken tagsSequenceElement3 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                            {
                                foreach (JProperty property4 in tagsSequenceElement3)
                                {
                                    string tagsKey3 = ((string)property4.Name);
                                    string tagsValue3 = ((string)property4.Value);
                                    jobInstance.Tags.Add(tagsKey3, tagsValue3);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
