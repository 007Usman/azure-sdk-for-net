// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// ServerFarmsOperations operations.
    /// </summary>
    public partial interface IServerFarmsOperations
    {
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<ServerFarmCollection>> GetWebHostingPlansWithHttpMessagesAsync(string resourceGroupName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<ServerFarmCollection>> GetServerFarmsWithHttpMessagesAsync(string resourceGroupName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<ServerFarmWithRichSku>> GetWebHostingPlanWithHttpMessagesAsync(string resourceGroupName, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='serverFarmEnvelope'>
        /// Details of App Service Plan
        /// </param>
        /// <param name='allowPendingState'>
        /// OBSOLETE: If true, allow pending state for App Service Plan
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<ServerFarmWithRichSku>> CreateOrUpdateWebHostingPlanWithHttpMessagesAsync(string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='serverFarmEnvelope'>
        /// Details of App Service Plan
        /// </param>
        /// <param name='allowPendingState'>
        /// OBSOLETE: If true, allow pending state for App Service Plan
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<ServerFarmWithRichSku>> BeginCreateOrUpdateWebHostingPlanWithHttpMessagesAsync(string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<object>> DeleteWebHostingPlanWithHttpMessagesAsync(string resourceGroupName, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<ServerFarmWithRichSku>> GetServerFarmWithHttpMessagesAsync(string resourceGroupName, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='serverFarmEnvelope'>
        /// Details of App Service Plan
        /// </param>
        /// <param name='allowPendingState'>
        /// OBSOLETE: If true, allow pending state for App Service Plan
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<ServerFarmWithRichSku>> CreateOrUpdateServerFarmWithHttpMessagesAsync(string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='serverFarmEnvelope'>
        /// Details of App Service Plan
        /// </param>
        /// <param name='allowPendingState'>
        /// OBSOLETE: If true, allow pending state for App Service Plan
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<ServerFarmWithRichSku>> BeginCreateOrUpdateServerFarmWithHttpMessagesAsync(string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<object>> DeleteServerFarmWithHttpMessagesAsync(string resourceGroupName, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='details'>
        /// If true, metrics are broken down per App Service Plan instance
        /// </param>
        /// <param name='filter'>
        /// Return only usages/metrics specified in the filter. Filter
        /// conforms to odata syntax. Example: $filter=(name.value eq
        /// 'Metric1' or name.value eq 'Metric2') and startTime eq
        /// '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and
        /// timeGrain eq duration'[Hour|Minute|Day]'.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<MetricResponseCollection>> GetWebHostingPlanMetricsWithHttpMessagesAsync(string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='details'>
        /// If true, metrics are broken down per App Service Plan instance
        /// </param>
        /// <param name='filter'>
        /// Return only usages/metrics specified in the filter. Filter
        /// conforms to odata syntax. Example: $filter=(name.value eq
        /// 'Metric1' or name.value eq 'Metric2') and startTime eq
        /// '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and
        /// timeGrain eq duration'[Hour|Minute|Day]'.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<MetricResponseCollection>> GetServerFarmMetricsWithHttpMessagesAsync(string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<MetricDefinitionCollection>> GetServerFarmMetricDefintionsWithHttpMessagesAsync(string resourceGroupName, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<MetricDefinitionCollection>> GetWebHostingPlanMetricDefinitionsWithHttpMessagesAsync(string resourceGroupName, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IList<VnetInfo>>> GetVnetsForServerFarmWithHttpMessagesAsync(string resourceGroupName, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IList<VnetInfo>>> GetVnetsForWebHostingPlanWithHttpMessagesAsync(string resourceGroupName, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='vnetName'>
        /// Name of virtual network
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<VnetInfo>> GetVnetFromServerFarmWithHttpMessagesAsync(string resourceGroupName, string name, string vnetName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='vnetName'>
        /// Name of virtual network
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<VnetInfo>> GetVnetFromWebHostingPlanWithHttpMessagesAsync(string resourceGroupName, string name, string vnetName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='vnetName'>
        /// Name of virtual network
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IList<VnetRoute>>> GetRoutesForVnetWithHttpMessagesAsync(string resourceGroupName, string name, string vnetName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='vnetName'>
        /// Name of virtual network
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IList<VnetRoute>>> GetWebHostingPlanRoutesForVnetWithHttpMessagesAsync(string resourceGroupName, string name, string vnetName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='vnetName'>
        /// Name of virtual network
        /// </param>
        /// <param name='routeName'>
        /// Name of the virtual network route
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IList<VnetRoute>>> GetRouteForVnetWithHttpMessagesAsync(string resourceGroupName, string name, string vnetName, string routeName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='vnetName'>
        /// Name of virtual network
        /// </param>
        /// <param name='routeName'>
        /// Name of the virtual network route
        /// </param>
        /// <param name='route'>
        /// The route object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<VnetRoute>> CreateOrUpdateVnetRouteWithHttpMessagesAsync(string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='vnetName'>
        /// Name of virtual network
        /// </param>
        /// <param name='routeName'>
        /// Name of the virtual network route
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<object>> DeleteVnetRouteWithHttpMessagesAsync(string resourceGroupName, string name, string vnetName, string routeName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='vnetName'>
        /// Name of virtual network
        /// </param>
        /// <param name='routeName'>
        /// Name of the virtual network route
        /// </param>
        /// <param name='route'>
        /// The route object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<VnetRoute>> UpdateVnetRouteWithHttpMessagesAsync(string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='vnetName'>
        /// Name of virtual network
        /// </param>
        /// <param name='routeName'>
        /// Name of the virtual network route
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IList<VnetRoute>>> GetWebHostingPlanRouteForVnetWithHttpMessagesAsync(string resourceGroupName, string name, string vnetName, string routeName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='vnetName'>
        /// Name of virtual network
        /// </param>
        /// <param name='routeName'>
        /// Name of the virtual network route
        /// </param>
        /// <param name='route'>
        /// The route object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<VnetRoute>> CreateOrUpdateWebHostingPlanVnetRouteWithHttpMessagesAsync(string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='vnetName'>
        /// Name of virtual network
        /// </param>
        /// <param name='routeName'>
        /// Name of the virtual network route
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<object>> DeleteWebHostingPlanVnetRouteWithHttpMessagesAsync(string resourceGroupName, string name, string vnetName, string routeName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='vnetName'>
        /// Name of virtual network
        /// </param>
        /// <param name='routeName'>
        /// Name of the virtual network route
        /// </param>
        /// <param name='route'>
        /// The route object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<VnetRoute>> UpdateWebHostingPlanVnetRouteWithHttpMessagesAsync(string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='skipToken'>
        /// Skip to of web apps in a list. If specified, the resulting list
        /// will contain web apps starting from (including) the skipToken.
        /// Else, the resulting list contains web apps from the start of the
        /// list
        /// </param>
        /// <param name='filter'>
        /// Supported filter: $filter=state eq running. Returns only web apps
        /// that are currently running
        /// </param>
        /// <param name='top'>
        /// List page size. If specified, results are paged.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Page<Site>>> GetServerFarmSitesWithHttpMessagesAsync(string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='skipToken'>
        /// Skip to of web apps in a list. If specified, the resulting list
        /// will contain web apps starting from (including) the skipToken.
        /// Else, the resulting list contains web apps from the start of the
        /// list
        /// </param>
        /// <param name='filter'>
        /// Supported filter: $filter=state eq running. Returns only web apps
        /// that are currently running
        /// </param>
        /// <param name='top'>
        /// List page size. If specified, results are paged.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Page<Site>>> GetWebHostingPlanSitesWithHttpMessagesAsync(string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of server farm
        /// </param>
        /// <param name='workerName'>
        /// Name of worker machine, typically IP address
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<object>> RebootWorkerForServerFarmWithHttpMessagesAsync(string resourceGroupName, string name, string workerName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of server farm
        /// </param>
        /// <param name='workerName'>
        /// Name of worker machine, typically IP address
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<object>> RebootWorkerForWebHostingPlanWithHttpMessagesAsync(string resourceGroupName, string name, string workerName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='softRestart'>
        /// Soft restart applies the configuration settings and restarts the
        /// apps if necessary. Hard restart always restarts and reprovisions
        /// the apps
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<object>> RestartSitesForServerFarmWithHttpMessagesAsync(string resourceGroupName, string name, bool? softRestart = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of server farm
        /// </param>
        /// <param name='operationId'>
        /// Id of Server farm operation"&amp;gt;
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<ServerFarmWithRichSku>> GetWebHostingPlanOperationWithHttpMessagesAsync(string resourceGroupName, string name, string operationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Name of resource group
        /// </param>
        /// <param name='name'>
        /// Name of server farm
        /// </param>
        /// <param name='operationId'>
        /// Id of Server farm operation"&amp;gt;
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<ServerFarmWithRichSku>> GetServerFarmOperationWithHttpMessagesAsync(string resourceGroupName, string name, string operationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Page<Site>>> GetServerFarmSitesNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Page<Site>>> GetWebHostingPlanSitesNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
