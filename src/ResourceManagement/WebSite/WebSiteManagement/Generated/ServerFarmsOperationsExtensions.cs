// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class ServerFarmsOperationsExtensions
    {
            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            public static ServerFarmCollection GetWebHostingPlans(this IServerFarmsOperations operations, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetWebHostingPlansAsync(resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmCollection> GetWebHostingPlansAsync( this IServerFarmsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<ServerFarmCollection> result = await operations.GetWebHostingPlansWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            public static ServerFarmCollection GetServerFarms(this IServerFarmsOperations operations, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetServerFarmsAsync(resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmCollection> GetServerFarmsAsync( this IServerFarmsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<ServerFarmCollection> result = await operations.GetServerFarmsWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static ServerFarmWithRichSku GetWebHostingPlan(this IServerFarmsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetWebHostingPlanAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmWithRichSku> GetWebHostingPlanAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<ServerFarmWithRichSku> result = await operations.GetWebHostingPlanWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='serverFarmEnvelope'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            public static ServerFarmWithRichSku CreateOrUpdateWebHostingPlan(this IServerFarmsOperations operations, string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).CreateOrUpdateWebHostingPlanAsync(resourceGroupName, name, serverFarmEnvelope, allowPendingState), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='serverFarmEnvelope'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmWithRichSku> CreateOrUpdateWebHostingPlanAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<ServerFarmWithRichSku> result = await operations.CreateOrUpdateWebHostingPlanWithHttpMessagesAsync(resourceGroupName, name, serverFarmEnvelope, allowPendingState, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='serverFarmEnvelope'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            public static ServerFarmWithRichSku BeginCreateOrUpdateWebHostingPlan(this IServerFarmsOperations operations, string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).BeginCreateOrUpdateWebHostingPlanAsync(resourceGroupName, name, serverFarmEnvelope, allowPendingState), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='serverFarmEnvelope'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmWithRichSku> BeginCreateOrUpdateWebHostingPlanAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<ServerFarmWithRichSku> result = await operations.BeginCreateOrUpdateWebHostingPlanWithHttpMessagesAsync(resourceGroupName, name, serverFarmEnvelope, allowPendingState, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static object DeleteWebHostingPlan(this IServerFarmsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).DeleteWebHostingPlanAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteWebHostingPlanAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteWebHostingPlanWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static ServerFarmWithRichSku GetServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetServerFarmAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmWithRichSku> GetServerFarmAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<ServerFarmWithRichSku> result = await operations.GetServerFarmWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='serverFarmEnvelope'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            public static ServerFarmWithRichSku CreateOrUpdateServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).CreateOrUpdateServerFarmAsync(resourceGroupName, name, serverFarmEnvelope, allowPendingState), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='serverFarmEnvelope'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmWithRichSku> CreateOrUpdateServerFarmAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<ServerFarmWithRichSku> result = await operations.CreateOrUpdateServerFarmWithHttpMessagesAsync(resourceGroupName, name, serverFarmEnvelope, allowPendingState, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='serverFarmEnvelope'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            public static ServerFarmWithRichSku BeginCreateOrUpdateServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).BeginCreateOrUpdateServerFarmAsync(resourceGroupName, name, serverFarmEnvelope, allowPendingState), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='serverFarmEnvelope'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmWithRichSku> BeginCreateOrUpdateServerFarmAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<ServerFarmWithRichSku> result = await operations.BeginCreateOrUpdateServerFarmWithHttpMessagesAsync(resourceGroupName, name, serverFarmEnvelope, allowPendingState, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static object DeleteServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).DeleteServerFarmAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteServerFarmAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteServerFarmWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='details'>
            /// If true, metrics are broken down per App Service Plan instance
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static MetricResponseCollection GetWebHostingPlanMetrics(this IServerFarmsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetWebHostingPlanMetricsAsync(resourceGroupName, name, details, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='details'>
            /// If true, metrics are broken down per App Service Plan instance
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricResponseCollection> GetWebHostingPlanMetricsAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<MetricResponseCollection> result = await operations.GetWebHostingPlanMetricsWithHttpMessagesAsync(resourceGroupName, name, details, filter, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='details'>
            /// If true, metrics are broken down per App Service Plan instance
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static MetricResponseCollection GetServerFarmMetrics(this IServerFarmsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetServerFarmMetricsAsync(resourceGroupName, name, details, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='details'>
            /// If true, metrics are broken down per App Service Plan instance
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricResponseCollection> GetServerFarmMetricsAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<MetricResponseCollection> result = await operations.GetServerFarmMetricsWithHttpMessagesAsync(resourceGroupName, name, details, filter, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static MetricDefinitionCollection GetServerFarmMetricDefintions(this IServerFarmsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetServerFarmMetricDefintionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricDefinitionCollection> GetServerFarmMetricDefintionsAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<MetricDefinitionCollection> result = await operations.GetServerFarmMetricDefintionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static MetricDefinitionCollection GetWebHostingPlanMetricDefinitions(this IServerFarmsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetWebHostingPlanMetricDefinitionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricDefinitionCollection> GetWebHostingPlanMetricDefinitionsAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<MetricDefinitionCollection> result = await operations.GetWebHostingPlanMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static IList<VnetInfo> GetVnetsForServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetVnetsForServerFarmAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetInfo>> GetVnetsForServerFarmAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IList<VnetInfo>> result = await operations.GetVnetsForServerFarmWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static IList<VnetInfo> GetVnetsForWebHostingPlan(this IServerFarmsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetVnetsForWebHostingPlanAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetInfo>> GetVnetsForWebHostingPlanAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IList<VnetInfo>> result = await operations.GetVnetsForWebHostingPlanWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            public static VnetInfo GetVnetFromServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetVnetFromServerFarmAsync(resourceGroupName, name, vnetName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> GetVnetFromServerFarmAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetInfo> result = await operations.GetVnetFromServerFarmWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            public static VnetInfo GetVnetFromWebHostingPlan(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetVnetFromWebHostingPlanAsync(resourceGroupName, name, vnetName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> GetVnetFromWebHostingPlanAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetInfo> result = await operations.GetVnetFromWebHostingPlanWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            public static IList<VnetRoute> GetRoutesForVnet(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetRoutesForVnetAsync(resourceGroupName, name, vnetName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetRoute>> GetRoutesForVnetAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IList<VnetRoute>> result = await operations.GetRoutesForVnetWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            public static IList<VnetRoute> GetWebHostingPlanRoutesForVnet(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetWebHostingPlanRoutesForVnetAsync(resourceGroupName, name, vnetName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetRoute>> GetWebHostingPlanRoutesForVnetAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IList<VnetRoute>> result = await operations.GetWebHostingPlanRoutesForVnetWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            public static IList<VnetRoute> GetRouteForVnet(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetRouteForVnetAsync(resourceGroupName, name, vnetName, routeName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetRoute>> GetRouteForVnetAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IList<VnetRoute>> result = await operations.GetRouteForVnetWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            public static VnetRoute CreateOrUpdateVnetRoute(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).CreateOrUpdateVnetRouteAsync(resourceGroupName, name, vnetName, routeName, route), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetRoute> CreateOrUpdateVnetRouteAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetRoute> result = await operations.CreateOrUpdateVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, route, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            public static object DeleteVnetRoute(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).DeleteVnetRouteAsync(resourceGroupName, name, vnetName, routeName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteVnetRouteAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            public static VnetRoute UpdateVnetRoute(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).UpdateVnetRouteAsync(resourceGroupName, name, vnetName, routeName, route), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetRoute> UpdateVnetRouteAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetRoute> result = await operations.UpdateVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, route, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            public static IList<VnetRoute> GetWebHostingPlanRouteForVnet(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetWebHostingPlanRouteForVnetAsync(resourceGroupName, name, vnetName, routeName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetRoute>> GetWebHostingPlanRouteForVnetAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IList<VnetRoute>> result = await operations.GetWebHostingPlanRouteForVnetWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            public static VnetRoute CreateOrUpdateWebHostingPlanVnetRoute(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).CreateOrUpdateWebHostingPlanVnetRouteAsync(resourceGroupName, name, vnetName, routeName, route), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetRoute> CreateOrUpdateWebHostingPlanVnetRouteAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetRoute> result = await operations.CreateOrUpdateWebHostingPlanVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, route, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            public static object DeleteWebHostingPlanVnetRoute(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).DeleteWebHostingPlanVnetRouteAsync(resourceGroupName, name, vnetName, routeName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteWebHostingPlanVnetRouteAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteWebHostingPlanVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            public static VnetRoute UpdateWebHostingPlanVnetRoute(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).UpdateWebHostingPlanVnetRouteAsync(resourceGroupName, name, vnetName, routeName, route), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetRoute> UpdateWebHostingPlanVnetRouteAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetRoute> result = await operations.UpdateWebHostingPlanVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, route, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='skipToken'>
            /// Skip to of web apps in a list. If specified, the resulting list will
            /// contain web apps starting from (including) the skipToken. Else, the
            /// resulting list contains web apps from the start of the list
            /// </param>
            /// <param name='filter'>
            /// Supported filter: $filter=state eq running. Returns only web apps that are
            /// currently running
            /// </param>
            /// <param name='top'>
            /// List page size. If specified, results are paged.
            /// </param>
            public static Page<Site> GetServerFarmSites(this IServerFarmsOperations operations, string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string))
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetServerFarmSitesAsync(resourceGroupName, name, skipToken, filter, top), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='skipToken'>
            /// Skip to of web apps in a list. If specified, the resulting list will
            /// contain web apps starting from (including) the skipToken. Else, the
            /// resulting list contains web apps from the start of the list
            /// </param>
            /// <param name='filter'>
            /// Supported filter: $filter=state eq running. Returns only web apps that are
            /// currently running
            /// </param>
            /// <param name='top'>
            /// List page size. If specified, results are paged.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Page<Site>> GetServerFarmSitesAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Page<Site>> result = await operations.GetServerFarmSitesWithHttpMessagesAsync(resourceGroupName, name, skipToken, filter, top, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='skipToken'>
            /// Skip to of web apps in a list. If specified, the resulting list will
            /// contain web apps starting from (including) the skipToken. Else, the
            /// resulting list contains web apps from the start of the list
            /// </param>
            /// <param name='filter'>
            /// Supported filter: $filter=state eq running. Returns only web apps that are
            /// currently running
            /// </param>
            /// <param name='top'>
            /// List page size. If specified, results are paged.
            /// </param>
            public static Page<Site> GetWebHostingPlanSites(this IServerFarmsOperations operations, string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string))
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetWebHostingPlanSitesAsync(resourceGroupName, name, skipToken, filter, top), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='skipToken'>
            /// Skip to of web apps in a list. If specified, the resulting list will
            /// contain web apps starting from (including) the skipToken. Else, the
            /// resulting list contains web apps from the start of the list
            /// </param>
            /// <param name='filter'>
            /// Supported filter: $filter=state eq running. Returns only web apps that are
            /// currently running
            /// </param>
            /// <param name='top'>
            /// List page size. If specified, results are paged.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Page<Site>> GetWebHostingPlanSitesAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Page<Site>> result = await operations.GetWebHostingPlanSitesWithHttpMessagesAsync(resourceGroupName, name, skipToken, filter, top, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='workerName'>
            /// Name of worker machine, typically IP address
            /// </param>
            public static object RebootWorkerForServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name, string workerName)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).RebootWorkerForServerFarmAsync(resourceGroupName, name, workerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='workerName'>
            /// Name of worker machine, typically IP address
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RebootWorkerForServerFarmAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string workerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.RebootWorkerForServerFarmWithHttpMessagesAsync(resourceGroupName, name, workerName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='workerName'>
            /// Name of worker machine, typically IP address
            /// </param>
            public static object RebootWorkerForWebHostingPlan(this IServerFarmsOperations operations, string resourceGroupName, string name, string workerName)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).RebootWorkerForWebHostingPlanAsync(resourceGroupName, name, workerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='workerName'>
            /// Name of worker machine, typically IP address
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RebootWorkerForWebHostingPlanAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string workerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.RebootWorkerForWebHostingPlanWithHttpMessagesAsync(resourceGroupName, name, workerName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the apps if
            /// necessary. Hard restart always restarts and reprovisions the apps
            /// </param>
            public static object RestartSitesForServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).RestartSitesForServerFarmAsync(resourceGroupName, name, softRestart), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the apps if
            /// necessary. Hard restart always restarts and reprovisions the apps
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RestartSitesForServerFarmAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.RestartSitesForServerFarmWithHttpMessagesAsync(resourceGroupName, name, softRestart, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='operationId'>
            /// Id of Server farm operation"&amp;gt;
            /// </param>
            public static ServerFarmWithRichSku GetWebHostingPlanOperation(this IServerFarmsOperations operations, string resourceGroupName, string name, string operationId)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetWebHostingPlanOperationAsync(resourceGroupName, name, operationId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='operationId'>
            /// Id of Server farm operation"&amp;gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmWithRichSku> GetWebHostingPlanOperationAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<ServerFarmWithRichSku> result = await operations.GetWebHostingPlanOperationWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='operationId'>
            /// Id of Server farm operation"&amp;gt;
            /// </param>
            public static ServerFarmWithRichSku GetServerFarmOperation(this IServerFarmsOperations operations, string resourceGroupName, string name, string operationId)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetServerFarmOperationAsync(resourceGroupName, name, operationId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='operationId'>
            /// Id of Server farm operation"&amp;gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmWithRichSku> GetServerFarmOperationAsync( this IServerFarmsOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<ServerFarmWithRichSku> result = await operations.GetServerFarmOperationWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Page<Site> GetServerFarmSitesNext(this IServerFarmsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetServerFarmSitesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Page<Site>> GetServerFarmSitesNextAsync( this IServerFarmsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Page<Site>> result = await operations.GetServerFarmSitesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Page<Site> GetWebHostingPlanSitesNext(this IServerFarmsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IServerFarmsOperations)s).GetWebHostingPlanSitesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Page<Site>> GetWebHostingPlanSitesNextAsync( this IServerFarmsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Page<Site>> result = await operations.GetWebHostingPlanSitesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

    }
}
