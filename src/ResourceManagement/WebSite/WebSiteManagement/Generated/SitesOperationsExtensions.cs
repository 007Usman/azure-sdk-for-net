// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class SitesOperationsExtensions
    {
            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            /// <param name='includeSiteTypes'>
            /// Types of apps included in the response
            /// </param>
            public static SiteCollection GetSites(this ISitesOperations operations, string resourceGroupName, string propertiesToInclude = default(string), string includeSiteTypes = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSitesAsync(resourceGroupName, propertiesToInclude, includeSiteTypes), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            /// <param name='includeSiteTypes'>
            /// Types of apps included in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCollection> GetSitesAsync( this ISitesOperations operations, string resourceGroupName, string propertiesToInclude = default(string), string includeSiteTypes = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteCollection> result = await operations.GetSitesWithHttpMessagesAsync(resourceGroupName, propertiesToInclude, includeSiteTypes, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            public static Site GetSite(this ISitesOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteAsync(resourceGroupName, name, propertiesToInclude), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> GetSiteAsync( this ISitesOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Site> result = await operations.GetSiteWithHttpMessagesAsync(resourceGroupName, name, propertiesToInclude, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static Site CreateOrUpdateSite(this ISitesOperations operations, string resourceGroupName, string name, Site siteEnvelope, string skipDnsRegistration = default(string), string skipCustomDomainVerification = default(string), string forceDnsRegistration = default(string), string ttlInSeconds = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> CreateOrUpdateSiteAsync( this ISitesOperations operations, string resourceGroupName, string name, Site siteEnvelope, string skipDnsRegistration = default(string), string skipCustomDomainVerification = default(string), string forceDnsRegistration = default(string), string ttlInSeconds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Site> result = await operations.CreateOrUpdateSiteWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static Site BeginCreateOrUpdateSite(this ISitesOperations operations, string resourceGroupName, string name, Site siteEnvelope, string skipDnsRegistration = default(string), string skipCustomDomainVerification = default(string), string forceDnsRegistration = default(string), string ttlInSeconds = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).BeginCreateOrUpdateSiteAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> BeginCreateOrUpdateSiteAsync( this ISitesOperations operations, string resourceGroupName, string name, Site siteEnvelope, string skipDnsRegistration = default(string), string skipCustomDomainVerification = default(string), string forceDnsRegistration = default(string), string ttlInSeconds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Site> result = await operations.BeginCreateOrUpdateSiteWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// If true and App Service Plan is empty after web app deletion, App Service
            /// Plan is also deleted
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            /// <param name='deleteAllSlots'>
            /// If true, all slots associated with web app are also deleted
            /// </param>
            public static object DeleteSite(this ISitesOperations operations, string resourceGroupName, string name, string deleteMetrics = default(string), string deleteEmptyServerFarm = default(string), string skipDnsRegistration = default(string), string deleteAllSlots = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DeleteSiteAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// If true and App Service Plan is empty after web app deletion, App Service
            /// Plan is also deleted
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            /// <param name='deleteAllSlots'>
            /// If true, all slots associated with web app are also deleted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSiteAsync( this ISitesOperations operations, string resourceGroupName, string name, string deleteMetrics = default(string), string deleteEmptyServerFarm = default(string), string skipDnsRegistration = default(string), string deleteAllSlots = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteSiteWithHttpMessagesAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            public static Site GetSiteSlot(this ISitesOperations operations, string resourceGroupName, string name, string slot, string propertiesToInclude = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotAsync(resourceGroupName, name, slot, propertiesToInclude), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> GetSiteSlotAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, string propertiesToInclude = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Site> result = await operations.GetSiteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, propertiesToInclude, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static Site CreateOrUpdateSiteSlot(this ISitesOperations operations, string resourceGroupName, string name, Site siteEnvelope, string slot, string skipDnsRegistration = default(string), string skipCustomDomainVerification = default(string), string forceDnsRegistration = default(string), string ttlInSeconds = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteSlotAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> CreateOrUpdateSiteSlotAsync( this ISitesOperations operations, string resourceGroupName, string name, Site siteEnvelope, string slot, string skipDnsRegistration = default(string), string skipCustomDomainVerification = default(string), string forceDnsRegistration = default(string), string ttlInSeconds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Site> result = await operations.CreateOrUpdateSiteSlotWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static Site BeginCreateOrUpdateSiteSlot(this ISitesOperations operations, string resourceGroupName, string name, Site siteEnvelope, string slot, string skipDnsRegistration = default(string), string skipCustomDomainVerification = default(string), string forceDnsRegistration = default(string), string ttlInSeconds = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).BeginCreateOrUpdateSiteSlotAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> BeginCreateOrUpdateSiteSlotAsync( this ISitesOperations operations, string resourceGroupName, string name, Site siteEnvelope, string slot, string skipDnsRegistration = default(string), string skipCustomDomainVerification = default(string), string forceDnsRegistration = default(string), string ttlInSeconds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Site> result = await operations.BeginCreateOrUpdateSiteSlotWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// If true and App Service Plan is empty after web app deletion, App Service
            /// Plan is also deleted
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            /// <param name='deleteAllSlots'>
            /// If true, all slots associated with web app are also deleted
            /// </param>
            public static object DeleteSiteSlot(this ISitesOperations operations, string resourceGroupName, string name, string slot, string deleteMetrics = default(string), string deleteEmptyServerFarm = default(string), string skipDnsRegistration = default(string), string deleteAllSlots = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DeleteSiteSlotAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// If true and App Service Plan is empty after web app deletion, App Service
            /// Plan is also deleted
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            /// <param name='deleteAllSlots'>
            /// If true, all slots associated with web app are also deleted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSiteSlotAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, string deleteMetrics = default(string), string deleteEmptyServerFarm = default(string), string skipDnsRegistration = default(string), string deleteAllSlots = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteSiteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='snapshot'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by call GetDeletedSites API.
            /// </param>
            public static object RecoverSite(this ISitesOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity snapshot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).RecoverSiteAsync(resourceGroupName, name, snapshot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='snapshot'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by call GetDeletedSites API.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RecoverSiteAsync( this ISitesOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity snapshot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.RecoverSiteWithHttpMessagesAsync(resourceGroupName, name, snapshot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='snapshot'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by call GetDeletedSites API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object RecoverSiteSlot(this ISitesOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity snapshot, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).RecoverSiteSlotAsync(resourceGroupName, name, snapshot, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='snapshot'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by call GetDeletedSites API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RecoverSiteSlotAsync( this ISitesOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity snapshot, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.RecoverSiteSlotWithHttpMessagesAsync(resourceGroupName, name, snapshot, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            /// <param name='includeSiteTypes'>
            /// Types of apps included in the response
            /// </param>
            public static DeletedSiteCollection GetDeletedSites(this ISitesOperations operations, string resourceGroupName, string propertiesToInclude = default(string), string includeSiteTypes = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetDeletedSitesAsync(resourceGroupName, propertiesToInclude, includeSiteTypes), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            /// <param name='includeSiteTypes'>
            /// Types of apps included in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedSiteCollection> GetDeletedSitesAsync( this ISitesOperations operations, string resourceGroupName, string propertiesToInclude = default(string), string includeSiteTypes = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<DeletedSiteCollection> result = await operations.GetDeletedSitesWithHttpMessagesAsync(resourceGroupName, propertiesToInclude, includeSiteTypes, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static SiteInstanceCollection GetSiteInstanceIdentifiers(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteInstanceIdentifiersAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteInstanceCollection> GetSiteInstanceIdentifiersAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteInstanceCollection> result = await operations.GetSiteInstanceIdentifiersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteInstanceCollection GetSiteSlotInstanceIdentifiers(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotInstanceIdentifiersAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteInstanceCollection> GetSiteSlotInstanceIdentifiersAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteInstanceCollection> result = await operations.GetSiteSlotInstanceIdentifiersWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static HostNameBindingCollection GetSiteHostNameBindings(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteHostNameBindingsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBindingCollection> GetSiteHostNameBindingsAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<HostNameBindingCollection> result = await operations.GetSiteHostNameBindingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static HostNameBindingCollection GetSiteSlotHostNameBindings(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotHostNameBindingsAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBindingCollection> GetSiteSlotHostNameBindingsAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<HostNameBindingCollection> result = await operations.GetSiteSlotHostNameBindingsWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            public static HostNameBinding GetSiteHostNameBinding(this ISitesOperations operations, string resourceGroupName, string name, string hostName)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteHostNameBindingAsync(resourceGroupName, name, hostName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBinding> GetSiteHostNameBindingAsync( this ISitesOperations operations, string resourceGroupName, string name, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<HostNameBinding> result = await operations.GetSiteHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='hostNameBinding'>
            /// Host name binding information
            /// </param>
            public static HostNameBinding CreateOrUpdateSiteHostNameBinding(this ISitesOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteHostNameBindingAsync(resourceGroupName, name, hostName, hostNameBinding), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='hostNameBinding'>
            /// Host name binding information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBinding> CreateOrUpdateSiteHostNameBindingAsync( this ISitesOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<HostNameBinding> result = await operations.CreateOrUpdateSiteHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, hostNameBinding, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            public static object DeleteSiteHostNameBinding(this ISitesOperations operations, string resourceGroupName, string name, string hostName)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DeleteSiteHostNameBindingAsync(resourceGroupName, name, hostName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSiteHostNameBindingAsync( this ISitesOperations operations, string resourceGroupName, string name, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteSiteHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            public static HostNameBinding GetSiteSlotHostNameBinding(this ISitesOperations operations, string resourceGroupName, string name, string slot, string hostName)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotHostNameBindingAsync(resourceGroupName, name, slot, hostName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBinding> GetSiteSlotHostNameBindingAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<HostNameBinding> result = await operations.GetSiteSlotHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='hostNameBinding'>
            /// Host name binding information
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static HostNameBinding CreateOrUpdateSiteSlotHostNameBinding(this ISitesOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteSlotHostNameBindingAsync(resourceGroupName, name, hostName, hostNameBinding, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='hostNameBinding'>
            /// Host name binding information
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBinding> CreateOrUpdateSiteSlotHostNameBindingAsync( this ISitesOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<HostNameBinding> result = await operations.CreateOrUpdateSiteSlotHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, hostNameBinding, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            public static object DeleteSiteSlotHostNameBinding(this ISitesOperations operations, string resourceGroupName, string name, string slot, string hostName)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DeleteSiteSlotHostNameBindingAsync(resourceGroupName, name, slot, hostName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSiteSlotHostNameBindingAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteSiteSlotHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static SiteConfig GetSiteConfig(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteConfigAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> GetSiteConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteConfig> result = await operations.GetSiteConfigWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            public static SiteConfig CreateOrUpdateSiteConfig(this ISitesOperations operations, string resourceGroupName, string name, SiteConfig siteConfig)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteConfigAsync(resourceGroupName, name, siteConfig), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> CreateOrUpdateSiteConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteConfig> result = await operations.CreateOrUpdateSiteConfigWithHttpMessagesAsync(resourceGroupName, name, siteConfig, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            public static SiteConfig UpdateSiteConfig(this ISitesOperations operations, string resourceGroupName, string name, SiteConfig siteConfig)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteConfigAsync(resourceGroupName, name, siteConfig), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> UpdateSiteConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteConfig> result = await operations.UpdateSiteConfigWithHttpMessagesAsync(resourceGroupName, name, siteConfig, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteConfig GetSiteSlotConfig(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotConfigAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> GetSiteSlotConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteConfig> result = await operations.GetSiteSlotConfigWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteConfig CreateOrUpdateSiteSlotConfig(this ISitesOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteSlotConfigAsync(resourceGroupName, name, siteConfig, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> CreateOrUpdateSiteSlotConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteConfig> result = await operations.CreateOrUpdateSiteSlotConfigWithHttpMessagesAsync(resourceGroupName, name, siteConfig, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteConfig UpdateSiteSlotConfig(this ISitesOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteSlotConfigAsync(resourceGroupName, name, siteConfig, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> UpdateSiteSlotConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteConfig> result = await operations.UpdateSiteSlotConfigWithHttpMessagesAsync(resourceGroupName, name, siteConfig, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static SiteSourceControl GetSiteSourceControl(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSourceControlAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> GetSiteSourceControlAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteSourceControl> result = await operations.GetSiteSourceControlWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            public static SiteSourceControl CreateOrUpdateSiteSourceControl(this ISitesOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteSourceControlAsync(resourceGroupName, name, siteSourceControl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> CreateOrUpdateSiteSourceControlAsync( this ISitesOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteSourceControl> result = await operations.CreateOrUpdateSiteSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static object DeleteSiteSourceControl(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DeleteSiteSourceControlAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSiteSourceControlAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteSiteSourceControlWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            public static SiteSourceControl UpdateSiteSourceControl(this ISitesOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteSourceControlAsync(resourceGroupName, name, siteSourceControl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> UpdateSiteSourceControlAsync( this ISitesOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteSourceControl> result = await operations.UpdateSiteSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteSourceControl GetSiteSlotSourceControl(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotSourceControlAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> GetSiteSlotSourceControlAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteSourceControl> result = await operations.GetSiteSlotSourceControlWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteSourceControl CreateOrUpdateSiteSlotSourceControl(this ISitesOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteSlotSourceControlAsync(resourceGroupName, name, siteSourceControl, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> CreateOrUpdateSiteSlotSourceControlAsync( this ISitesOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteSourceControl> result = await operations.CreateOrUpdateSiteSlotSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object DeleteSiteSlotSourceControl(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DeleteSiteSlotSourceControlAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSiteSlotSourceControlAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteSiteSlotSourceControlWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteSourceControl UpdateSiteSlotSourceControl(this ISitesOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteSlotSourceControlAsync(resourceGroupName, name, siteSourceControl, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> UpdateSiteSlotSourceControlAsync( this ISitesOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteSourceControl> result = await operations.UpdateSiteSlotSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static IDictionary<string, string> ListSiteAppSettings(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteAppSettingsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> ListSiteAppSettingsAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IDictionary<string, string>> result = await operations.ListSiteAppSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IDictionary<string, string> ListSiteSlotAppSettings(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteSlotAppSettingsAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> ListSiteSlotAppSettingsAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IDictionary<string, string>> result = await operations.ListSiteSlotAppSettingsWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of web app
            /// </param>
            public static IDictionary<string, string> UpdateSiteAppSettings(this ISitesOperations operations, string resourceGroupName, string name, IDictionary<string, string> appSettings)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteAppSettingsAsync(resourceGroupName, name, appSettings), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> UpdateSiteAppSettingsAsync( this ISitesOperations operations, string resourceGroupName, string name, IDictionary<string, string> appSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IDictionary<string, string>> result = await operations.UpdateSiteAppSettingsWithHttpMessagesAsync(resourceGroupName, name, appSettings, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IDictionary<string, string> UpdateSiteSlotAppSettings(this ISitesOperations operations, string resourceGroupName, string name, IDictionary<string, string> appSettings, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteSlotAppSettingsAsync(resourceGroupName, name, appSettings, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> UpdateSiteSlotAppSettingsAsync( this ISitesOperations operations, string resourceGroupName, string name, IDictionary<string, string> appSettings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IDictionary<string, string>> result = await operations.UpdateSiteSlotAppSettingsWithHttpMessagesAsync(resourceGroupName, name, appSettings, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static IDictionary<string, ConnStringValueTypePair> ListSiteConnectionStrings(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteConnectionStringsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, ConnStringValueTypePair>> ListSiteConnectionStringsAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IDictionary<string, ConnStringValueTypePair>> result = await operations.ListSiteConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IDictionary<string, ConnStringValueTypePair> ListSiteSlotConnectionStrings(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteSlotConnectionStringsAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, ConnStringValueTypePair>> ListSiteSlotConnectionStringsAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IDictionary<string, ConnStringValueTypePair>> result = await operations.ListSiteSlotConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings associated with web app
            /// </param>
            public static IDictionary<string, ConnStringValueTypePair> UpdateSiteConnectionStrings(this ISitesOperations operations, string resourceGroupName, string name, IDictionary<string, ConnStringValueTypePair> connectionStrings)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteConnectionStringsAsync(resourceGroupName, name, connectionStrings), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings associated with web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, ConnStringValueTypePair>> UpdateSiteConnectionStringsAsync( this ISitesOperations operations, string resourceGroupName, string name, IDictionary<string, ConnStringValueTypePair> connectionStrings, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IDictionary<string, ConnStringValueTypePair>> result = await operations.UpdateSiteConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, connectionStrings, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IDictionary<string, ConnStringValueTypePair> UpdateSiteSlotConnectionStrings(this ISitesOperations operations, string resourceGroupName, string name, IDictionary<string, ConnStringValueTypePair> connectionStrings, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteSlotConnectionStringsAsync(resourceGroupName, name, connectionStrings, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, ConnStringValueTypePair>> UpdateSiteSlotConnectionStringsAsync( this ISitesOperations operations, string resourceGroupName, string name, IDictionary<string, ConnStringValueTypePair> connectionStrings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IDictionary<string, ConnStringValueTypePair>> result = await operations.UpdateSiteSlotConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, connectionStrings, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static User ListSitePublishingCredentials(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSitePublishingCredentialsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> ListSitePublishingCredentialsAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<User> result = await operations.ListSitePublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static User BeginListSitePublishingCredentials(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).BeginListSitePublishingCredentialsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> BeginListSitePublishingCredentialsAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<User> result = await operations.BeginListSitePublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static User ListSiteSlotPublishingCredentials(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteSlotPublishingCredentialsAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> ListSiteSlotPublishingCredentialsAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<User> result = await operations.ListSiteSlotPublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static User BeginListSiteSlotPublishingCredentials(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).BeginListSiteSlotPublishingCredentialsAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> BeginListSiteSlotPublishingCredentialsAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<User> result = await operations.BeginListSiteSlotPublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static IDictionary<string, string> ListSiteMetadata(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteMetadataAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> ListSiteMetadataAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IDictionary<string, string>> result = await operations.ListSiteMetadataWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IDictionary<string, string> ListSiteSlotMetadata(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteSlotMetadataAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> ListSiteSlotMetadataAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IDictionary<string, string>> result = await operations.ListSiteSlotMetadataWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='metadata'>
            /// Meta data of web app
            /// </param>
            public static IDictionary<string, string> UpdateSiteMetadata(this ISitesOperations operations, string resourceGroupName, string name, IDictionary<string, string> metadata)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteMetadataAsync(resourceGroupName, name, metadata), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='metadata'>
            /// Meta data of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> UpdateSiteMetadataAsync( this ISitesOperations operations, string resourceGroupName, string name, IDictionary<string, string> metadata, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IDictionary<string, string>> result = await operations.UpdateSiteMetadataWithHttpMessagesAsync(resourceGroupName, name, metadata, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='metadata'>
            /// Meta data of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IDictionary<string, string> UpdateSiteSlotMetadata(this ISitesOperations operations, string resourceGroupName, string name, IDictionary<string, string> metadata, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteSlotMetadataAsync(resourceGroupName, name, metadata, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='metadata'>
            /// Meta data of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> UpdateSiteSlotMetadataAsync( this ISitesOperations operations, string resourceGroupName, string name, IDictionary<string, string> metadata, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IDictionary<string, string>> result = await operations.UpdateSiteSlotMetadataWithHttpMessagesAsync(resourceGroupName, name, metadata, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static SiteLogsConfig GetSiteLogsConfig(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteLogsConfigAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfig> GetSiteLogsConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteLogsConfig> result = await operations.GetSiteLogsConfigWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteLogsConfig'>
            /// Site logs configuration
            /// </param>
            public static SiteLogsConfig UpdateSiteLogsConfig(this ISitesOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteLogsConfigAsync(resourceGroupName, name, siteLogsConfig), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteLogsConfig'>
            /// Site logs configuration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfig> UpdateSiteLogsConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteLogsConfig> result = await operations.UpdateSiteLogsConfigWithHttpMessagesAsync(resourceGroupName, name, siteLogsConfig, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteLogsConfig GetSiteSlotLogsConfig(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotLogsConfigAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfig> GetSiteSlotLogsConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteLogsConfig> result = await operations.GetSiteSlotLogsConfigWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteLogsConfig'>
            /// Site logs configuration
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteLogsConfig UpdateSiteSlotLogsConfig(this ISitesOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteSlotLogsConfigAsync(resourceGroupName, name, siteLogsConfig, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteLogsConfig'>
            /// Site logs configuration
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfig> UpdateSiteSlotLogsConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteLogsConfig> result = await operations.UpdateSiteSlotLogsConfigWithHttpMessagesAsync(resourceGroupName, name, siteLogsConfig, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static object ListSitePremierAddOns(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSitePremierAddOnsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListSitePremierAddOnsAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.ListSitePremierAddOnsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='slot'>
            /// </param>
            public static object ListSiteSlotPremierAddOns(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteSlotPremierAddOnsAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='slot'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListSiteSlotPremierAddOnsAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.ListSiteSlotPremierAddOnsWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='premierAddOnName'>
            /// </param>
            public static object GetSitePremierAddOn(this ISitesOperations operations, string resourceGroupName, string name, string premierAddOnName)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSitePremierAddOnAsync(resourceGroupName, name, premierAddOnName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='premierAddOnName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSitePremierAddOnAsync( this ISitesOperations operations, string resourceGroupName, string name, string premierAddOnName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.GetSitePremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='premierAddOnName'>
            /// </param>
            /// <param name='premierAddOn'>
            /// </param>
            public static object AddSitePremierAddOn(this ISitesOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnRequest premierAddOn)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).AddSitePremierAddOnAsync(resourceGroupName, name, premierAddOnName, premierAddOn), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='premierAddOnName'>
            /// </param>
            /// <param name='premierAddOn'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddSitePremierAddOnAsync( this ISitesOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnRequest premierAddOn, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.AddSitePremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='premierAddOnName'>
            /// </param>
            public static object DeleteSitePremierAddOn(this ISitesOperations operations, string resourceGroupName, string name, string premierAddOnName)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DeleteSitePremierAddOnAsync(resourceGroupName, name, premierAddOnName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='premierAddOnName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSitePremierAddOnAsync( this ISitesOperations operations, string resourceGroupName, string name, string premierAddOnName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteSitePremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='premierAddOnName'>
            /// </param>
            /// <param name='slot'>
            /// </param>
            public static object GetSiteSlotPremierAddOn(this ISitesOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotPremierAddOnAsync(resourceGroupName, name, premierAddOnName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='premierAddOnName'>
            /// </param>
            /// <param name='slot'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSiteSlotPremierAddOnAsync( this ISitesOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.GetSiteSlotPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='premierAddOnName'>
            /// </param>
            /// <param name='premierAddOn'>
            /// </param>
            /// <param name='slot'>
            /// </param>
            public static object AddSiteSlotPremierAddOn(this ISitesOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnRequest premierAddOn, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).AddSiteSlotPremierAddOnAsync(resourceGroupName, name, premierAddOnName, premierAddOn, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='premierAddOnName'>
            /// </param>
            /// <param name='premierAddOn'>
            /// </param>
            /// <param name='slot'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddSiteSlotPremierAddOnAsync( this ISitesOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnRequest premierAddOn, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.AddSiteSlotPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='premierAddOnName'>
            /// </param>
            /// <param name='slot'>
            /// </param>
            public static object DeleteSiteSlotPremierAddOn(this ISitesOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DeleteSiteSlotPremierAddOnAsync(resourceGroupName, name, premierAddOnName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='premierAddOnName'>
            /// </param>
            /// <param name='slot'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSiteSlotPremierAddOnAsync( this ISitesOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteSiteSlotPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static BackupRequest GetSiteBackupConfiguration(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteBackupConfigurationAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> GetSiteBackupConfigurationAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<BackupRequest> result = await operations.GetSiteBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            public static BackupRequest UpdateSiteBackupConfiguration(this ISitesOperations operations, string resourceGroupName, string name, BackupRequest request)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteBackupConfigurationAsync(resourceGroupName, name, request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> UpdateSiteBackupConfigurationAsync( this ISitesOperations operations, string resourceGroupName, string name, BackupRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<BackupRequest> result = await operations.UpdateSiteBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static BackupRequest ListSiteBackupConfiguration(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteBackupConfigurationAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> ListSiteBackupConfigurationAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<BackupRequest> result = await operations.ListSiteBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupRequest GetSiteSlotBackupConfiguration(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotBackupConfigurationAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> GetSiteSlotBackupConfigurationAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<BackupRequest> result = await operations.GetSiteSlotBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupRequest UpdateSiteSlotBackupConfiguration(this ISitesOperations operations, string resourceGroupName, string name, BackupRequest request, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteSlotBackupConfigurationAsync(resourceGroupName, name, request, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> UpdateSiteSlotBackupConfigurationAsync( this ISitesOperations operations, string resourceGroupName, string name, BackupRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<BackupRequest> result = await operations.UpdateSiteSlotBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupRequest ListSiteSlotBackupConfiguration(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteSlotBackupConfigurationAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> ListSiteSlotBackupConfigurationAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<BackupRequest> result = await operations.ListSiteSlotBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            public static BackupItem BackupSite(this ISitesOperations operations, string resourceGroupName, string name, BackupRequest request)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).BackupSiteAsync(resourceGroupName, name, request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> BackupSiteAsync( this ISitesOperations operations, string resourceGroupName, string name, BackupRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<BackupItem> result = await operations.BackupSiteWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupItem BackupSiteSlot(this ISitesOperations operations, string resourceGroupName, string name, BackupRequest request, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).BackupSiteSlotAsync(resourceGroupName, name, request, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> BackupSiteSlotAsync( this ISitesOperations operations, string resourceGroupName, string name, BackupRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<BackupItem> result = await operations.BackupSiteSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static RestoreRequest DiscoverSiteSlotRestore(this ISitesOperations operations, string resourceGroupName, string name, RestoreRequest request, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DiscoverSiteSlotRestoreAsync(resourceGroupName, name, request, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreRequest> DiscoverSiteSlotRestoreAsync( this ISitesOperations operations, string resourceGroupName, string name, RestoreRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<RestoreRequest> result = await operations.DiscoverSiteSlotRestoreWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            public static RestoreRequest DiscoverSiteRestore(this ISitesOperations operations, string resourceGroupName, string name, RestoreRequest request)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DiscoverSiteRestoreAsync(resourceGroupName, name, request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreRequest> DiscoverSiteRestoreAsync( this ISitesOperations operations, string resourceGroupName, string name, RestoreRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<RestoreRequest> result = await operations.DiscoverSiteRestoreWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static BackupItemCollection ListSiteBackups(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteBackupsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItemCollection> ListSiteBackupsAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<BackupItemCollection> result = await operations.ListSiteBackupsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupItemCollection ListSiteSlotBackups(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteSlotBackupsAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItemCollection> ListSiteSlotBackupsAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<BackupItemCollection> result = await operations.ListSiteSlotBackupsWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            public static BackupItem GetSiteBackupStatus(this ISitesOperations operations, string resourceGroupName, string name, string backupId)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteBackupStatusAsync(resourceGroupName, name, backupId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> GetSiteBackupStatusAsync( this ISitesOperations operations, string resourceGroupName, string name, string backupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<BackupItem> result = await operations.GetSiteBackupStatusWithHttpMessagesAsync(resourceGroupName, name, backupId, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupItem GetSiteSlotBackupStatus(this ISitesOperations operations, string resourceGroupName, string name, string backupId, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotBackupStatusAsync(resourceGroupName, name, backupId, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> GetSiteSlotBackupStatusAsync( this ISitesOperations operations, string resourceGroupName, string name, string backupId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<BackupItem> result = await operations.GetSiteSlotBackupStatusWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='names'>
            /// Comma separated list of usage metrics
            /// </param>
            /// <param name='computeMode'>
            /// Deprecated
            /// </param>
            /// <param name='siteMode'>
            /// Deprecated
            /// </param>
            /// <param name='filter'>
            /// Return only usages specified in the filter. Filter is specified by using
            /// OData syntax. Example: $filter=name.value eq 'BytesSent' or name.value eq
            /// BytesReceived.
            /// </param>
            public static CsmUsageQuotaCollection GetSiteUsages(this ISitesOperations operations, string resourceGroupName, string name, string names = default(string), string computeMode = default(string), string siteMode = default(string), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteUsagesAsync(resourceGroupName, name, names, computeMode, siteMode, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='names'>
            /// Comma separated list of usage metrics
            /// </param>
            /// <param name='computeMode'>
            /// Deprecated
            /// </param>
            /// <param name='siteMode'>
            /// Deprecated
            /// </param>
            /// <param name='filter'>
            /// Return only usages specified in the filter. Filter is specified by using
            /// OData syntax. Example: $filter=name.value eq 'BytesSent' or name.value eq
            /// BytesReceived.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CsmUsageQuotaCollection> GetSiteUsagesAsync( this ISitesOperations operations, string resourceGroupName, string name, string names = default(string), string computeMode = default(string), string siteMode = default(string), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<CsmUsageQuotaCollection> result = await operations.GetSiteUsagesWithHttpMessagesAsync(resourceGroupName, name, names, computeMode, siteMode, filter, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='names'>
            /// Comma separated list of usage metrics
            /// </param>
            /// <param name='computeMode'>
            /// Deprecated
            /// </param>
            /// <param name='siteMode'>
            /// Deprecated
            /// </param>
            /// <param name='filter'>
            /// Return only usages specified in the filter. Filter is specified by using
            /// OData syntax. Example: $filter=name.value eq 'BytesSent' or name.value eq
            /// BytesReceived.
            /// </param>
            public static CsmUsageQuotaCollection GetSiteSlotUsages(this ISitesOperations operations, string resourceGroupName, string name, string slot, string names = default(string), string computeMode = default(string), string siteMode = default(string), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotUsagesAsync(resourceGroupName, name, slot, names, computeMode, siteMode, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='names'>
            /// Comma separated list of usage metrics
            /// </param>
            /// <param name='computeMode'>
            /// Deprecated
            /// </param>
            /// <param name='siteMode'>
            /// Deprecated
            /// </param>
            /// <param name='filter'>
            /// Return only usages specified in the filter. Filter is specified by using
            /// OData syntax. Example: $filter=name.value eq 'BytesSent' or name.value eq
            /// BytesReceived.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CsmUsageQuotaCollection> GetSiteSlotUsagesAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, string names = default(string), string computeMode = default(string), string siteMode = default(string), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<CsmUsageQuotaCollection> result = await operations.GetSiteSlotUsagesWithHttpMessagesAsync(resourceGroupName, name, slot, names, computeMode, siteMode, filter, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='names'>
            /// Names of metrics to inclued in response
            /// </param>
            /// <param name='startTime'>
            /// Start time of metric
            /// </param>
            /// <param name='endTime'>
            /// End time of metric
            /// </param>
            /// <param name='timeGrain'>
            /// Granularity of time
            /// </param>
            /// <param name='details'>
            /// If true, metric details are included in response
            /// </param>
            /// <param name='slotView'>
            /// If true, view of slots is included in response
            /// </param>
            public static MetricResponseCollection GetSiteMetrics(this ISitesOperations operations, string resourceGroupName, string name, string names = default(string), string startTime = default(string), string endTime = default(string), string timeGrain = default(string), bool? details = default(bool?), bool? slotView = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteMetricsAsync(resourceGroupName, name, names, startTime, endTime, timeGrain, details, slotView), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='names'>
            /// Names of metrics to inclued in response
            /// </param>
            /// <param name='startTime'>
            /// Start time of metric
            /// </param>
            /// <param name='endTime'>
            /// End time of metric
            /// </param>
            /// <param name='timeGrain'>
            /// Granularity of time
            /// </param>
            /// <param name='details'>
            /// If true, metric details are included in response
            /// </param>
            /// <param name='slotView'>
            /// If true, view of slots is included in response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricResponseCollection> GetSiteMetricsAsync( this ISitesOperations operations, string resourceGroupName, string name, string names = default(string), string startTime = default(string), string endTime = default(string), string timeGrain = default(string), bool? details = default(bool?), bool? slotView = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<MetricResponseCollection> result = await operations.GetSiteMetricsWithHttpMessagesAsync(resourceGroupName, name, names, startTime, endTime, timeGrain, details, slotView, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='names'>
            /// Names of metrics to inclued in response
            /// </param>
            /// <param name='startTime'>
            /// Start time of metric
            /// </param>
            /// <param name='endTime'>
            /// End time of metric
            /// </param>
            /// <param name='timeGrain'>
            /// Granularity of time
            /// </param>
            /// <param name='details'>
            /// If true, metric details are included in response
            /// </param>
            /// <param name='slotView'>
            /// If true, view of slots is included in response
            /// </param>
            public static MetricResponseCollection GetSiteSlotMetrics(this ISitesOperations operations, string resourceGroupName, string name, string slot, string names = default(string), string startTime = default(string), string endTime = default(string), string timeGrain = default(string), bool? details = default(bool?), bool? slotView = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotMetricsAsync(resourceGroupName, name, slot, names, startTime, endTime, timeGrain, details, slotView), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='names'>
            /// Names of metrics to inclued in response
            /// </param>
            /// <param name='startTime'>
            /// Start time of metric
            /// </param>
            /// <param name='endTime'>
            /// End time of metric
            /// </param>
            /// <param name='timeGrain'>
            /// Granularity of time
            /// </param>
            /// <param name='details'>
            /// If true, metric details are included in response
            /// </param>
            /// <param name='slotView'>
            /// If true, view of slots is included in response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricResponseCollection> GetSiteSlotMetricsAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, string names = default(string), string startTime = default(string), string endTime = default(string), string timeGrain = default(string), bool? details = default(bool?), bool? slotView = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<MetricResponseCollection> result = await operations.GetSiteSlotMetricsWithHttpMessagesAsync(resourceGroupName, name, slot, names, startTime, endTime, timeGrain, details, slotView, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static MetricDefinitionCollection GetSiteMetricDefinitions(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteMetricDefinitionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricDefinitionCollection> GetSiteMetricDefinitionsAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<MetricDefinitionCollection> result = await operations.GetSiteMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static MetricDefinitionCollection GetSiteSlotMetricDefinitions(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotMetricDefinitionsAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricDefinitionCollection> GetSiteSlotMetricDefinitionsAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<MetricDefinitionCollection> result = await operations.GetSiteSlotMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Specifies options for publishing profile. Pass
            /// CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object ListSiteSlotPublishingProfileXml(this ISitesOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions options, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteSlotPublishingProfileXmlAsync(resourceGroupName, name, options, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Specifies options for publishing profile. Pass
            /// CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListSiteSlotPublishingProfileXmlAsync( this ISitesOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions options, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.ListSiteSlotPublishingProfileXmlWithHttpMessagesAsync(resourceGroupName, name, options, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Specifies options for publishing profile. Pass
            /// CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
            /// </param>
            public static object ListSitePublishingProfileXml(this ISitesOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions options)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSitePublishingProfileXmlAsync(resourceGroupName, name, options), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Specifies options for publishing profile. Pass
            /// CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListSitePublishingProfileXmlAsync( this ISitesOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions options, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.ListSitePublishingProfileXmlWithHttpMessagesAsync(resourceGroupName, name, options, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the app if
            /// necessary. Hard restart always restarts and reprovisions the app
            /// </param>
            /// <param name='synchronous'>
            /// If true then the API will block until the app has been restarted
            /// </param>
            public static object RestartSiteSlot(this ISitesOperations operations, string resourceGroupName, string name, string slot, bool? softRestart = default(bool?), bool? synchronous = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).RestartSiteSlotAsync(resourceGroupName, name, slot, softRestart, synchronous), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the app if
            /// necessary. Hard restart always restarts and reprovisions the app
            /// </param>
            /// <param name='synchronous'>
            /// If true then the API will block until the app has been restarted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RestartSiteSlotAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, bool? softRestart = default(bool?), bool? synchronous = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.RestartSiteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, softRestart, synchronous, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the app if
            /// necessary. Hard restart always restarts and reprovisions the app
            /// </param>
            /// <param name='synchronous'>
            /// If true then the API will block until the app has been restarted
            /// </param>
            public static object RestartSite(this ISitesOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), bool? synchronous = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).RestartSiteAsync(resourceGroupName, name, softRestart, synchronous), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the app if
            /// necessary. Hard restart always restarts and reprovisions the app
            /// </param>
            /// <param name='synchronous'>
            /// If true then the API will block until the app has been restarted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RestartSiteAsync( this ISitesOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), bool? synchronous = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.RestartSiteWithHttpMessagesAsync(resourceGroupName, name, softRestart, synchronous, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object StartSiteSlot(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).StartSiteSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StartSiteSlotAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.StartSiteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static object StartSite(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).StartSiteAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StartSiteAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.StartSiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static object StopSite(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).StopSiteAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StopSiteAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.StopSiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object StopSiteSlot(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).StopSiteSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StopSiteSlotAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.StopSiteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static object SyncSiteRepository(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).SyncSiteRepositoryAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SyncSiteRepositoryAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.SyncSiteRepositoryWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='slot'>
            /// </param>
            public static object SyncSiteSlotRepository(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).SyncSiteSlotRepositoryAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='slot'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SyncSiteSlotRepositoryAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.SyncSiteSlotRepositoryWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static object GenerateNewSitePublishingPassword(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GenerateNewSitePublishingPasswordAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GenerateNewSitePublishingPasswordAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.GenerateNewSitePublishingPasswordWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object GenerateNewSiteSlotPublishingPassword(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GenerateNewSiteSlotPublishingPasswordAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GenerateNewSiteSlotPublishingPasswordAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.GenerateNewSiteSlotPublishingPasswordWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static RelayServiceConnectionEntity GetSiteSlotRelayServiceConnection(this ISitesOperations operations, string resourceGroupName, string name, string entityName, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotRelayServiceConnectionAsync(resourceGroupName, name, entityName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> GetSiteSlotRelayServiceConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string entityName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<RelayServiceConnectionEntity> result = await operations.GetSiteSlotRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static RelayServiceConnectionEntity CreateOrUpdateSiteSlotRelayServiceConnection(this ISitesOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteSlotRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> CreateOrUpdateSiteSlotRelayServiceConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<RelayServiceConnectionEntity> result = await operations.CreateOrUpdateSiteSlotRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static object DeleteSiteSlotRelayServiceConnection(this ISitesOperations operations, string resourceGroupName, string name, string entityName, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DeleteSiteSlotRelayServiceConnectionAsync(resourceGroupName, name, entityName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSiteSlotRelayServiceConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string entityName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteSiteSlotRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static RelayServiceConnectionEntity UpdateSiteSlotRelayServiceConnection(this ISitesOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteSlotRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> UpdateSiteSlotRelayServiceConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<RelayServiceConnectionEntity> result = await operations.UpdateSiteSlotRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            public static RelayServiceConnectionEntity GetSiteRelayServiceConnection(this ISitesOperations operations, string resourceGroupName, string name, string entityName)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteRelayServiceConnectionAsync(resourceGroupName, name, entityName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> GetSiteRelayServiceConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string entityName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<RelayServiceConnectionEntity> result = await operations.GetSiteRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            public static RelayServiceConnectionEntity CreateOrUpdateSiteRelayServiceConnection(this ISitesOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> CreateOrUpdateSiteRelayServiceConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<RelayServiceConnectionEntity> result = await operations.CreateOrUpdateSiteRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            public static object DeleteSiteRelayServiceConnection(this ISitesOperations operations, string resourceGroupName, string name, string entityName)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DeleteSiteRelayServiceConnectionAsync(resourceGroupName, name, entityName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSiteRelayServiceConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string entityName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteSiteRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            public static RelayServiceConnectionEntity UpdateSiteRelayServiceConnection(this ISitesOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> UpdateSiteRelayServiceConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<RelayServiceConnectionEntity> result = await operations.UpdateSiteRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static RelayServiceConnectionEntity ListSiteSlotRelayServiceConnections(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteSlotRelayServiceConnectionsAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> ListSiteSlotRelayServiceConnectionsAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<RelayServiceConnectionEntity> result = await operations.ListSiteSlotRelayServiceConnectionsWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            public static RelayServiceConnectionEntity ListSiteRelayServiceConnections(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ListSiteRelayServiceConnectionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> ListSiteRelayServiceConnectionsAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<RelayServiceConnectionEntity> result = await operations.ListSiteRelayServiceConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            public static object GetSiteVnetGateway(this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteVnetGatewayAsync(resourceGroupName, name, vnetName, gatewayName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSiteVnetGatewayAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.GetSiteVnetGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            public static VnetGateway CreateOrUpdateSiteVNETConnectionGateway(this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteVNETConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> CreateOrUpdateSiteVNETConnectionGatewayAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetGateway> result = await operations.CreateOrUpdateSiteVNETConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            public static VnetGateway UpdateSiteVNETConnectionGateway(this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteVNETConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> UpdateSiteVNETConnectionGatewayAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetGateway> result = await operations.UpdateSiteVNETConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static object GetSiteSlotVnetGateway(this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotVnetGatewayAsync(resourceGroupName, name, vnetName, gatewayName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSiteSlotVnetGatewayAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.GetSiteSlotVnetGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static VnetGateway CreateOrUpdateSiteSlotVNETConnectionGateway(this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteSlotVNETConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> CreateOrUpdateSiteSlotVNETConnectionGatewayAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetGateway> result = await operations.CreateOrUpdateSiteSlotVNETConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static VnetGateway UpdateSiteSlotVNETConnectionGateway(this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteSlotVNETConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> UpdateSiteSlotVNETConnectionGatewayAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetGateway> result = await operations.UpdateSiteSlotVNETConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            public static VnetInfo GetSiteVNETConnection(this ISitesOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteVNETConnectionAsync(resourceGroupName, name, vnetName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> GetSiteVNETConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetInfo> result = await operations.GetSiteVNETConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            public static VnetInfo CreateOrUpdateSiteVNETConnection(this ISitesOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteVNETConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> CreateOrUpdateSiteVNETConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetInfo> result = await operations.CreateOrUpdateSiteVNETConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            public static object DeleteSiteVNETConnection(this ISitesOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DeleteSiteVNETConnectionAsync(resourceGroupName, name, vnetName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSiteVNETConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteSiteVNETConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            public static VnetInfo UpdateSiteVNETConnection(this ISitesOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteVNETConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> UpdateSiteVNETConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetInfo> result = await operations.UpdateSiteVNETConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static VnetInfo GetSiteSlotVNETConnection(this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotVNETConnectionAsync(resourceGroupName, name, vnetName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> GetSiteSlotVNETConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetInfo> result = await operations.GetSiteSlotVNETConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static VnetInfo CreateOrUpdateSiteSlotVNETConnection(this ISitesOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).CreateOrUpdateSiteSlotVNETConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> CreateOrUpdateSiteSlotVNETConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetInfo> result = await operations.CreateOrUpdateSiteSlotVNETConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static object DeleteSiteSlotVNETConnection(this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).DeleteSiteSlotVNETConnectionAsync(resourceGroupName, name, vnetName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSiteSlotVNETConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.DeleteSiteSlotVNETConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static VnetInfo UpdateSiteSlotVNETConnection(this ISitesOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSiteSlotVNETConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> UpdateSiteSlotVNETConnectionAsync( this ISitesOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<VnetInfo> result = await operations.UpdateSiteSlotVNETConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            public static IList<VnetInfo> GetSiteVNETConnections(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteVNETConnectionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetInfo>> GetSiteVNETConnectionsAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IList<VnetInfo>> result = await operations.GetSiteVNETConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static IList<VnetInfo> GetSiteSlotVNETConnections(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotVNETConnectionsAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetInfo>> GetSiteSlotVNETConnectionsAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IList<VnetInfo>> result = await operations.GetSiteSlotVNETConnectionsWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='operationId'>
            /// Id of an operation
            /// </param>
            public static object GetSiteOperation(this ISitesOperations operations, string resourceGroupName, string name, string operationId)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteOperationAsync(resourceGroupName, name, operationId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='operationId'>
            /// Id of an operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSiteOperationAsync( this ISitesOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.GetSiteOperationWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='operationId'>
            /// Id of an operation
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object GetSiteSlotOperation(this ISitesOperations operations, string resourceGroupName, string name, string operationId, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotOperationAsync(resourceGroupName, name, operationId, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='operationId'>
            /// Id of an operation
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSiteSlotOperationAsync( this ISitesOperations operations, string resourceGroupName, string name, string operationId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.GetSiteSlotOperationWithHttpMessagesAsync(resourceGroupName, name, operationId, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            public static object SwapSlotWithProduction(this ISitesOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).SwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SwapSlotWithProductionAsync( this ISitesOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.SwapSlotWithProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='slot'>
            /// Name of source slot for the swap
            /// </param>
            public static object SwapSlots(this ISitesOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).SwapSlotsAsync(resourceGroupName, name, slotSwapEntity, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='slot'>
            /// Name of source slot for the swap
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SwapSlotsAsync( this ISitesOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.SwapSlotsWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            public static SlotDifferenceCollection GetSlotsDifferencesFromProduction(this ISitesOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSlotsDifferencesFromProductionAsync(resourceGroupName, name, slotSwapEntity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SlotDifferenceCollection> GetSlotsDifferencesFromProductionAsync( this ISitesOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SlotDifferenceCollection> result = await operations.GetSlotsDifferencesFromProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot
            /// </param>
            public static SlotDifferenceCollection GetSlotsDifferences(this ISitesOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSlotsDifferencesAsync(resourceGroupName, name, slotSwapEntity, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SlotDifferenceCollection> GetSlotsDifferencesAsync( this ISitesOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SlotDifferenceCollection> result = await operations.GetSlotsDifferencesWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name. Settings from that slot
            /// will be applied on the source slot
            /// </param>
            public static object ApplySlotConfigToProduction(this ISitesOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ApplySlotConfigToProductionAsync(resourceGroupName, name, slotSwapEntity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name. Settings from that slot
            /// will be applied on the source slot
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApplySlotConfigToProductionAsync( this ISitesOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.ApplySlotConfigToProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name. Settings from that slot
            /// will be applied on the source slot
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. Settings from the target slot will be applied
            /// onto this slot
            /// </param>
            public static object ApplySlotConfig(this ISitesOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ApplySlotConfigAsync(resourceGroupName, name, slotSwapEntity, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name. Settings from that slot
            /// will be applied on the source slot
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. Settings from the target slot will be applied
            /// onto this slot
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApplySlotConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.ApplySlotConfigWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object ResetSlotConfig(this ISitesOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ResetSlotConfigAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResetSlotConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.ResetSlotConfigWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static object ResetProductionSlotConfig(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).ResetProductionSlotConfigAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResetProductionSlotConfigAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<object> result = await operations.ResetProductionSlotConfigWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static SlotConfigNames GetSlotConfigNames(this ISitesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSlotConfigNamesAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SlotConfigNames> GetSlotConfigNamesAsync( this ISitesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SlotConfigNames> result = await operations.GetSlotConfigNamesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotConfigNames'>
            /// Request body containing the names of application settings and connection
            /// strings
            /// </param>
            public static SlotConfigNames UpdateSlotConfigNames(this ISitesOperations operations, string resourceGroupName, string name, SlotConfigNames slotConfigNames)
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).UpdateSlotConfigNamesAsync(resourceGroupName, name, slotConfigNames), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotConfigNames'>
            /// Request body containing the names of application settings and connection
            /// strings
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SlotConfigNames> UpdateSlotConfigNamesAsync( this ISitesOperations operations, string resourceGroupName, string name, SlotConfigNames slotConfigNames, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SlotConfigNames> result = await operations.UpdateSlotConfigNamesWithHttpMessagesAsync(resourceGroupName, name, slotConfigNames, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='propertiesToInclude'>
            /// List of app properties to include in the response
            /// </param>
            public static SiteCollection GetSiteSlots(this ISitesOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string))
            {
                return Task.Factory.StartNew(s => ((ISitesOperations)s).GetSiteSlotsAsync(resourceGroupName, name, propertiesToInclude), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='propertiesToInclude'>
            /// List of app properties to include in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCollection> GetSiteSlotsAsync( this ISitesOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SiteCollection> result = await operations.GetSiteSlotsWithHttpMessagesAsync(resourceGroupName, name, propertiesToInclude, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

    }
}
