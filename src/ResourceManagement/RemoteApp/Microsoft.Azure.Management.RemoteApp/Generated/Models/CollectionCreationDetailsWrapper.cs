// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RemoteApp.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Details of collection creation operation results.
    /// </summary>
    public partial class CollectionCreationDetailsWrapper : Resource
    {
        /// <summary>
        /// Initializes a new instance of the CollectionCreationDetailsWrapper
        /// class.
        /// </summary>
        public CollectionCreationDetailsWrapper() { }

        /// <summary>
        /// Initializes a new instance of the CollectionCreationDetailsWrapper
        /// class.
        /// </summary>
        public CollectionCreationDetailsWrapper(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string etag = default(string), string nextLink = default(string), string collectionName = default(string), string description = default(string), string templateImageName = default(string), string sourceImageSasUri = default(string), string vnetName = default(string), string virtualNetworkId = default(string), ActiveDirectoryConfig adInfo = default(ActiveDirectoryConfig), string billingPlanName = default(string), string customRdpProperty = default(string), bool? readyForPublishing = default(bool?), CollectionMode? mode = default(CollectionMode?), int? waitBeforeShutdownInMinutes = default(int?), string collectionLocation = default(string), ApplicationDetailsList publishedApplications = default(ApplicationDetailsList), SecurityPrincipalList allowedPrincipals = default(SecurityPrincipalList), IList<string> dnsServers = default(IList<string>), string subnetName = default(string), bool? notDomainJoined = default(bool?), string resourceGroupName = default(string))
            : base(location, id, name, type, tags)
        {
            Etag = etag;
            NextLink = nextLink;
            CollectionName = collectionName;
            Description = description;
            TemplateImageName = templateImageName;
            SourceImageSasUri = sourceImageSasUri;
            VnetName = vnetName;
            VirtualNetworkId = virtualNetworkId;
            AdInfo = adInfo;
            BillingPlanName = billingPlanName;
            CustomRdpProperty = customRdpProperty;
            ReadyForPublishing = readyForPublishing;
            Mode = mode;
            WaitBeforeShutdownInMinutes = waitBeforeShutdownInMinutes;
            CollectionLocation = collectionLocation;
            PublishedApplications = publishedApplications;
            AllowedPrincipals = allowedPrincipals;
            DnsServers = dnsServers;
            SubnetName = subnetName;
            NotDomainJoined = notDomainJoined;
            ResourceGroupName = resourceGroupName;
        }

        /// <summary>
        /// The etag of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

        /// <summary>
        /// The URL for requesting next page of resources.
        /// </summary>
        [JsonProperty(PropertyName = "nextLink")]
        public string NextLink { get; set; }

        /// <summary>
        /// The collection's name
        /// </summary>
        [JsonProperty(PropertyName = "properties.collectionName")]
        public string CollectionName { get; set; }

        /// <summary>
        /// A description for the collection
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// The name of the template image for the collection
        /// </summary>
        [JsonProperty(PropertyName = "properties.templateImageName")]
        public string TemplateImageName { get; set; }

        /// <summary>
        /// SAS URI for an OS image in the VM library
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceImageSasUri")]
        public string SourceImageSasUri { get; set; }

        /// <summary>
        /// The name of the Vnet for the collection
        /// </summary>
        [JsonProperty(PropertyName = "properties.vnetName")]
        public string VnetName { get; set; }

        /// <summary>
        /// The ID of the Vnet for the collection
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualNetworkId")]
        public string VirtualNetworkId { get; set; }

        /// <summary>
        /// The account subscriptionId
        /// </summary>
        [JsonProperty(PropertyName = "properties.adInfo")]
        public ActiveDirectoryConfig AdInfo { get; set; }

        /// <summary>
        /// The plan name associated with this collection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.billingPlanName")]
        public string BillingPlanName { get; set; }

        /// <summary>
        /// Optional customer-defined RDP properties of the collection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customRdpProperty")]
        public string CustomRdpProperty { get; set; }

        /// <summary>
        /// A flag denoting if this collection is ready for publishing
        /// operations.
        /// </summary>
        [JsonProperty(PropertyName = "properties.readyForPublishing")]
        public bool? ReadyForPublishing { get; set; }

        /// <summary>
        /// The collection mode. Possible values for this property include:
        /// 'Unassigned', 'Apps', 'Desktop'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.mode")]
        public CollectionMode? Mode { get; set; }

        /// <summary>
        /// The amount of time to wait, in minutes, before forcing logoff.
        /// </summary>
        [JsonProperty(PropertyName = "properties.waitBeforeShutdownInMinutes")]
        public int? WaitBeforeShutdownInMinutes { get; set; }

        /// <summary>
        /// The home location for the account
        /// </summary>
        [JsonProperty(PropertyName = "properties.collectionLocation")]
        public string CollectionLocation { get; set; }

        /// <summary>
        /// A list of details of the published applications
        /// </summary>
        [JsonProperty(PropertyName = "properties.publishedApplications")]
        public ApplicationDetailsList PublishedApplications { get; set; }

        /// <summary>
        /// A list of allowed security principals
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowedPrincipals")]
        public SecurityPrincipalList AllowedPrincipals { get; set; }

        /// <summary>
        /// List of the DNS Servers.
        /// </summary>
        [JsonProperty(PropertyName = "properties.DnsServers")]
        public IList<string> DnsServers { get; set; }

        /// <summary>
        /// The subnet name of the customer created Azure VNet.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subnetName")]
        public string SubnetName { get; set; }

        /// <summary>
        /// True if the collection is domain joined, false otherwise
        /// </summary>
        [JsonProperty(PropertyName = "properties.notDomainJoined")]
        public bool? NotDomainJoined { get; set; }

        /// <summary>
        /// The name of the resource group the collection is in
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceGroupName")]
        public string ResourceGroupName { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
