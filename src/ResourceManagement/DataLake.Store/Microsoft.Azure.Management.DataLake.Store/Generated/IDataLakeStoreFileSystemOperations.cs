// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Store
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// DataLakeStoreFileSystemOperations operations.
    /// </summary>
    public partial interface IDataLakeStoreFileSystemOperations
    {
        /// <summary>
        /// Appends to the file specified. This method supports multiple
        /// concurrent appends to the file. NOTE: that concurrent append and
        /// serial append CANNOT be used interchangeably. Once a file has
        /// been appended to using either one, it can only be appended to
        /// using that type of append.
        /// </summary>
        /// <param name='accountName'>
        /// The name of the data lake account that the file lives in.
        /// </param>
        /// <param name='filePath'>
        /// The path to the file to append to using concurrent append.
        /// </param>
        /// <param name='streamContents'>
        /// The file contents to include when appending to the file.
        /// </param>
        /// <param name='op'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> ConcurrentAppendWithHttpMessagesAsync(string accountName, string filePath, byte[] streamContents, string op = "concurrentappend", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Checks if the specified access is available at the given path.
        /// </summary>
        /// <param name='accountName'>
        /// The name of the account to use
        /// </param>
        /// <param name='path'>
        /// The path to the file or folder to check access for.
        /// </param>
        /// <param name='op'>
        /// </param>
        /// <param name='fsaction'>
        /// File system operation read/write/execute in string form, matching
        /// regex pattern '[rwx-]{3}'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> CheckAccessWithHttpMessagesAsync(string accountName, string path, string op = "CHECKACCESS", string fsaction = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a directory.
        /// </summary>
        /// <param name='accountName'>
        /// The name of the account to use
        /// </param>
        /// <param name='path'>
        /// The path to the directory to create.
        /// </param>
        /// <param name='op'>
        /// </param>
        /// <param name='permission'>
        /// The optional permissions to set on the directories
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<FileOperationResultResult>> MkdirsWithHttpMessagesAsync(string accountName, string path, string op = "MKDIRS", string permission = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Concatenates the list of files into the target file.
        /// </summary>
        /// <param name='accountName'>
        /// The name of the account to use
        /// </param>
        /// <param name='destinationPath'>
        /// The path to the destination file resulting from the concatenation.
        /// </param>
        /// <param name='op'>
        /// </param>
        /// <param name='sources'>
        /// A list of comma seperated absolute FileSystem paths without scheme
        /// and authority
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> ConcatWithHttpMessagesAsync(string accountName, string destinationPath, string op = "CONCAT", string sources = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Directly appends to a file with the specified content, without
        /// requiring a redirect. This API is NOT webhdfs compliant. It
        /// should be used only by tools that do not rely on webhdfs
        /// interoperability.
        /// </summary>
        /// <param name='accountName'>
        /// The name of the Data Lake Store account to append to the file in
        /// </param>
        /// <param name='filePath'>
        /// The path to the file to append to.
        /// </param>
        /// <param name='streamContents'>
        /// The file contents to include when appending to the file.
        /// </param>
        /// <param name='op'>
        /// </param>
        /// <param name='buffersize'>
        /// The optional buffer size to use when appending data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<FileCreateOpenAndAppendResult>> DirectAppendWithHttpMessagesAsync(string accountName, string filePath, byte[] streamContents, string op = "APPEND", long? buffersize = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Removes the existing ACL on a file or folder.
        /// </summary>
        /// <param name='accountName'>
        /// The name of the account to use
        /// </param>
        /// <param name='filePath'>
        /// The path to the directory or file to remove ACL on.
        /// </param>
        /// <param name='op'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> RemoveAclWithHttpMessagesAsync(string accountName, string filePath, string op = "REMOVEACL", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets ACL entries on a file or folder.
        /// </summary>
        /// <param name='accountName'>
        /// The name of the account to use
        /// </param>
        /// <param name='filePath'>
        /// The path to the directory or file to get ACLs on.
        /// </param>
        /// <param name='op'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<AclStatusResult>> GetAclStatusWithHttpMessagesAsync(string accountName, string filePath, string op = "GETACLSTATUS", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes the requested file or folder, optionally recursively.
        /// </summary>
        /// <param name='accountName'>
        /// The name of the account to use
        /// </param>
        /// <param name='filePath'>
        /// The path to the file or folder to delete.
        /// </param>
        /// <param name='op'>
        /// </param>
        /// <param name='recursive'>
        /// The optional switch indicating if the delete should be recursive
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<FileOperationResultResult>> DeleteWithHttpMessagesAsync(string accountName, string filePath, string op = "DELETE", bool? recursive = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Appends to the file specified in the link that was returned from
        /// BeginAppend.
        /// </summary>
        /// <param name='fileAppendRequestLink'>
        /// The link to the file to append to including all required
        /// parameters.
        /// </param>
        /// <param name='streamContents'>
        /// The file contents to include when appending to the file.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> AppendWithHttpMessagesAsync(string fileAppendRequestLink, byte[] streamContents, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the access or modification time on a file or folder.
        /// </summary>
        /// <param name='accountName'>
        /// The name of the account to use
        /// </param>
        /// <param name='sourcePath'>
        /// The path to the directory or file to set permissions on.
        /// </param>
        /// <param name='op'>
        /// </param>
        /// <param name='modificationtime'>
        /// The modification time of a file/directory. If -1 remains unchanged
        /// </param>
        /// <param name='accesstime'>
        /// The access time of a file/directory. If -1 remains unchanged
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> SetTimesWithHttpMessagesAsync(string accountName, string sourcePath, string op = "SETTIMES", long? modificationtime = default(long?), long? accesstime = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the home directory for the specified account.
        /// </summary>
        /// <param name='accountName'>
        /// The name of the account to use
        /// </param>
        /// <param name='op'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<HomeDirectoryResult>> GetHomeDirectoryWithHttpMessagesAsync(string accountName, string op = "GETHOMEDIRECTORY", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates the file specified in the link that was returned from
        /// BeginCreate.
        /// </summary>
        /// <param name='fileCreateRequestLink'>
        /// The link to the file to create including all required parameters.
        /// </param>
        /// <param name='streamContents'>
        /// The file contents to include when creating the file. This
        /// parameter is required, however it can be an empty stream. Just
        /// not null.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> CreateWithHttpMessagesAsync(string fileCreateRequestLink, byte[] streamContents, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the data associated with the file handle requested.
        /// </summary>
        /// <param name='fileOpenRequestLink'>
        /// The link to the file to open including all required parameters.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<System.IO.Stream>> OpenWithHttpMessagesAsync(string fileOpenRequestLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
