// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Store
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class FileSystemOperationsExtensions
    {
            /// <summary>
            /// Appends to the file specified. This method supports multiple concurrent
            /// appends to the file. NOTE: that concurrent append and serial append
            /// CANNOT be used interchangeably. Once a file has been appended to using
            /// either one, it can only be appended to using that type of append.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filePath'>
            /// The path to the file to append to using concurrent append.
            /// </param>
            /// <param name='accountname'>
            /// The name of the data lake account that the file lives in.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when appending to the file.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void ConcurrentAppend(this IFileSystemOperations operations, string filePath, string accountname, System.IO.Stream streamContents, string op = "CONCURRENTAPPEND")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).ConcurrentAppendAsync(filePath, accountname, streamContents, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Appends to the file specified. This method supports multiple concurrent
            /// appends to the file. NOTE: that concurrent append and serial append
            /// CANNOT be used interchangeably. Once a file has been appended to using
            /// either one, it can only be appended to using that type of append.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filePath'>
            /// The path to the file to append to using concurrent append.
            /// </param>
            /// <param name='accountname'>
            /// The name of the data lake account that the file lives in.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when appending to the file.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConcurrentAppendAsync( this IFileSystemOperations operations, string filePath, string accountname, System.IO.Stream streamContents, string op = "CONCURRENTAPPEND", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConcurrentAppendWithHttpMessagesAsync(filePath, accountname, streamContents, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Checks if the specified access is available at the given path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path to the file or folder to check access for.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='fsaction'>
            /// File system operation read/write/execute in string form, matching regex
            /// pattern '[rwx-]{3}'
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void CheckAccess(this IFileSystemOperations operations, string path, string accountname, string fsaction = default(string), string op = "CHECKACCESS")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).CheckAccessAsync(path, accountname, fsaction, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks if the specified access is available at the given path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path to the file or folder to check access for.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='fsaction'>
            /// File system operation read/write/execute in string form, matching regex
            /// pattern '[rwx-]{3}'
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CheckAccessAsync( this IFileSystemOperations operations, string path, string accountname, string fsaction = default(string), string op = "CHECKACCESS", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CheckAccessWithHttpMessagesAsync(path, accountname, fsaction, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path to the directory to create.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='permission'>
            /// The optional permissions to set on the directories
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static FileOperationResult Mkdirs(this IFileSystemOperations operations, string path, string accountname, string permission = default(string), string op = "MKDIRS")
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).MkdirsAsync(path, accountname, permission, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path to the directory to create.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='permission'>
            /// The optional permissions to set on the directories
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileOperationResult> MkdirsAsync( this IFileSystemOperations operations, string path, string accountname, string permission = default(string), string op = "MKDIRS", CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.MkdirsWithHttpMessagesAsync(path, accountname, permission, op, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Concatenates the list of files into the target file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='destinationPath'>
            /// The path to the destination file resulting from the concatenation.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='sources'>
            /// A list of comma seperated absolute FileSystem paths without scheme and
            /// authority
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void Concat(this IFileSystemOperations operations, string destinationPath, string accountname, string sources = default(string), string op = "CONCAT")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).ConcatAsync(destinationPath, accountname, sources, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Concatenates the list of files into the target file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='destinationPath'>
            /// The path to the destination file resulting from the concatenation.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='sources'>
            /// A list of comma seperated absolute FileSystem paths without scheme and
            /// authority
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConcatAsync( this IFileSystemOperations operations, string destinationPath, string accountname, string sources = default(string), string op = "CONCAT", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConcatWithHttpMessagesAsync(destinationPath, accountname, sources, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Concatenates the list of files into the target file. This API is NOT
            /// webhdfs compliant, however supports a much larger list of files in the
            /// concatenate list.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='msConcatDestinationPath'>
            /// The path to the destination file resulting from the concatenation.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='streamContents'>
            /// A list of comma seperated absolute FileSystem paths without scheme and
            /// authority. In the format: 'sources=&lt;comma separated list&gt;'
            /// </param>
            /// <param name='deletesourcedirectory'>
            /// Indicates two things to the system which allow for optimizations and
            /// increased concatenate performance. First, that all the streams being
            /// concatenated are in the same source directory. Second, that the source
            /// directory ONLY has streams in it that are being concatenated into the
            /// destination stream. Note that only the first requirement is strictly
            /// enforced (concatenate will ignore the flag and only delete the source
            /// streams, not the folder). If the first option is met, ALL data that was
            /// not part of the set of streams being concatenated WILL BE LOST. It is
            /// critical to only use this option if you are certain the two requirements
            /// are met.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void MsConcat(this IFileSystemOperations operations, string msConcatDestinationPath, string accountname, System.IO.Stream streamContents, bool? deletesourcedirectory = default(bool?), string op = "MSCONCAT")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).MsConcatAsync(msConcatDestinationPath, accountname, streamContents, deletesourcedirectory, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Concatenates the list of files into the target file. This API is NOT
            /// webhdfs compliant, however supports a much larger list of files in the
            /// concatenate list.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='msConcatDestinationPath'>
            /// The path to the destination file resulting from the concatenation.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='streamContents'>
            /// A list of comma seperated absolute FileSystem paths without scheme and
            /// authority. In the format: 'sources=&lt;comma separated list&gt;'
            /// </param>
            /// <param name='deletesourcedirectory'>
            /// Indicates two things to the system which allow for optimizations and
            /// increased concatenate performance. First, that all the streams being
            /// concatenated are in the same source directory. Second, that the source
            /// directory ONLY has streams in it that are being concatenated into the
            /// destination stream. Note that only the first requirement is strictly
            /// enforced (concatenate will ignore the flag and only delete the source
            /// streams, not the folder). If the first option is met, ALL data that was
            /// not part of the set of streams being concatenated WILL BE LOST. It is
            /// critical to only use this option if you are certain the two requirements
            /// are met.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task MsConcatAsync( this IFileSystemOperations operations, string msConcatDestinationPath, string accountname, System.IO.Stream streamContents, bool? deletesourcedirectory = default(bool?), string op = "MSCONCAT", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.MsConcatWithHttpMessagesAsync(msConcatDestinationPath, accountname, streamContents, deletesourcedirectory, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the list of file status objects specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listFilePath'>
            /// The path to the file to retrieve status for.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static FileStatusesResult ListFileStatus(this IFileSystemOperations operations, string listFilePath, string accountname, int? top = default(int?), int? skip = default(int?), string op = "LISTSTATUS")
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).ListFileStatusAsync(listFilePath, accountname, top, skip, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of file status objects specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listFilePath'>
            /// The path to the file to retrieve status for.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileStatusesResult> ListFileStatusAsync( this IFileSystemOperations operations, string listFilePath, string accountname, int? top = default(int?), int? skip = default(int?), string op = "LISTSTATUS", CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListFileStatusWithHttpMessagesAsync(listFilePath, accountname, top, skip, op, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Gets the file content summary object specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getContentSummaryFilePath'>
            /// The path to the file to retrieve the summary for.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static ContentSummaryResult GetContentSummary(this IFileSystemOperations operations, string getContentSummaryFilePath, string accountname, string op = "GETCONTENTSUMMARY")
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).GetContentSummaryAsync(getContentSummaryFilePath, accountname, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the file content summary object specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getContentSummaryFilePath'>
            /// The path to the file to retrieve the summary for.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContentSummaryResult> GetContentSummaryAsync( this IFileSystemOperations operations, string getContentSummaryFilePath, string accountname, string op = "GETCONTENTSUMMARY", CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetContentSummaryWithHttpMessagesAsync(getContentSummaryFilePath, accountname, op, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Get the file status object specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getFilePath'>
            /// The path to the file to retrieve status for.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static FileStatusResult GetFileStatus(this IFileSystemOperations operations, string getFilePath, string accountname, string op = "GETFILESTATUS")
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).GetFileStatusAsync(getFilePath, accountname, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the file status object specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getFilePath'>
            /// The path to the file to retrieve status for.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileStatusResult> GetFileStatusAsync( this IFileSystemOperations operations, string getFilePath, string accountname, string op = "GETFILESTATUS", CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetFileStatusWithHttpMessagesAsync(getFilePath, accountname, op, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Directly appends to a file with the specified content, without requiring a
            /// redirect. This API is NOT webhdfs compliant. It should be used only by
            /// tools that do not rely on webhdfs interoperability.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='directFilePath'>
            /// The path to the file to append to.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Store account to append to the file in
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when appending to the file.
            /// </param>
            /// <param name='buffersize'>
            /// The optional buffer size to use when appending data
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='append'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void Append(this IFileSystemOperations operations, string directFilePath, string accountname, System.IO.Stream streamContents, long? buffersize = default(long?), string op = "APPEND", bool? append = true)
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).AppendAsync(directFilePath, accountname, streamContents, buffersize, op, append), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Directly appends to a file with the specified content, without requiring a
            /// redirect. This API is NOT webhdfs compliant. It should be used only by
            /// tools that do not rely on webhdfs interoperability.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='directFilePath'>
            /// The path to the file to append to.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Store account to append to the file in
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when appending to the file.
            /// </param>
            /// <param name='buffersize'>
            /// The optional buffer size to use when appending data
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='append'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AppendAsync( this IFileSystemOperations operations, string directFilePath, string accountname, System.IO.Stream streamContents, long? buffersize = default(long?), string op = "APPEND", bool? append = true, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AppendWithHttpMessagesAsync(directFilePath, accountname, streamContents, buffersize, op, append, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Directly creates a file with the specified content, without requiring a
            /// redirect. This API is NOT webhdfs compliant. It should be used only by
            /// tools that do not rely on webhdfs interoperability.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='directFilePath'>
            /// The path to the file to create.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Store account to create the file in
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when creating the file. This parameter is
            /// optional, resulting in an empty file if not specified.
            /// </param>
            /// <param name='buffersize'>
            /// The size of the buffer used in transferring data.
            /// </param>
            /// <param name='overwrite'>
            /// The indication of if the file should be overwritten.
            /// </param>
            /// <param name='blocksize'>
            /// The block size of a file, in bytes.
            /// </param>
            /// <param name='replication'>
            /// The number of replications of a file.
            /// </param>
            /// <param name='permission'>
            /// The permissions of a file or directory.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='write'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void Create(this IFileSystemOperations operations, string directFilePath, string accountname, System.IO.Stream streamContents = default(System.IO.Stream), long? buffersize = default(long?), bool? overwrite = default(bool?), long? blocksize = default(long?), int? replication = default(int?), string permission = default(string), string op = "CREATE", bool? write = true)
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).CreateAsync(directFilePath, accountname, streamContents, buffersize, overwrite, blocksize, replication, permission, op, write), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Directly creates a file with the specified content, without requiring a
            /// redirect. This API is NOT webhdfs compliant. It should be used only by
            /// tools that do not rely on webhdfs interoperability.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='directFilePath'>
            /// The path to the file to create.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Store account to create the file in
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when creating the file. This parameter is
            /// optional, resulting in an empty file if not specified.
            /// </param>
            /// <param name='buffersize'>
            /// The size of the buffer used in transferring data.
            /// </param>
            /// <param name='overwrite'>
            /// The indication of if the file should be overwritten.
            /// </param>
            /// <param name='blocksize'>
            /// The block size of a file, in bytes.
            /// </param>
            /// <param name='replication'>
            /// The number of replications of a file.
            /// </param>
            /// <param name='permission'>
            /// The permissions of a file or directory.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='write'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateAsync( this IFileSystemOperations operations, string directFilePath, string accountname, System.IO.Stream streamContents = default(System.IO.Stream), long? buffersize = default(long?), bool? overwrite = default(bool?), long? blocksize = default(long?), int? replication = default(int?), string permission = default(string), string op = "CREATE", bool? write = true, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateWithHttpMessagesAsync(directFilePath, accountname, streamContents, buffersize, overwrite, blocksize, replication, permission, op, write, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Directly opens and reads from the specified file, without requiring a
            /// redirect. This API is NOT webhdfs compliant. It should be used only by
            /// tools that do not rely on webhdfs interoperability.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='directFilePath'>
            /// The path to the file to open.
            /// </param>
            /// <param name='accountname'>
            /// The name of the data lake account that the file lives in.
            /// </param>
            /// <param name='length'>
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='buffersize'>
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='read'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static System.IO.Stream Open(this IFileSystemOperations operations, string directFilePath, string accountname, long? length = default(long?), long? offset = default(long?), long? buffersize = default(long?), string op = "OPEN", bool? read = true)
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).OpenAsync(directFilePath, accountname, length, offset, buffersize, op, read), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Directly opens and reads from the specified file, without requiring a
            /// redirect. This API is NOT webhdfs compliant. It should be used only by
            /// tools that do not rely on webhdfs interoperability.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='directFilePath'>
            /// The path to the file to open.
            /// </param>
            /// <param name='accountname'>
            /// The name of the data lake account that the file lives in.
            /// </param>
            /// <param name='length'>
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='buffersize'>
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='read'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> OpenAsync( this IFileSystemOperations operations, string directFilePath, string accountname, long? length = default(long?), long? offset = default(long?), long? buffersize = default(long?), string op = "OPEN", bool? read = true, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.OpenWithHttpMessagesAsync(directFilePath, accountname, length, offset, buffersize, op, read, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Sets ACL entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setAclFilePath'>
            /// The path to the directory or file to set ACLs on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL creation operations in the format
            /// '[default:]user|group|other::r|-w|-x|-'
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void SetAcl(this IFileSystemOperations operations, string setAclFilePath, string accountname, string aclspec, string op = "SETACL")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetAclAsync(setAclFilePath, accountname, aclspec, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets ACL entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setAclFilePath'>
            /// The path to the directory or file to set ACLs on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL creation operations in the format
            /// '[default:]user|group|other::r|-w|-x|-'
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetAclAsync( this IFileSystemOperations operations, string setAclFilePath, string accountname, string aclspec, string op = "SETACL", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetAclWithHttpMessagesAsync(setAclFilePath, accountname, aclspec, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Modifies existing ACL entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modifyAclFilePath'>
            /// The path to the directory or file to modify ACLs on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL modification operations in the format
            /// '[default:]user|group|other::r|-w|-x|-'
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void ModifyAclEntries(this IFileSystemOperations operations, string modifyAclFilePath, string accountname, string aclspec, string op = "MODIFYACLENTRIES")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).ModifyAclEntriesAsync(modifyAclFilePath, accountname, aclspec, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modifies existing ACL entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modifyAclFilePath'>
            /// The path to the directory or file to modify ACLs on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL modification operations in the format
            /// '[default:]user|group|other::r|-w|-x|-'
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ModifyAclEntriesAsync( this IFileSystemOperations operations, string modifyAclFilePath, string accountname, string aclspec, string op = "MODIFYACLENTRIES", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ModifyAclEntriesWithHttpMessagesAsync(modifyAclFilePath, accountname, aclspec, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Removes existing ACL entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='removeAclFilePath'>
            /// The path to the directory or file to remove ACLs on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL removal operations in the format
            /// '[default:]user|group|other'
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void RemoveAclEntries(this IFileSystemOperations operations, string removeAclFilePath, string accountname, string aclspec, string op = "REMOVEACLENTRIES")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).RemoveAclEntriesAsync(removeAclFilePath, accountname, aclspec, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes existing ACL entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='removeAclFilePath'>
            /// The path to the directory or file to remove ACLs on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL removal operations in the format
            /// '[default:]user|group|other'
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAclEntriesAsync( this IFileSystemOperations operations, string removeAclFilePath, string accountname, string aclspec, string op = "REMOVEACLENTRIES", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemoveAclEntriesWithHttpMessagesAsync(removeAclFilePath, accountname, aclspec, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Removes default ACL entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='removeDefaultAclFilePath'>
            /// The path to the directory or file to remove ACL on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void RemoveDefaultAcl(this IFileSystemOperations operations, string removeDefaultAclFilePath, string accountname, string op = "REMOVEDEFAULTACL")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).RemoveDefaultAclAsync(removeDefaultAclFilePath, accountname, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes default ACL entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='removeDefaultAclFilePath'>
            /// The path to the directory or file to remove ACL on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveDefaultAclAsync( this IFileSystemOperations operations, string removeDefaultAclFilePath, string accountname, string op = "REMOVEDEFAULTACL", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemoveDefaultAclWithHttpMessagesAsync(removeDefaultAclFilePath, accountname, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Removes the existing ACL on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aclFilePath'>
            /// The path to the directory or file to remove ACL on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void RemoveAcl(this IFileSystemOperations operations, string aclFilePath, string accountname, string op = "REMOVEACL")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).RemoveAclAsync(aclFilePath, accountname, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the existing ACL on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aclFilePath'>
            /// The path to the directory or file to remove ACL on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAclAsync( this IFileSystemOperations operations, string aclFilePath, string accountname, string op = "REMOVEACL", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemoveAclWithHttpMessagesAsync(aclFilePath, accountname, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets ACL entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aclFilePath'>
            /// The path to the directory or file to get ACLs on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static AclStatusResult GetAclStatus(this IFileSystemOperations operations, string aclFilePath, string accountname, string op = "GETACLSTATUS")
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).GetAclStatusAsync(aclFilePath, accountname, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets ACL entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aclFilePath'>
            /// The path to the directory or file to get ACLs on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AclStatusResult> GetAclStatusAsync( this IFileSystemOperations operations, string aclFilePath, string accountname, string op = "GETACLSTATUS", CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetAclStatusWithHttpMessagesAsync(aclFilePath, accountname, op, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Deletes the requested file or folder, optionally recursively.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filePath'>
            /// The path to the file or folder to delete.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='recursive'>
            /// The optional switch indicating if the delete should be recursive
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static FileOperationResult Delete(this IFileSystemOperations operations, string filePath, string accountname, bool? recursive = default(bool?), string op = "DELETE")
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).DeleteAsync(filePath, accountname, recursive, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the requested file or folder, optionally recursively.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filePath'>
            /// The path to the file or folder to delete.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='recursive'>
            /// The optional switch indicating if the delete should be recursive
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileOperationResult> DeleteAsync( this IFileSystemOperations operations, string filePath, string accountname, bool? recursive = default(bool?), string op = "DELETE", CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.DeleteWithHttpMessagesAsync(filePath, accountname, recursive, op, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Creates a symbolic link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symLinkFilePath'>
            /// The path to the directory or file to create a symlink of.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='destination'>
            /// The path to create the symlink at
            /// </param>
            /// <param name='createParent'>
            /// If the parent directories do not exist, indicates if they should be
            /// created.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void CreateSymLink(this IFileSystemOperations operations, string symLinkFilePath, string accountname, string destination, bool? createParent = false, string op = "CREATESYMLINK")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).CreateSymLinkAsync(symLinkFilePath, accountname, destination, createParent, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a symbolic link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symLinkFilePath'>
            /// The path to the directory or file to create a symlink of.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='destination'>
            /// The path to create the symlink at
            /// </param>
            /// <param name='createParent'>
            /// If the parent directories do not exist, indicates if they should be
            /// created.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateSymLinkAsync( this IFileSystemOperations operations, string symLinkFilePath, string accountname, string destination, bool? createParent = false, string op = "CREATESYMLINK", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateSymLinkWithHttpMessagesAsync(symLinkFilePath, accountname, destination, createParent, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Rename a directory or file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='renameFilePath'>
            /// The path to the directory to move/rename.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='destination'>
            /// The path to move/rename the file or folder to
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static FileOperationResult Rename(this IFileSystemOperations operations, string renameFilePath, string accountname, string destination, string op = "RENAME")
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).RenameAsync(renameFilePath, accountname, destination, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rename a directory or file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='renameFilePath'>
            /// The path to the directory to move/rename.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='destination'>
            /// The path to move/rename the file or folder to
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileOperationResult> RenameAsync( this IFileSystemOperations operations, string renameFilePath, string accountname, string destination, string op = "RENAME", CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.RenameWithHttpMessagesAsync(renameFilePath, accountname, destination, op, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Sets the owner of a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setOwnerFilePath'>
            /// The path to the directory or file to set the owner on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='owner'>
            /// The username who is the owner of a file/directory, if empty remains
            /// unchanged.
            /// </param>
            /// <param name='group'>
            /// The group who is the group owner of a file/directory, if empty remains
            /// unchanged.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void SetOwner(this IFileSystemOperations operations, string setOwnerFilePath, string accountname, string owner = default(string), string group = default(string), string op = "SETOWNER")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetOwnerAsync(setOwnerFilePath, accountname, owner, group, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the owner of a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setOwnerFilePath'>
            /// The path to the directory or file to set the owner on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='owner'>
            /// The username who is the owner of a file/directory, if empty remains
            /// unchanged.
            /// </param>
            /// <param name='group'>
            /// The group who is the group owner of a file/directory, if empty remains
            /// unchanged.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetOwnerAsync( this IFileSystemOperations operations, string setOwnerFilePath, string accountname, string owner = default(string), string group = default(string), string op = "SETOWNER", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetOwnerWithHttpMessagesAsync(setOwnerFilePath, accountname, owner, group, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Sets the permission of the file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setPermissionFilePath'>
            /// The path to the directory or file to set permissions on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='permission'>
            /// A string octal representation of the permission (i.e 'rwx'), if empty
            /// remains unchanged.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void SetPermission(this IFileSystemOperations operations, string setPermissionFilePath, string accountname, string permission = default(string), string op = "SETPERMISSION")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetPermissionAsync(setPermissionFilePath, accountname, permission, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the permission of the file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setPermissionFilePath'>
            /// The path to the directory or file to set permissions on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='permission'>
            /// A string octal representation of the permission (i.e 'rwx'), if empty
            /// remains unchanged.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetPermissionAsync( this IFileSystemOperations operations, string setPermissionFilePath, string accountname, string permission = default(string), string op = "SETPERMISSION", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetPermissionWithHttpMessagesAsync(setPermissionFilePath, accountname, permission, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Sets the value of the replication factor.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setReplicationFilePath'>
            /// The path to the directory or file to create a replication of.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='replication'>
            /// The number of replications of a file.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static FileOperationResult SetReplication(this IFileSystemOperations operations, string setReplicationFilePath, string accountname, int? replication = default(int?), string op = "SETREPLICATION")
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetReplicationAsync(setReplicationFilePath, accountname, replication, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the value of the replication factor.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setReplicationFilePath'>
            /// The path to the directory or file to create a replication of.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='replication'>
            /// The number of replications of a file.
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileOperationResult> SetReplicationAsync( this IFileSystemOperations operations, string setReplicationFilePath, string accountname, int? replication = default(int?), string op = "SETREPLICATION", CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.SetReplicationWithHttpMessagesAsync(setReplicationFilePath, accountname, replication, op, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Sets the access or modification time on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourcePath'>
            /// The path to the directory or file to set permissions on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='modificationtime'>
            /// The modification time of a file/directory. If -1 remains unchanged
            /// </param>
            /// <param name='accesstime'>
            /// The access time of a file/directory. If -1 remains unchanged
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static void SetTimes(this IFileSystemOperations operations, string sourcePath, string accountname, long? modificationtime = default(long?), long? accesstime = default(long?), string op = "SETTIMES")
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetTimesAsync(sourcePath, accountname, modificationtime, accesstime, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the access or modification time on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourcePath'>
            /// The path to the directory or file to set permissions on.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='modificationtime'>
            /// The modification time of a file/directory. If -1 remains unchanged
            /// </param>
            /// <param name='accesstime'>
            /// The access time of a file/directory. If -1 remains unchanged
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetTimesAsync( this IFileSystemOperations operations, string sourcePath, string accountname, long? modificationtime = default(long?), long? accesstime = default(long?), string op = "SETTIMES", CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetTimesWithHttpMessagesAsync(sourcePath, accountname, modificationtime, accesstime, op, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the home directory for the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            public static HomeDirectoryResult GetHomeDirectory(this IFileSystemOperations operations, string accountname, string op = "GETHOMEDIRECTORY")
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).GetHomeDirectoryAsync(accountname, op), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the home directory for the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='op'>
            /// This is the REQUIRED value for this parameter and method combination.
            /// Changing the value will result in unexpected behavior, please do not do
            /// so.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HomeDirectoryResult> GetHomeDirectoryAsync( this IFileSystemOperations operations, string accountname, string op = "GETHOMEDIRECTORY", CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetHomeDirectoryWithHttpMessagesAsync(accountname, op, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

    }
}
