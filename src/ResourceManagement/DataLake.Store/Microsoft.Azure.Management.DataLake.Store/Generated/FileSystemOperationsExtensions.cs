// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Store
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for FileSystemOperations.
    /// </summary>
    public static partial class FileSystemOperationsExtensions
    {
            /// <summary>
            /// Gets the file information object containing the expiration time for the
            /// file at the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filePath'>
            /// The Data Lake Store path (starting with '/') of the file for which you
            /// want the file expiration information.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            public static FileInfoResult GetFileInfo(this IFileSystemOperations operations, string filePath, string accountName)
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).GetFileInfoAsync(filePath, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the file information object containing the expiration time for the
            /// file at the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filePath'>
            /// The Data Lake Store path (starting with '/') of the file for which you
            /// want the file expiration information.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileInfoResult> GetFileInfoAsync(this IFileSystemOperations operations, string filePath, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileInfoWithHttpMessagesAsync(filePath, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Appends to the specified file. This method supports multiple concurrent
            /// appends to the file. NOTE: Concurrent append and normal (serial) append
            /// CANNOT be used interchangeably. Once a file has been appended to using
            /// either append option, it can only be appended to using that append option.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filePath'>
            /// The Data Lake Store path (starting with '/') of the file to which to
            /// append using concurrent append.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Store account that the file lives in.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when appending to the file.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='appendMode'>
            /// Indicates the concurrent append call should create the file if it doesn't
            /// exist or just open the existing file for append
            /// </param>
            public static void ConcurrentAppend(this IFileSystemOperations operations, string filePath, string accountname, System.IO.Stream streamContents, string accountName, string appendMode = default(string))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).ConcurrentAppendAsync(filePath, accountname, streamContents, accountName, appendMode), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Appends to the specified file. This method supports multiple concurrent
            /// appends to the file. NOTE: Concurrent append and normal (serial) append
            /// CANNOT be used interchangeably. Once a file has been appended to using
            /// either append option, it can only be appended to using that append option.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filePath'>
            /// The Data Lake Store path (starting with '/') of the file to which to
            /// append using concurrent append.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Store account that the file lives in.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when appending to the file.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='appendMode'>
            /// Indicates the concurrent append call should create the file if it doesn't
            /// exist or just open the existing file for append
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConcurrentAppendAsync(this IFileSystemOperations operations, string filePath, string accountname, System.IO.Stream streamContents, string accountName, string appendMode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConcurrentAppendWithHttpMessagesAsync(filePath, accountname, streamContents, accountName, appendMode, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Sets or removes the expiration time on the specified file. This operation
            /// can only be executed against files. Folders are not supported.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filePath'>
            /// The Data Lake Store path (starting with '/') of the file on which to set
            /// or remove the expiration time.
            /// </param>
            /// <param name='expiryOption'>
            /// Indicates the type of expiration to use for the file: 1. NeverExpire:
            /// ExpireTime is ignored. 2. RelativeToNow: ExpireTime is an integer in
            /// milliseconds representing the expiration date relative to when file
            /// expiration is updated. 3. RelativeToCreationDate: ExpireTime is an
            /// integer in milliseconds representing the expiration date relative to file
            /// creation. 4. Absolute: ExpireTime is an integer in milliseconds, as a
            /// Unix timestamp relative to 1/1/1970 00:00:00. Possible values include:
            /// 'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='expireTime'>
            /// The time that the file will expire, corresponding to the ExpiryOption that
            /// was set.
            /// </param>
            public static void SetFileExpiry(this IFileSystemOperations operations, string filePath, ExpiryOptionType expiryOption, string accountName, long? expireTime = default(long?))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetFileExpiryAsync(filePath, expiryOption, accountName, expireTime), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets or removes the expiration time on the specified file. This operation
            /// can only be executed against files. Folders are not supported.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filePath'>
            /// The Data Lake Store path (starting with '/') of the file on which to set
            /// or remove the expiration time.
            /// </param>
            /// <param name='expiryOption'>
            /// Indicates the type of expiration to use for the file: 1. NeverExpire:
            /// ExpireTime is ignored. 2. RelativeToNow: ExpireTime is an integer in
            /// milliseconds representing the expiration date relative to when file
            /// expiration is updated. 3. RelativeToCreationDate: ExpireTime is an
            /// integer in milliseconds representing the expiration date relative to file
            /// creation. 4. Absolute: ExpireTime is an integer in milliseconds, as a
            /// Unix timestamp relative to 1/1/1970 00:00:00. Possible values include:
            /// 'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='expireTime'>
            /// The time that the file will expire, corresponding to the ExpiryOption that
            /// was set.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetFileExpiryAsync(this IFileSystemOperations operations, string filePath, ExpiryOptionType expiryOption, string accountName, long? expireTime = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetFileExpiryWithHttpMessagesAsync(filePath, expiryOption, accountName, expireTime, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Checks if the specified access is available at the given path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to check access.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='fsaction'>
            /// File system operation read/write/execute in string form, matching regex
            /// pattern '[rwx-]{3}'
            /// </param>
            public static void CheckAccess(this IFileSystemOperations operations, string path, string accountName, string fsaction = default(string))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).CheckAccessAsync(path, accountName, fsaction), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks if the specified access is available at the given path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to check access.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='fsaction'>
            /// File system operation read/write/execute in string form, matching regex
            /// pattern '[rwx-]{3}'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CheckAccessAsync(this IFileSystemOperations operations, string path, string accountName, string fsaction = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CheckAccessWithHttpMessagesAsync(path, accountName, fsaction, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The Data Lake Store path (starting with '/') of the directory to create.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='permission'>
            /// The optional permission to set on the directory.
            /// </param>
            public static FileOperationResult Mkdirs(this IFileSystemOperations operations, string path, string accountName, string permission = default(string))
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).MkdirsAsync(path, accountName, permission), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The Data Lake Store path (starting with '/') of the directory to create.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='permission'>
            /// The optional permission to set on the directory.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileOperationResult> MkdirsAsync(this IFileSystemOperations operations, string path, string accountName, string permission = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MkdirsWithHttpMessagesAsync(path, accountName, permission, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Concatenates the list of source files into the destination file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='destinationPath'>
            /// The Data Lake Store path (starting with '/') of the destination file
            /// resulting from the concatenation.
            /// </param>
            /// <param name='sources'>
            /// A list of comma seperated Data Lake Store paths (starting with '/') of the
            /// files to concatenate, in the order in which they should be concatenated.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            public static void Concat(this IFileSystemOperations operations, string destinationPath, IList<string> sources, string accountName)
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).ConcatAsync(destinationPath, sources, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Concatenates the list of source files into the destination file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='destinationPath'>
            /// The Data Lake Store path (starting with '/') of the destination file
            /// resulting from the concatenation.
            /// </param>
            /// <param name='sources'>
            /// A list of comma seperated Data Lake Store paths (starting with '/') of the
            /// files to concatenate, in the order in which they should be concatenated.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConcatAsync(this IFileSystemOperations operations, string destinationPath, IList<string> sources, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConcatWithHttpMessagesAsync(destinationPath, sources, accountName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Concatenates the list of source files into the destination file. This
            /// method accepts more source file paths than the Concat method. This method
            /// and the parameters it accepts are subject to change for usability in an
            /// upcoming version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='msConcatDestinationPath'>
            /// The Data Lake Store path (starting with '/') of the destination file
            /// resulting from the concatenation.
            /// </param>
            /// <param name='streamContents'>
            /// A list of Data Lake Store paths (starting with '/') of the source files.
            /// Must be in the format: sources=&lt;comma separated list&gt;
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='deletesourcedirectory'>
            /// Caution: Setting this parameter to true will delete the parent directory
            /// of all source files provided to the MsConcat method.
            /// </param>
            public static void MsConcat(this IFileSystemOperations operations, string msConcatDestinationPath, System.IO.Stream streamContents, string accountName, bool? deletesourcedirectory = default(bool?))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).MsConcatAsync(msConcatDestinationPath, streamContents, accountName, deletesourcedirectory), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Concatenates the list of source files into the destination file. This
            /// method accepts more source file paths than the Concat method. This method
            /// and the parameters it accepts are subject to change for usability in an
            /// upcoming version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='msConcatDestinationPath'>
            /// The Data Lake Store path (starting with '/') of the destination file
            /// resulting from the concatenation.
            /// </param>
            /// <param name='streamContents'>
            /// A list of Data Lake Store paths (starting with '/') of the source files.
            /// Must be in the format: sources=&lt;comma separated list&gt;
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='deletesourcedirectory'>
            /// Caution: Setting this parameter to true will delete the parent directory
            /// of all source files provided to the MsConcat method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task MsConcatAsync(this IFileSystemOperations operations, string msConcatDestinationPath, System.IO.Stream streamContents, string accountName, bool? deletesourcedirectory = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.MsConcatWithHttpMessagesAsync(msConcatDestinationPath, streamContents, accountName, deletesourcedirectory, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the list of file status objects specified by the file path, with
            /// optional pagination parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listFilePath'>
            /// The Data Lake Store path (starting with '/') of the directory to list.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='listSize'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='listAfter'>
            /// Gets or sets the item or lexographical index after which to begin
            /// returning results. For example, a file list of 'a','b','d' and
            /// listAfter='b' will return 'd', and a listAfter='c' will also return 'd'.
            /// Optional.
            /// </param>
            /// <param name='listBefore'>
            /// Gets or sets the item or lexographical index before which to begin
            /// returning results. For example, a file list of 'a','b','d' and
            /// listBefore='d' will return 'a','b', and a listBefore='c' will also return
            /// 'a','b'. Optional.
            /// </param>
            public static FileStatusesResult ListFileStatus(this IFileSystemOperations operations, string listFilePath, string accountName, int? listSize = default(int?), string listAfter = default(string), string listBefore = default(string))
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).ListFileStatusAsync(listFilePath, accountName, listSize, listAfter, listBefore), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of file status objects specified by the file path, with
            /// optional pagination parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listFilePath'>
            /// The Data Lake Store path (starting with '/') of the directory to list.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='listSize'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='listAfter'>
            /// Gets or sets the item or lexographical index after which to begin
            /// returning results. For example, a file list of 'a','b','d' and
            /// listAfter='b' will return 'd', and a listAfter='c' will also return 'd'.
            /// Optional.
            /// </param>
            /// <param name='listBefore'>
            /// Gets or sets the item or lexographical index before which to begin
            /// returning results. For example, a file list of 'a','b','d' and
            /// listBefore='d' will return 'a','b', and a listBefore='c' will also return
            /// 'a','b'. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileStatusesResult> ListFileStatusAsync(this IFileSystemOperations operations, string listFilePath, string accountName, int? listSize = default(int?), string listAfter = default(string), string listBefore = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFileStatusWithHttpMessagesAsync(listFilePath, accountName, listSize, listAfter, listBefore, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the file content summary object specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getContentSummaryFilePath'>
            /// The Data Lake Store path (starting with '/') of the file for which to
            /// retrieve the summary.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            public static ContentSummaryResult GetContentSummary(this IFileSystemOperations operations, string getContentSummaryFilePath, string accountName)
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).GetContentSummaryAsync(getContentSummaryFilePath, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the file content summary object specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getContentSummaryFilePath'>
            /// The Data Lake Store path (starting with '/') of the file for which to
            /// retrieve the summary.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContentSummaryResult> GetContentSummaryAsync(this IFileSystemOperations operations, string getContentSummaryFilePath, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContentSummaryWithHttpMessagesAsync(getContentSummaryFilePath, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the file status object specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to retrieve the status.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            public static FileStatusResult GetFileStatus(this IFileSystemOperations operations, string getFilePath, string accountName)
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).GetFileStatusAsync(getFilePath, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the file status object specified by the file path.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to retrieve the status.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileStatusResult> GetFileStatusAsync(this IFileSystemOperations operations, string getFilePath, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileStatusWithHttpMessagesAsync(getFilePath, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Appends to the specified file. This method does not support multiple
            /// concurrent appends to the file. NOTE: Concurrent append and normal
            /// (serial) append CANNOT be used interchangeably. Once a file has been
            /// appended to using either append option, it can only be appended to using
            /// that append option. Use the ConcurrentAppend option if you would like
            /// support for concurrent appends.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='directFilePath'>
            /// The Data Lake Store path (starting with '/') of the file to which to
            /// append.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when appending to the file.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='buffersize'>
            /// The optional buffer size to use when appending data
            /// </param>
            public static void Append(this IFileSystemOperations operations, string directFilePath, System.IO.Stream streamContents, string accountName, long? buffersize = default(long?))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).AppendAsync(directFilePath, streamContents, accountName, buffersize), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Appends to the specified file. This method does not support multiple
            /// concurrent appends to the file. NOTE: Concurrent append and normal
            /// (serial) append CANNOT be used interchangeably. Once a file has been
            /// appended to using either append option, it can only be appended to using
            /// that append option. Use the ConcurrentAppend option if you would like
            /// support for concurrent appends.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='directFilePath'>
            /// The Data Lake Store path (starting with '/') of the file to which to
            /// append.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when appending to the file.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='buffersize'>
            /// The optional buffer size to use when appending data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AppendAsync(this IFileSystemOperations operations, string directFilePath, System.IO.Stream streamContents, string accountName, long? buffersize = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AppendWithHttpMessagesAsync(directFilePath, streamContents, accountName, buffersize, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a file with optionally specified content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='directFilePath'>
            /// The Data Lake Store path (starting with '/') of the file to create.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when creating the file. This parameter is
            /// optional, resulting in an empty file if not specified.
            /// </param>
            /// <param name='buffersize'>
            /// The size of the buffer used in transferring data.
            /// </param>
            /// <param name='overwrite'>
            /// The indication of if the file should be overwritten.
            /// </param>
            /// <param name='blocksize'>
            /// The block size of a file, in bytes.
            /// </param>
            /// <param name='replication'>
            /// The number of replications of a file.
            /// </param>
            /// <param name='permission'>
            /// The permissions of a file or directory.
            /// </param>
            public static void Create(this IFileSystemOperations operations, string directFilePath, string accountName, System.IO.Stream streamContents = default(System.IO.Stream), long? buffersize = default(long?), bool? overwrite = default(bool?), long? blocksize = default(long?), int? replication = default(int?), string permission = default(string))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).CreateAsync(directFilePath, accountName, streamContents, buffersize, overwrite, blocksize, replication, permission), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a file with optionally specified content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='directFilePath'>
            /// The Data Lake Store path (starting with '/') of the file to create.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='streamContents'>
            /// The file contents to include when creating the file. This parameter is
            /// optional, resulting in an empty file if not specified.
            /// </param>
            /// <param name='buffersize'>
            /// The size of the buffer used in transferring data.
            /// </param>
            /// <param name='overwrite'>
            /// The indication of if the file should be overwritten.
            /// </param>
            /// <param name='blocksize'>
            /// The block size of a file, in bytes.
            /// </param>
            /// <param name='replication'>
            /// The number of replications of a file.
            /// </param>
            /// <param name='permission'>
            /// The permissions of a file or directory.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateAsync(this IFileSystemOperations operations, string directFilePath, string accountName, System.IO.Stream streamContents = default(System.IO.Stream), long? buffersize = default(long?), bool? overwrite = default(bool?), long? blocksize = default(long?), int? replication = default(int?), string permission = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateWithHttpMessagesAsync(directFilePath, accountName, streamContents, buffersize, overwrite, blocksize, replication, permission, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Opens and reads from the specified file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='directFilePath'>
            /// The Data Lake Store path (starting with '/') of the file to open.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='length'>
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='buffersize'>
            /// </param>
            public static System.IO.Stream Open(this IFileSystemOperations operations, string directFilePath, string accountName, long? length = default(long?), long? offset = default(long?), long? buffersize = default(long?))
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).OpenAsync(directFilePath, accountName, length, offset, buffersize), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Opens and reads from the specified file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='directFilePath'>
            /// The Data Lake Store path (starting with '/') of the file to open.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='length'>
            /// </param>
            /// <param name='offset'>
            /// </param>
            /// <param name='buffersize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> OpenAsync(this IFileSystemOperations operations, string directFilePath, string accountName, long? length = default(long?), long? offset = default(long?), long? buffersize = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.OpenWithHttpMessagesAsync(directFilePath, accountName, length, offset, buffersize, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Sets the Access Control List (ACL) for a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory on
            /// which to set the ACL.
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL creation operations in the format
            /// '[default:]user|group|other::r|-w|-x|-'
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            public static void SetAcl(this IFileSystemOperations operations, string setAclFilePath, string aclspec, string accountName)
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetAclAsync(setAclFilePath, aclspec, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the Access Control List (ACL) for a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory on
            /// which to set the ACL.
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL creation operations in the format
            /// '[default:]user|group|other::r|-w|-x|-'
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetAclAsync(this IFileSystemOperations operations, string setAclFilePath, string aclspec, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetAclWithHttpMessagesAsync(setAclFilePath, aclspec, accountName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Modifies existing Access Control List (ACL) entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modifyAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory with
            /// the ACL being modified.
            /// </param>
            /// <param name='aclspec'>
            /// The ACL specification included in ACL modification operations in the
            /// format '[default:]user|group|other::r|-w|-x|-'
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            public static void ModifyAclEntries(this IFileSystemOperations operations, string modifyAclFilePath, string aclspec, string accountName)
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).ModifyAclEntriesAsync(modifyAclFilePath, aclspec, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modifies existing Access Control List (ACL) entries on a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modifyAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory with
            /// the ACL being modified.
            /// </param>
            /// <param name='aclspec'>
            /// The ACL specification included in ACL modification operations in the
            /// format '[default:]user|group|other::r|-w|-x|-'
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ModifyAclEntriesAsync(this IFileSystemOperations operations, string modifyAclFilePath, string aclspec, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ModifyAclEntriesWithHttpMessagesAsync(modifyAclFilePath, aclspec, accountName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Removes existing Access Control List (ACL) entries for a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='removeAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory with
            /// the ACL being removed.
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL removal operations in the format
            /// '[default:]user|group|other'
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            public static void RemoveAclEntries(this IFileSystemOperations operations, string removeAclFilePath, string aclspec, string accountName)
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).RemoveAclEntriesAsync(removeAclFilePath, aclspec, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes existing Access Control List (ACL) entries for a file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='removeAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory with
            /// the ACL being removed.
            /// </param>
            /// <param name='aclspec'>
            /// The ACL spec included in ACL removal operations in the format
            /// '[default:]user|group|other'
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAclEntriesAsync(this IFileSystemOperations operations, string removeAclFilePath, string aclspec, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemoveAclEntriesWithHttpMessagesAsync(removeAclFilePath, aclspec, accountName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Removes default Access Control List (ACL) entries of the specified
            /// directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='removeDefaultAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the directory with the
            /// default ACL being removed.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            public static void RemoveDefaultAcl(this IFileSystemOperations operations, string removeDefaultAclFilePath, string accountName)
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).RemoveDefaultAclAsync(removeDefaultAclFilePath, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes default Access Control List (ACL) entries of the specified
            /// directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='removeDefaultAclFilePath'>
            /// The Data Lake Store path (starting with '/') of the directory with the
            /// default ACL being removed.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveDefaultAclAsync(this IFileSystemOperations operations, string removeDefaultAclFilePath, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemoveDefaultAclWithHttpMessagesAsync(removeDefaultAclFilePath, accountName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Removes the existing Access Control List (ACL) of the specified file or
            /// directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory with
            /// the ACL being removed.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            public static void RemoveAcl(this IFileSystemOperations operations, string aclFilePath, string accountName)
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).RemoveAclAsync(aclFilePath, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the existing Access Control List (ACL) of the specified file or
            /// directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory with
            /// the ACL being removed.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAclAsync(this IFileSystemOperations operations, string aclFilePath, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemoveAclWithHttpMessagesAsync(aclFilePath, accountName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets Access Control List (ACL) entries for the specified file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to get the ACL.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            public static AclStatusResult GetAclStatus(this IFileSystemOperations operations, string aclFilePath, string accountName)
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).GetAclStatusAsync(aclFilePath, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Access Control List (ACL) entries for the specified file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aclFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to get the ACL.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AclStatusResult> GetAclStatusAsync(this IFileSystemOperations operations, string aclFilePath, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAclStatusWithHttpMessagesAsync(aclFilePath, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the requested file or directory, optionally recursively.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory to
            /// delete.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='recursive'>
            /// The optional switch indicating if the delete should be recursive
            /// </param>
            public static FileOperationResult Delete(this IFileSystemOperations operations, string filePath, string accountName, bool? recursive = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).DeleteAsync(filePath, accountName, recursive), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the requested file or directory, optionally recursively.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory to
            /// delete.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='recursive'>
            /// The optional switch indicating if the delete should be recursive
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileOperationResult> DeleteAsync(this IFileSystemOperations operations, string filePath, string accountName, bool? recursive = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(filePath, accountName, recursive, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Rename a file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='renameFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory to
            /// move/rename.
            /// </param>
            /// <param name='destination'>
            /// The path to move/rename the file or folder to
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            public static FileOperationResult Rename(this IFileSystemOperations operations, string renameFilePath, string destination, string accountName)
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).RenameAsync(renameFilePath, destination, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rename a file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='renameFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory to
            /// move/rename.
            /// </param>
            /// <param name='destination'>
            /// The path to move/rename the file or folder to
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileOperationResult> RenameAsync(this IFileSystemOperations operations, string renameFilePath, string destination, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RenameWithHttpMessagesAsync(renameFilePath, destination, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the owner of a file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setOwnerFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to set the owner.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='owner'>
            /// The AAD Object ID of the user owner of the file or directory. If empty,
            /// the property will remain unchanged.
            /// </param>
            /// <param name='group'>
            /// The AAD Object ID of the group owner of the file or directory. If empty,
            /// the property will remain unchanged.
            /// </param>
            public static void SetOwner(this IFileSystemOperations operations, string setOwnerFilePath, string accountName, string owner = default(string), string group = default(string))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetOwnerAsync(setOwnerFilePath, accountName, owner, group), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the owner of a file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setOwnerFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to set the owner.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='owner'>
            /// The AAD Object ID of the user owner of the file or directory. If empty,
            /// the property will remain unchanged.
            /// </param>
            /// <param name='group'>
            /// The AAD Object ID of the group owner of the file or directory. If empty,
            /// the property will remain unchanged.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetOwnerAsync(this IFileSystemOperations operations, string setOwnerFilePath, string accountName, string owner = default(string), string group = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetOwnerWithHttpMessagesAsync(setOwnerFilePath, accountName, owner, group, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Sets the permission of the file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setPermissionFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to set the permission.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='permission'>
            /// A string representation of the permission (i.e 'rwx'). If empty, this
            /// property remains unchanged.
            /// </param>
            public static void SetPermission(this IFileSystemOperations operations, string setPermissionFilePath, string accountName, string permission = default(string))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetPermissionAsync(setPermissionFilePath, accountName, permission), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the permission of the file or folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='setPermissionFilePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to set the permission.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='permission'>
            /// A string representation of the permission (i.e 'rwx'). If empty, this
            /// property remains unchanged.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetPermissionAsync(this IFileSystemOperations operations, string setPermissionFilePath, string accountName, string permission = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetPermissionWithHttpMessagesAsync(setPermissionFilePath, accountName, permission, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Sets the access or modification time on a file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourcePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to set the modification time.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='modificationtime'>
            /// The modification time of the file or directory. If -1, this property
            /// remains unchanged
            /// </param>
            /// <param name='accesstime'>
            /// The access time of the file or directory. If -1, this property remains
            /// unchanged
            /// </param>
            public static void SetTimes(this IFileSystemOperations operations, string sourcePath, string accountName, long? modificationtime = default(long?), long? accesstime = default(long?))
            {
                Task.Factory.StartNew(s => ((IFileSystemOperations)s).SetTimesAsync(sourcePath, accountName, modificationtime, accesstime), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the access or modification time on a file or directory.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourcePath'>
            /// The Data Lake Store path (starting with '/') of the file or directory for
            /// which to set the modification time.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='modificationtime'>
            /// The modification time of the file or directory. If -1, this property
            /// remains unchanged
            /// </param>
            /// <param name='accesstime'>
            /// The access time of the file or directory. If -1, this property remains
            /// unchanged
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetTimesAsync(this IFileSystemOperations operations, string sourcePath, string accountName, long? modificationtime = default(long?), long? accesstime = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetTimesWithHttpMessagesAsync(sourcePath, accountName, modificationtime, accesstime, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the home directory for the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Store account to use.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            public static HomeDirectoryResult GetHomeDirectory(this IFileSystemOperations operations, string accountname, string accountName)
            {
                return Task.Factory.StartNew(s => ((IFileSystemOperations)s).GetHomeDirectoryAsync(accountname, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the home directory for the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Store account to use.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Store account to execute filesystem operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HomeDirectoryResult> GetHomeDirectoryAsync(this IFileSystemOperations operations, string accountname, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHomeDirectoryWithHttpMessagesAsync(accountname, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
