// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Store
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// FileSystemOperations operations.
    /// </summary>
    internal partial class FileSystemOperations : IServiceOperations<DataLakeStoreFileSystemManagementClient>, IFileSystemOperations
    {
        /// <summary>
        /// Initializes a new instance of the FileSystemOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal FileSystemOperations(DataLakeStoreFileSystemManagementClient client)
        {
            if (client == null) 
            {
                throw new ArgumentNullException("client");
            }
            this.Client = client;
        }

        /// <summary>
        /// Gets a reference to the DataLakeStoreFileSystemManagementClient
        /// </summary>
        public DataLakeStoreFileSystemManagementClient Client { get; private set; }

        /// <summary>
        /// Appends to the file specified. This method supports multiple concurrent
        /// appends to the file. NOTE: that concurrent append and serial append
        /// CANNOT be used interchangeably. Once a file has been appended to using
        /// either one, it can only be appended to using that type of append.
        /// </summary>
        /// <param name='filePath'>
        /// The path to the file to append to using concurrent append.
        /// </param>
        /// <param name='accountname'>
        /// The name of the data lake account that the file lives in.
        /// </param>
        /// <param name='streamContents'>
        /// The file contents to include when appending to the file.
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> ConcurrentAppendWithHttpMessagesAsync(string filePath, string accountname, System.IO.Stream streamContents, string op = "CONCURRENTAPPEND", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (filePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "filePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (streamContents == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "streamContents");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("streamContents", streamContents);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "ConcurrentAppend", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "WebHdfsExt/{filePath}").ToString();
            url = url.Replace("{filePath}", Uri.EscapeDataString(filePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("POST");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Serialize Request
            httpRequest.Content = new StreamContent(streamContents);
            httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Checks if the specified access is available at the given path.
        /// </summary>
        /// <param name='path'>
        /// The path to the file or folder to check access for.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='fsaction'>
        /// File system operation read/write/execute in string form, matching regex
        /// pattern '[rwx-]{3}'
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> CheckAccessWithHttpMessagesAsync(string path, string accountname, string fsaction = default(string), string op = "CHECKACCESS", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (path == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "path");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("path", path);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("fsaction", fsaction);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "CheckAccess", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{path}").ToString();
            url = url.Replace("{path}", Uri.EscapeDataString(path));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (fsaction != null)
            {
                queryParameters.Add(string.Format("fsaction={0}", Uri.EscapeDataString(fsaction)));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("GET");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Creates a directory.
        /// </summary>
        /// <param name='path'>
        /// The path to the directory to create.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='permission'>
        /// The optional permissions to set on the directories
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse<FileOperationResult>> MkdirsWithHttpMessagesAsync(string path, string accountname, string permission = default(string), string op = "MKDIRS", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (path == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "path");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("path", path);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("permission", permission);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "Mkdirs", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{path}").ToString();
            url = url.Replace("{path}", Uri.EscapeDataString(path));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (permission != null)
            {
                queryParameters.Add(string.Format("permission={0}", Uri.EscapeDataString(permission)));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError errorBody = JsonConvert.DeserializeObject<CloudError>(responseContent, this.Client.DeserializationSettings);
                    if (errorBody != null)
                    {
                        ex = new CloudException(errorBody.Message);
                        ex.Body = errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse<FileOperationResult>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)statusCode == 200)
            {
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result.Body = JsonConvert.DeserializeObject<FileOperationResult>(responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    throw new RestException("Unable to deserialize the response.", ex);
                }
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Concatenates the list of files into the target file.
        /// </summary>
        /// <param name='destinationPath'>
        /// The path to the destination file resulting from the concatenation.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='sources'>
        /// A list of comma seperated absolute FileSystem paths without scheme and
        /// authority
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> ConcatWithHttpMessagesAsync(string destinationPath, string accountname, string sources = default(string), string op = "CONCAT", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (destinationPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "destinationPath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("destinationPath", destinationPath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("sources", sources);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "Concat", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{destinationPath}").ToString();
            url = url.Replace("{destinationPath}", Uri.EscapeDataString(destinationPath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (sources != null)
            {
                queryParameters.Add(string.Format("sources={0}", Uri.EscapeDataString(sources)));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("POST");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Concatenates the list of files into the target file. This API is NOT
        /// webhdfs compliant, however supports a much larger list of files in the
        /// concatenate list.
        /// </summary>
        /// <param name='msConcatDestinationPath'>
        /// The path to the destination file resulting from the concatenation.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='streamContents'>
        /// A list of comma seperated absolute FileSystem paths without scheme and
        /// authority. In the format: 'sources=&lt;comma separated list&gt;'
        /// </param>
        /// <param name='deletesourcedirectory'>
        /// Indicates two things to the system which allow for optimizations and
        /// increased concatenate performance. First, that all the streams being
        /// concatenated are in the same source directory. Second, that the source
        /// directory ONLY has streams in it that are being concatenated into the
        /// destination stream. Note that only the first requirement is strictly
        /// enforced (concatenate will ignore the flag and only delete the source
        /// streams, not the folder). If the first option is met, ALL data that was
        /// not part of the set of streams being concatenated WILL BE LOST. It is
        /// critical to only use this option if you are certain the two requirements
        /// are met.
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> MsConcatWithHttpMessagesAsync(string msConcatDestinationPath, string accountname, System.IO.Stream streamContents, bool? deletesourcedirectory = default(bool?), string op = "MSCONCAT", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (msConcatDestinationPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "msConcatDestinationPath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (streamContents == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "streamContents");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("msConcatDestinationPath", msConcatDestinationPath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("deletesourcedirectory", deletesourcedirectory);
                tracingParameters.Add("streamContents", streamContents);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "MsConcat", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{msConcatDestinationPath}").ToString();
            url = url.Replace("{msConcatDestinationPath}", Uri.EscapeDataString(msConcatDestinationPath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (deletesourcedirectory != null)
            {
                queryParameters.Add(string.Format("deletesourcedirectory={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(deletesourcedirectory, this.Client.SerializationSettings).Trim('"'))));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("POST");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Serialize Request
            httpRequest.Content = new StreamContent(streamContents);
            httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Get the list of file status objects specified by the file path.
        /// </summary>
        /// <param name='listFilePath'>
        /// The path to the file to retrieve status for.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='top'>
        /// Gets or sets the number of items to return. Optional.
        /// </param>
        /// <param name='skip'>
        /// Gets or sets the number of items to skip over before returning elements.
        /// Optional.
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse<FileStatusesResult>> ListFileStatusWithHttpMessagesAsync(string listFilePath, string accountname, int? top = default(int?), int? skip = default(int?), string op = "LISTSTATUS", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (listFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "listFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("listFilePath", listFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("top", top);
                tracingParameters.Add("skip", skip);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "ListFileStatus", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{listFilePath}").ToString();
            url = url.Replace("{listFilePath}", Uri.EscapeDataString(listFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (top != null)
            {
                queryParameters.Add(string.Format("$top={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(top, this.Client.SerializationSettings).Trim('"'))));
            }
            if (skip != null)
            {
                queryParameters.Add(string.Format("$skip={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(skip, this.Client.SerializationSettings).Trim('"'))));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("GET");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError errorBody = JsonConvert.DeserializeObject<CloudError>(responseContent, this.Client.DeserializationSettings);
                    if (errorBody != null)
                    {
                        ex = new CloudException(errorBody.Message);
                        ex.Body = errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse<FileStatusesResult>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)statusCode == 200)
            {
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result.Body = JsonConvert.DeserializeObject<FileStatusesResult>(responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    throw new RestException("Unable to deserialize the response.", ex);
                }
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Gets the file content summary object specified by the file path.
        /// </summary>
        /// <param name='getContentSummaryFilePath'>
        /// The path to the file to retrieve the summary for.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse<ContentSummaryResult>> GetContentSummaryWithHttpMessagesAsync(string getContentSummaryFilePath, string accountname, string op = "GETCONTENTSUMMARY", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (getContentSummaryFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "getContentSummaryFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("getContentSummaryFilePath", getContentSummaryFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "GetContentSummary", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/va/{getContentSummaryFilePath}").ToString();
            url = url.Replace("{getContentSummaryFilePath}", Uri.EscapeDataString(getContentSummaryFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("GET");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError errorBody = JsonConvert.DeserializeObject<CloudError>(responseContent, this.Client.DeserializationSettings);
                    if (errorBody != null)
                    {
                        ex = new CloudException(errorBody.Message);
                        ex.Body = errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse<ContentSummaryResult>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)statusCode == 200)
            {
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result.Body = JsonConvert.DeserializeObject<ContentSummaryResult>(responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    throw new RestException("Unable to deserialize the response.", ex);
                }
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Get the file status object specified by the file path.
        /// </summary>
        /// <param name='getFilePath'>
        /// The path to the file to retrieve status for.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse<FileStatusResult>> GetFileStatusWithHttpMessagesAsync(string getFilePath, string accountname, string op = "GETFILESTATUS", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (getFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "getFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("getFilePath", getFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "GetFileStatus", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{getFilePath}").ToString();
            url = url.Replace("{getFilePath}", Uri.EscapeDataString(getFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("GET");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError errorBody = JsonConvert.DeserializeObject<CloudError>(responseContent, this.Client.DeserializationSettings);
                    if (errorBody != null)
                    {
                        ex = new CloudException(errorBody.Message);
                        ex.Body = errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse<FileStatusResult>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)statusCode == 200)
            {
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result.Body = JsonConvert.DeserializeObject<FileStatusResult>(responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    throw new RestException("Unable to deserialize the response.", ex);
                }
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Directly appends to a file with the specified content, without requiring a
        /// redirect. This API is NOT webhdfs compliant. It should be used only by
        /// tools that do not rely on webhdfs interoperability.
        /// </summary>
        /// <param name='directFilePath'>
        /// The path to the file to append to.
        /// </param>
        /// <param name='accountname'>
        /// The name of the Data Lake Store account to append to the file in
        /// </param>
        /// <param name='streamContents'>
        /// The file contents to include when appending to the file.
        /// </param>
        /// <param name='buffersize'>
        /// The optional buffer size to use when appending data
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='append'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> DirectAppendWithHttpMessagesAsync(string directFilePath, string accountname, System.IO.Stream streamContents, long? buffersize = default(long?), string op = "APPEND", bool? append = true, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (directFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "directFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (streamContents == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "streamContents");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("directFilePath", directFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("streamContents", streamContents);
                tracingParameters.Add("buffersize", buffersize);
                tracingParameters.Add("op", op);
                tracingParameters.Add("append", append);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "DirectAppend", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{directFilePath}").ToString();
            url = url.Replace("{directFilePath}", Uri.EscapeDataString(directFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (buffersize != null)
            {
                queryParameters.Add(string.Format("buffersize={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(buffersize, this.Client.SerializationSettings).Trim('"'))));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (append != null)
            {
                queryParameters.Add(string.Format("append={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(append, this.Client.SerializationSettings).Trim('"'))));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("POST");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Serialize Request
            httpRequest.Content = new StreamContent(streamContents);
            httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Directly creates a file with the specified content, without requiring a
        /// redirect. This API is NOT webhdfs compliant. It should be used only by
        /// tools that do not rely on webhdfs interoperability.
        /// </summary>
        /// <param name='directFilePath'>
        /// The path to the file to create.
        /// </param>
        /// <param name='accountname'>
        /// The name of the Data Lake Store account to create the file in
        /// </param>
        /// <param name='streamContents'>
        /// The file contents to include when creating the file. This parameter is
        /// optional, resulting in an empty file if not specified.
        /// </param>
        /// <param name='buffersize'>
        /// The size of the buffer used in transferring data.
        /// </param>
        /// <param name='overwrite'>
        /// The indication of if the file should be overwritten.
        /// </param>
        /// <param name='blocksize'>
        /// The block size of a file, in bytes.
        /// </param>
        /// <param name='replication'>
        /// The number of replications of a file.
        /// </param>
        /// <param name='permission'>
        /// The permissions of a file or directory.
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='write'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> DirectCreateWithHttpMessagesAsync(string directFilePath, string accountname, System.IO.Stream streamContents = default(System.IO.Stream), long? buffersize = default(long?), bool? overwrite = default(bool?), long? blocksize = default(long?), int? replication = default(int?), string permission = default(string), string op = "CREATE", bool? write = true, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (directFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "directFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("directFilePath", directFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("streamContents", streamContents);
                tracingParameters.Add("buffersize", buffersize);
                tracingParameters.Add("overwrite", overwrite);
                tracingParameters.Add("blocksize", blocksize);
                tracingParameters.Add("replication", replication);
                tracingParameters.Add("permission", permission);
                tracingParameters.Add("op", op);
                tracingParameters.Add("write", write);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "DirectCreate", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{directFilePath}").ToString();
            url = url.Replace("{directFilePath}", Uri.EscapeDataString(directFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (buffersize != null)
            {
                queryParameters.Add(string.Format("buffersize={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(buffersize, this.Client.SerializationSettings).Trim('"'))));
            }
            if (overwrite != null)
            {
                queryParameters.Add(string.Format("overwrite={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(overwrite, this.Client.SerializationSettings).Trim('"'))));
            }
            if (blocksize != null)
            {
                queryParameters.Add(string.Format("blocksize={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(blocksize, this.Client.SerializationSettings).Trim('"'))));
            }
            if (replication != null)
            {
                queryParameters.Add(string.Format("replication={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(replication, this.Client.SerializationSettings).Trim('"'))));
            }
            if (permission != null)
            {
                queryParameters.Add(string.Format("permission={0}", Uri.EscapeDataString(permission)));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (write != null)
            {
                queryParameters.Add(string.Format("write={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(write, this.Client.SerializationSettings).Trim('"'))));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Serialize Request
            httpRequest.Content = new StreamContent(streamContents);
            httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 201)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Directly opens and reads from the specified file, without requiring a
        /// redirect. This API is NOT webhdfs compliant. It should be used only by
        /// tools that do not rely on webhdfs interoperability.
        /// </summary>
        /// <param name='directFilePath'>
        /// The path to the file to open.
        /// </param>
        /// <param name='accountname'>
        /// The name of the data lake account that the file lives in.
        /// </param>
        /// <param name='length'>
        /// </param>
        /// <param name='offset'>
        /// </param>
        /// <param name='buffersize'>
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='read'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse<byte[]>> DirectOpenWithHttpMessagesAsync(string directFilePath, string accountname, long? length = default(long?), long? offset = default(long?), long? buffersize = default(long?), string op = "OPEN", bool? read = true, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (directFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "directFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("directFilePath", directFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("length", length);
                tracingParameters.Add("offset", offset);
                tracingParameters.Add("buffersize", buffersize);
                tracingParameters.Add("op", op);
                tracingParameters.Add("read", read);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "DirectOpen", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{directFilePath}").ToString();
            url = url.Replace("{directFilePath}", Uri.EscapeDataString(directFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (length != null)
            {
                queryParameters.Add(string.Format("length={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(length, this.Client.SerializationSettings).Trim('"'))));
            }
            if (offset != null)
            {
                queryParameters.Add(string.Format("offset={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(offset, this.Client.SerializationSettings).Trim('"'))));
            }
            if (buffersize != null)
            {
                queryParameters.Add(string.Format("buffersize={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(buffersize, this.Client.SerializationSettings).Trim('"'))));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (read != null)
            {
                queryParameters.Add(string.Format("read={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(read, this.Client.SerializationSettings).Trim('"'))));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("GET");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError errorBody = JsonConvert.DeserializeObject<CloudError>(responseContent, this.Client.DeserializationSettings);
                    if (errorBody != null)
                    {
                        ex = new CloudException(errorBody.Message);
                        ex.Body = errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse<byte[]>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)statusCode == 200)
            {
                try
                {
                    result.Body = await httpResponse.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
                }
                catch (JsonException ex)
                {
                    throw new RestException("Unable to deserialize the response.", ex);
                }
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Sets ACL entries on a file or folder.
        /// </summary>
        /// <param name='setAclFilePath'>
        /// The path to the directory or file to set ACLs on.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='aclspec'>
        /// The ACL spec included in ACL creation operations in the format
        /// '[default:]user|group|other::r|-w|-x|-'
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> SetAclWithHttpMessagesAsync(string setAclFilePath, string accountname, string aclspec, string op = "SETACL", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (setAclFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "setAclFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (aclspec == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "aclspec");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("setAclFilePath", setAclFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("aclspec", aclspec);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "SetAcl", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{setAclFilePath}").ToString();
            url = url.Replace("{setAclFilePath}", Uri.EscapeDataString(setAclFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (aclspec != null)
            {
                queryParameters.Add(string.Format("aclspec={0}", Uri.EscapeDataString(aclspec)));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Modifies existing ACL entries on a file or folder.
        /// </summary>
        /// <param name='modifyAclFilePath'>
        /// The path to the directory or file to modify ACLs on.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='aclspec'>
        /// The ACL spec included in ACL modification operations in the format
        /// '[default:]user|group|other::r|-w|-x|-'
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> ModifyAclEntriesWithHttpMessagesAsync(string modifyAclFilePath, string accountname, string aclspec, string op = "MODIFYACLENTRIES", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (modifyAclFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "modifyAclFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (aclspec == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "aclspec");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("modifyAclFilePath", modifyAclFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("aclspec", aclspec);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "ModifyAclEntries", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{modifyAclFilePath}").ToString();
            url = url.Replace("{modifyAclFilePath}", Uri.EscapeDataString(modifyAclFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (aclspec != null)
            {
                queryParameters.Add(string.Format("aclspec={0}", Uri.EscapeDataString(aclspec)));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Removes existing ACL entries on a file or folder.
        /// </summary>
        /// <param name='removeAclFilePath'>
        /// The path to the directory or file to remove ACLs on.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='aclspec'>
        /// The ACL spec included in ACL removal operations in the format
        /// '[default:]user|group|other'
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> RemoveAclEntriesWithHttpMessagesAsync(string removeAclFilePath, string accountname, string aclspec, string op = "REMOVEACLENTRIES", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (removeAclFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "removeAclFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (aclspec == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "aclspec");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("removeAclFilePath", removeAclFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("aclspec", aclspec);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "RemoveAclEntries", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{removeAclFilePath}").ToString();
            url = url.Replace("{removeAclFilePath}", Uri.EscapeDataString(removeAclFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (aclspec != null)
            {
                queryParameters.Add(string.Format("aclspec={0}", Uri.EscapeDataString(aclspec)));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Removes default ACL entries on a file or folder.
        /// </summary>
        /// <param name='removeDefaultAclFilePath'>
        /// The path to the directory or file to remove ACL on.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> RemoveDefaultAclWithHttpMessagesAsync(string removeDefaultAclFilePath, string accountname, string op = "REMOVEDEFAULTACL", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (removeDefaultAclFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "removeDefaultAclFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("removeDefaultAclFilePath", removeDefaultAclFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "RemoveDefaultAcl", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{removeDefaultAclFilePath}").ToString();
            url = url.Replace("{removeDefaultAclFilePath}", Uri.EscapeDataString(removeDefaultAclFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Removes the existing ACL on a file or folder.
        /// </summary>
        /// <param name='aclFilePath'>
        /// The path to the directory or file to remove ACL on.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> RemoveAclWithHttpMessagesAsync(string aclFilePath, string accountname, string op = "REMOVEACL", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (aclFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "aclFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("aclFilePath", aclFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "RemoveAcl", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{aclFilePath}").ToString();
            url = url.Replace("{aclFilePath}", Uri.EscapeDataString(aclFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Gets ACL entries on a file or folder.
        /// </summary>
        /// <param name='aclFilePath'>
        /// The path to the directory or file to get ACLs on.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse<AclStatusResult>> GetAclStatusWithHttpMessagesAsync(string aclFilePath, string accountname, string op = "GETACLSTATUS", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (aclFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "aclFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("aclFilePath", aclFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "GetAclStatus", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{aclFilePath}").ToString();
            url = url.Replace("{aclFilePath}", Uri.EscapeDataString(aclFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("GET");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError errorBody = JsonConvert.DeserializeObject<CloudError>(responseContent, this.Client.DeserializationSettings);
                    if (errorBody != null)
                    {
                        ex = new CloudException(errorBody.Message);
                        ex.Body = errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse<AclStatusResult>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)statusCode == 200)
            {
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result.Body = JsonConvert.DeserializeObject<AclStatusResult>(responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    throw new RestException("Unable to deserialize the response.", ex);
                }
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Initiates a file append request, resulting in a return of the data node
        /// location that will service the request.
        /// </summary>
        /// <param name='filePath'>
        /// The path to the file to append to.
        /// </param>
        /// <param name='accountname'>
        /// The name of the Data Lake Store account to append to the file in
        /// </param>
        /// <param name='buffersize'>
        /// The optional buffer size to use when appending data
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationHeaderResponse<FileSystemBeginAppendHeaders>> BeginAppendWithHttpMessagesAsync(string filePath, string accountname, long? buffersize = default(long?), string op = "APPEND", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (filePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "filePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("buffersize", buffersize);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "BeginAppend", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{filePath}").ToString();
            url = url.Replace("{filePath}", Uri.EscapeDataString(filePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (buffersize != null)
            {
                queryParameters.Add(string.Format("buffersize={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(buffersize, this.Client.SerializationSettings).Trim('"'))));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("POST");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 307)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationHeaderResponse<FileSystemBeginAppendHeaders>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            try
            {
                result.Headers = httpResponse.GetHeadersAsJson().ToObject<FileSystemBeginAppendHeaders>(JsonSerializer.Create(this.Client.DeserializationSettings));
            }
            catch (JsonException ex)
            {
                throw new RestException("Unable to deserialize the headers.", ex);
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Initiates a file creation request, resulting in a return of the data node
        /// location that will service the request.
        /// </summary>
        /// <param name='filePath'>
        /// The path to the file to create.
        /// </param>
        /// <param name='accountname'>
        /// The name of the Data Lake Store account to create the file in
        /// </param>
        /// <param name='buffersize'>
        /// The size of the buffer used in transferring data.
        /// </param>
        /// <param name='overwrite'>
        /// The indication of if the file should be overwritten.
        /// </param>
        /// <param name='blocksize'>
        /// The block size of a file, in bytes.
        /// </param>
        /// <param name='replication'>
        /// The number of replications of a file.
        /// </param>
        /// <param name='permission'>
        /// The permissions of a file or directory.
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationHeaderResponse<FileSystemBeginCreateHeaders>> BeginCreateWithHttpMessagesAsync(string filePath, string accountname, long? buffersize = default(long?), bool? overwrite = default(bool?), long? blocksize = default(long?), int? replication = default(int?), string permission = default(string), string op = "CREATE", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (filePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "filePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("buffersize", buffersize);
                tracingParameters.Add("overwrite", overwrite);
                tracingParameters.Add("blocksize", blocksize);
                tracingParameters.Add("replication", replication);
                tracingParameters.Add("permission", permission);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "BeginCreate", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{filePath}").ToString();
            url = url.Replace("{filePath}", Uri.EscapeDataString(filePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (buffersize != null)
            {
                queryParameters.Add(string.Format("buffersize={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(buffersize, this.Client.SerializationSettings).Trim('"'))));
            }
            if (overwrite != null)
            {
                queryParameters.Add(string.Format("overwrite={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(overwrite, this.Client.SerializationSettings).Trim('"'))));
            }
            if (blocksize != null)
            {
                queryParameters.Add(string.Format("blocksize={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(blocksize, this.Client.SerializationSettings).Trim('"'))));
            }
            if (replication != null)
            {
                queryParameters.Add(string.Format("replication={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(replication, this.Client.SerializationSettings).Trim('"'))));
            }
            if (permission != null)
            {
                queryParameters.Add(string.Format("permission={0}", Uri.EscapeDataString(permission)));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 307)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationHeaderResponse<FileSystemBeginCreateHeaders>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            try
            {
                result.Headers = httpResponse.GetHeadersAsJson().ToObject<FileSystemBeginCreateHeaders>(JsonSerializer.Create(this.Client.DeserializationSettings));
            }
            catch (JsonException ex)
            {
                throw new RestException("Unable to deserialize the headers.", ex);
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Initiates a file open (read) request, resulting in a return of the data
        /// node location that will service the request.
        /// </summary>
        /// <param name='filePath'>
        /// The path to the file to open.
        /// </param>
        /// <param name='accountname'>
        /// The name of the data lake account that the file lives in.
        /// </param>
        /// <param name='length'>
        /// </param>
        /// <param name='offset'>
        /// </param>
        /// <param name='buffersize'>
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationHeaderResponse<FileSystemBeginOpenHeaders>> BeginOpenWithHttpMessagesAsync(string filePath, string accountname, long? length = default(long?), long? offset = default(long?), long? buffersize = default(long?), string op = "OPEN", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (filePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "filePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("length", length);
                tracingParameters.Add("offset", offset);
                tracingParameters.Add("buffersize", buffersize);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "BeginOpen", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{filePath}").ToString();
            url = url.Replace("{filePath}", Uri.EscapeDataString(filePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (length != null)
            {
                queryParameters.Add(string.Format("length={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(length, this.Client.SerializationSettings).Trim('"'))));
            }
            if (offset != null)
            {
                queryParameters.Add(string.Format("offset={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(offset, this.Client.SerializationSettings).Trim('"'))));
            }
            if (buffersize != null)
            {
                queryParameters.Add(string.Format("buffersize={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(buffersize, this.Client.SerializationSettings).Trim('"'))));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("GET");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 307)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationHeaderResponse<FileSystemBeginOpenHeaders>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            try
            {
                result.Headers = httpResponse.GetHeadersAsJson().ToObject<FileSystemBeginOpenHeaders>(JsonSerializer.Create(this.Client.DeserializationSettings));
            }
            catch (JsonException ex)
            {
                throw new RestException("Unable to deserialize the headers.", ex);
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Deletes the requested file or folder, optionally recursively.
        /// </summary>
        /// <param name='filePath'>
        /// The path to the file or folder to delete.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='recursive'>
        /// The optional switch indicating if the delete should be recursive
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse<FileOperationResult>> DeleteWithHttpMessagesAsync(string filePath, string accountname, bool? recursive = default(bool?), string op = "DELETE", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (filePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "filePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("recursive", recursive);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "Delete", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{filePath}").ToString();
            url = url.Replace("{filePath}", Uri.EscapeDataString(filePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (recursive != null)
            {
                queryParameters.Add(string.Format("recursive={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(recursive, this.Client.SerializationSettings).Trim('"'))));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("DELETE");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError errorBody = JsonConvert.DeserializeObject<CloudError>(responseContent, this.Client.DeserializationSettings);
                    if (errorBody != null)
                    {
                        ex = new CloudException(errorBody.Message);
                        ex.Body = errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse<FileOperationResult>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)statusCode == 200)
            {
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result.Body = JsonConvert.DeserializeObject<FileOperationResult>(responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    throw new RestException("Unable to deserialize the response.", ex);
                }
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Creates a symbolic link.
        /// </summary>
        /// <param name='symLinkFilePath'>
        /// The path to the directory or file to create a symlink of.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='destination'>
        /// The path to create the symlink at
        /// </param>
        /// <param name='createParent'>
        /// If the parent directories do not exist, indicates if they should be
        /// created.
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> CreateSymLinkWithHttpMessagesAsync(string symLinkFilePath, string accountname, string destination, bool? createParent = false, string op = "CREATESYMLINK", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (symLinkFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "symLinkFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (destination == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "destination");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("symLinkFilePath", symLinkFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("destination", destination);
                tracingParameters.Add("createParent", createParent);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "CreateSymLink", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{symLinkFilePath}").ToString();
            url = url.Replace("{symLinkFilePath}", Uri.EscapeDataString(symLinkFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (destination != null)
            {
                queryParameters.Add(string.Format("destination={0}", Uri.EscapeDataString(destination)));
            }
            if (createParent != null)
            {
                queryParameters.Add(string.Format("createParent={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(createParent, this.Client.SerializationSettings).Trim('"'))));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Rename a directory or file.
        /// </summary>
        /// <param name='renameFilePath'>
        /// The path to the directory to move/rename.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='destination'>
        /// The path to move/rename the file or folder to
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse<FileOperationResult>> RenameWithHttpMessagesAsync(string renameFilePath, string accountname, string destination, string op = "RENAME", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (renameFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "renameFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (destination == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "destination");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("renameFilePath", renameFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("destination", destination);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "Rename", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{renameFilePath}").ToString();
            url = url.Replace("{renameFilePath}", Uri.EscapeDataString(renameFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (destination != null)
            {
                queryParameters.Add(string.Format("destination={0}", Uri.EscapeDataString(destination)));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError errorBody = JsonConvert.DeserializeObject<CloudError>(responseContent, this.Client.DeserializationSettings);
                    if (errorBody != null)
                    {
                        ex = new CloudException(errorBody.Message);
                        ex.Body = errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse<FileOperationResult>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)statusCode == 200)
            {
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result.Body = JsonConvert.DeserializeObject<FileOperationResult>(responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    throw new RestException("Unable to deserialize the response.", ex);
                }
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Sets the owner of a file or folder.
        /// </summary>
        /// <param name='setOwnerFilePath'>
        /// The path to the directory or file to set the owner on.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='owner'>
        /// The username who is the owner of a file/directory, if empty remains
        /// unchanged.
        /// </param>
        /// <param name='group'>
        /// The group who is the group owner of a file/directory, if empty remains
        /// unchanged.
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> SetOwnerWithHttpMessagesAsync(string setOwnerFilePath, string accountname, string owner = default(string), string group = default(string), string op = "SETOWNER", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (setOwnerFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "setOwnerFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("setOwnerFilePath", setOwnerFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("owner", owner);
                tracingParameters.Add("group", group);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "SetOwner", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{setOwnerFilePath}").ToString();
            url = url.Replace("{setOwnerFilePath}", Uri.EscapeDataString(setOwnerFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (owner != null)
            {
                queryParameters.Add(string.Format("owner={0}", Uri.EscapeDataString(owner)));
            }
            if (group != null)
            {
                queryParameters.Add(string.Format("group={0}", Uri.EscapeDataString(group)));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Sets the permission of the file or folder.
        /// </summary>
        /// <param name='setPermissionFilePath'>
        /// The path to the directory or file to set permissions on.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='permission'>
        /// A string octal representation of the permission (i.e 'rwx'), if empty
        /// remains unchanged.
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> SetPermissionWithHttpMessagesAsync(string setPermissionFilePath, string accountname, string permission = default(string), string op = "SETPERMISSION", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (setPermissionFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "setPermissionFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("setPermissionFilePath", setPermissionFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("permission", permission);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "SetPermission", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{setPermissionFilePath}").ToString();
            url = url.Replace("{setPermissionFilePath}", Uri.EscapeDataString(setPermissionFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (permission != null)
            {
                queryParameters.Add(string.Format("permission={0}", Uri.EscapeDataString(permission)));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Sets the value of the replication factor.
        /// </summary>
        /// <param name='setReplicationFilePath'>
        /// The path to the directory or file to create a replication of.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='replication'>
        /// The number of replications of a file.
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse<FileOperationResult>> SetReplicationWithHttpMessagesAsync(string setReplicationFilePath, string accountname, int? replication = default(int?), string op = "SETREPLICATION", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (setReplicationFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "setReplicationFilePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("setReplicationFilePath", setReplicationFilePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("replication", replication);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "SetReplication", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{setReplicationFilePath}").ToString();
            url = url.Replace("{setReplicationFilePath}", Uri.EscapeDataString(setReplicationFilePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (replication != null)
            {
                queryParameters.Add(string.Format("replication={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(replication, this.Client.SerializationSettings).Trim('"'))));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError errorBody = JsonConvert.DeserializeObject<CloudError>(responseContent, this.Client.DeserializationSettings);
                    if (errorBody != null)
                    {
                        ex = new CloudException(errorBody.Message);
                        ex.Body = errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse<FileOperationResult>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)statusCode == 200)
            {
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result.Body = JsonConvert.DeserializeObject<FileOperationResult>(responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    throw new RestException("Unable to deserialize the response.", ex);
                }
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Appends to the file specified in the link that was returned from
        /// BeginAppend.
        /// </summary>
        /// <param name='fileAppendRequestLink'>
        /// The link to the file to append to including all required parameters.
        /// </param>
        /// <param name='streamContents'>
        /// The file contents to include when appending to the file.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> AppendWithHttpMessagesAsync(string fileAppendRequestLink, System.IO.Stream streamContents, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (fileAppendRequestLink == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "fileAppendRequestLink");
            }
            if (streamContents == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "streamContents");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fileAppendRequestLink", fileAppendRequestLink);
                tracingParameters.Add("streamContents", streamContents);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "Append", tracingParameters);
            }
            // Construct URL
            var url = fileAppendRequestLink;
            List<string> queryParameters = new List<string>();
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("POST");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Serialize Request
            httpRequest.Content = new StreamContent(streamContents);
            httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Sets the access or modification time on a file or folder.
        /// </summary>
        /// <param name='sourcePath'>
        /// The path to the directory or file to set permissions on.
        /// </param>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='modificationtime'>
        /// The modification time of a file/directory. If -1 remains unchanged
        /// </param>
        /// <param name='accesstime'>
        /// The access time of a file/directory. If -1 remains unchanged
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> SetTimesWithHttpMessagesAsync(string sourcePath, string accountname, long? modificationtime = default(long?), long? accesstime = default(long?), string op = "SETTIMES", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (sourcePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "sourcePath");
            }
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("sourcePath", sourcePath);
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("modificationtime", modificationtime);
                tracingParameters.Add("accesstime", accesstime);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "SetTimes", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1/{sourcePath}").ToString();
            url = url.Replace("{sourcePath}", Uri.EscapeDataString(sourcePath));
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (modificationtime != null)
            {
                queryParameters.Add(string.Format("modificationtime={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(modificationtime, this.Client.SerializationSettings).Trim('"'))));
            }
            if (accesstime != null)
            {
                queryParameters.Add(string.Format("accesstime={0}", Uri.EscapeDataString(JsonConvert.SerializeObject(accesstime, this.Client.SerializationSettings).Trim('"'))));
            }
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Get the home directory for the specified account.
        /// </summary>
        /// <param name='accountname'>
        /// The name of the account to use
        /// </param>
        /// <param name='op'>
        /// This is the REQUIRED value for this parameter and method combination.
        /// Changing the value will result in unexpected behavior, please do not do
        /// so.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse<HomeDirectoryResult>> GetHomeDirectoryWithHttpMessagesAsync(string accountname, string op = "GETHOMEDIRECTORY", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (accountname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountname");
            }
            if (this.Client.ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
            }
            if (this.Client.SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.SubscriptionId");
            }
            if (this.Client.Datalakeserviceuri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Datalakeserviceuri");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("accountname", accountname);
                tracingParameters.Add("op", op);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "GetHomeDirectory", tracingParameters);
            }
            // Construct URL
            var baseUrl = this.Client.BaseUri.AbsoluteUri;
            var url = new Uri(new Uri(baseUrl + (baseUrl.EndsWith("/") ? "" : "/")), "webhdfs/v1").ToString();
            url = url.Replace("accountname", Uri.EscapeDataString(accountname));
            url = url.Replace("datalakeserviceuri", Uri.EscapeDataString(this.Client.Datalakeserviceuri));
            List<string> queryParameters = new List<string>();
            if (op != null)
            {
                queryParameters.Add(string.Format("op={0}", Uri.EscapeDataString(op)));
            }
            if (this.Client.ApiVersion != null)
            {
                queryParameters.Add(string.Format("api-version={0}", Uri.EscapeDataString(this.Client.ApiVersion)));
            }
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("GET");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.SubscriptionId != null)
            {
                if (httpRequest.Headers.Contains("subscriptionId"))
                {
                    httpRequest.Headers.Remove("subscriptionId");
                }
                httpRequest.Headers.TryAddWithoutValidation("subscriptionId", this.Client.SubscriptionId);
            }
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError errorBody = JsonConvert.DeserializeObject<CloudError>(responseContent, this.Client.DeserializationSettings);
                    if (errorBody != null)
                    {
                        ex = new CloudException(errorBody.Message);
                        ex.Body = errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse<HomeDirectoryResult>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)statusCode == 200)
            {
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result.Body = JsonConvert.DeserializeObject<HomeDirectoryResult>(responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    throw new RestException("Unable to deserialize the response.", ex);
                }
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Creates the file specified in the link that was returned from BeginCreate.
        /// </summary>
        /// <param name='fileCreateRequestLink'>
        /// The link to the file to create including all required parameters.
        /// </param>
        /// <param name='streamContents'>
        /// The file contents to include when creating the file. This parameter is not
        /// required, and if not passed results an empty file.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse> CreateWithHttpMessagesAsync(string fileCreateRequestLink, System.IO.Stream streamContents = default(System.IO.Stream), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (fileCreateRequestLink == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "fileCreateRequestLink");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fileCreateRequestLink", fileCreateRequestLink);
                tracingParameters.Add("streamContents", streamContents);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "Create", tracingParameters);
            }
            // Construct URL
            var url = fileCreateRequestLink;
            List<string> queryParameters = new List<string>();
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("PUT");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Serialize Request
            httpRequest.Content = new StreamContent(streamContents);
            httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 201)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Gets the data associated with the file handle requested.
        /// </summary>
        /// <param name='fileOpenRequestLink'>
        /// The link to the file to open including all required parameters.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<AzureOperationResponse<byte[]>> OpenWithHttpMessagesAsync(string fileOpenRequestLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (fileOpenRequestLink == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "fileOpenRequestLink");
            }
            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fileOpenRequestLink", fileOpenRequestLink);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(invocationId, this, "Open", tracingParameters);
            }
            // Construct URL
            var url = fileOpenRequestLink;
            List<string> queryParameters = new List<string>();
            if (queryParameters.Count > 0)
            {
                url += "?" + string.Join("&", queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = new HttpMethod("GET");
            httpRequest.RequestUri = new Uri(url);
            // Set Headers
            httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", Guid.NewGuid().ToString());
            if (this.Client.AcceptLanguage != null)
            {
                if (httpRequest.Headers.Contains("accept-language"))
                {
                    httpRequest.Headers.Remove("accept-language");
                }
                httpRequest.Headers.TryAddWithoutValidation("accept-language", this.Client.AcceptLanguage);
            }
            if (customHeaders != null)
            {
                foreach(var header in customHeaders)
                {
                    if (httpRequest.Headers.Contains(header.Key))
                    {
                        httpRequest.Headers.Remove(header.Key);
                    }
                    httpRequest.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            if ((int)statusCode != 200)
            {
                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", statusCode));
                try
                {
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    CloudError errorBody = JsonConvert.DeserializeObject<CloudError>(responseContent, this.Client.DeserializationSettings);
                    if (errorBody != null)
                    {
                        ex = new CloudException(errorBody.Message);
                        ex.Body = errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = httpRequest;
                ex.Response = httpResponse;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }
            // Create Result
            var result = new AzureOperationResponse<byte[]>();
            result.Request = httpRequest;
            result.Response = httpResponse;
            if (httpResponse.Headers.Contains("x-ms-request-id"))
            {
                result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)statusCode == 200)
            {
                try
                {
                    result.Body = await httpResponse.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
                }
                catch (JsonException ex)
                {
                    throw new RestException("Unable to deserialize the response.", ex);
                }
            }
            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

    }
}

