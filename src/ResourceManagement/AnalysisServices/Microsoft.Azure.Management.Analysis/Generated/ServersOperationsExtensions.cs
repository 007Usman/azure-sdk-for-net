// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Analysis
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for ServersOperations.
    /// </summary>
    public static partial class ServersOperationsExtensions
    {
            /// <summary>
            /// Gets details about the specified Analysis Services server
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            public static AnalysisServicesResource GetDetails(this IServersOperations operations, string analysisServerName, string resourceGroupName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IServersOperations)s).GetDetailsAsync(analysisServerName, resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details about the specified Analysis Services server
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AnalysisServicesResource> GetDetailsAsync(this IServersOperations operations, string analysisServerName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDetailsWithHttpMessagesAsync(analysisServerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Provisions the specified Analysis Services server based on the
            /// configuration specified in the request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverParameters'>
            /// Request body for provisioning
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            public static AnalysisServicesResource Create(this IServersOperations operations, AnalysisServicesResource serverParameters, string analysisServerName, string resourceGroupName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IServersOperations)s).CreateAsync(serverParameters, analysisServerName, resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Provisions the specified Analysis Services server based on the
            /// configuration specified in the request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverParameters'>
            /// Request body for provisioning
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AnalysisServicesResource> CreateAsync(this IServersOperations operations, AnalysisServicesResource serverParameters, string analysisServerName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(serverParameters, analysisServerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Provisions the specified Analysis Services server based on the
            /// configuration specified in the request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverParameters'>
            /// Request body for provisioning
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            public static AnalysisServicesResource BeginCreate(this IServersOperations operations, AnalysisServicesResource serverParameters, string analysisServerName, string resourceGroupName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IServersOperations)s).BeginCreateAsync(serverParameters, analysisServerName, resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Provisions the specified Analysis Services server based on the
            /// configuration specified in the request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverParameters'>
            /// Request body for provisioning
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AnalysisServicesResource> BeginCreateAsync(this IServersOperations operations, AnalysisServicesResource serverParameters, string analysisServerName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(serverParameters, analysisServerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            public static void Delete(this IServersOperations operations, string analysisServerName, string resourceGroupName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IServersOperations)s).DeleteAsync(analysisServerName, resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IServersOperations operations, string analysisServerName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(analysisServerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            public static void BeginDelete(this IServersOperations operations, string analysisServerName, string resourceGroupName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IServersOperations)s).BeginDeleteAsync(analysisServerName, resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginDeleteAsync(this IServersOperations operations, string analysisServerName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(analysisServerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates the current state of the specified Analysis Services server
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='updateServerParameters'>
            /// Request object for updating the server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            public static AnalysisServicesResource Update(this IServersOperations operations, string analysisServerName, AnalysisServicesResourceUpdateParameters updateServerParameters, string resourceGroupName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IServersOperations)s).UpdateAsync(analysisServerName, updateServerParameters, resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the current state of the specified Analysis Services server
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='updateServerParameters'>
            /// Request object for updating the server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AnalysisServicesResource> UpdateAsync(this IServersOperations operations, string analysisServerName, AnalysisServicesResourceUpdateParameters updateServerParameters, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(analysisServerName, updateServerParameters, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the current state of the specified Analysis Services server
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='updateServerParameters'>
            /// Request object for updating the server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            public static AnalysisServicesResource BeginUpdate(this IServersOperations operations, string analysisServerName, AnalysisServicesResourceUpdateParameters updateServerParameters, string resourceGroupName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IServersOperations)s).BeginUpdateAsync(analysisServerName, updateServerParameters, resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the current state of the specified Analysis Services server
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='analysisServerName'>
            /// Name of the Analysis Services server
            /// </param>
            /// <param name='updateServerParameters'>
            /// Request object for updating the server
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AnalysisServicesResource> BeginUpdateAsync(this IServersOperations operations, string analysisServerName, AnalysisServicesResourceUpdateParameters updateServerParameters, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(analysisServerName, updateServerParameters, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the Analysis Services servers for the given resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            public static System.Collections.Generic.IEnumerable<AnalysisServicesResource> ListByResourceGroup(this IServersOperations operations, string resourceGroupName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IServersOperations)s).ListByResourceGroupAsync(resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the Analysis Services servers for the given resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Azure Resource group which a given Analysis Services server is
            /// part of.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.Collections.Generic.IEnumerable<AnalysisServicesResource>> ListByResourceGroupAsync(this IServersOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the Analysis Services servers for the given subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IEnumerable<AnalysisServicesResource> List(this IServersOperations operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IServersOperations)s).ListAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the Analysis Services servers for the given subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.Collections.Generic.IEnumerable<AnalysisServicesResource>> ListAsync(this IServersOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
