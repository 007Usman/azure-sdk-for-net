// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearning.WebServices
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class MachineLearningWebServicesManagementClientAPIsExtensions
    {
            /// <summary>
            /// Create a new Web Service or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WebService CreateOrUpdateWebService(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).CreateOrUpdateWebServiceAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Web Service or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> CreateOrUpdateWebServiceAsync( this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWebServiceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a Web Service information by its name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WebService GetWebService(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).GetWebServiceAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a Web Service information by its name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> GetWebServiceAsync( this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServiceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch an existing Web Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WebService PatchWebService(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).PatchWebServiceAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch an existing Web Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> PatchWebServiceAsync( this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWebServiceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing Web Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteWebService(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).DeleteWebServiceAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing Web Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteWebServiceAsync( this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWebServiceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the primary and secondary keys of a particular Web Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WebServiceKeys GetWebServiceKeys(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).GetWebServiceKeysAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the primary and secondary keys of a particular Web Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebServiceKeys> GetWebServiceKeysAsync( this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServiceKeysWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all Web Services' information in a given Resource Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetWebServicesInResourceGroupOKResponse GetWebServicesInResourceGroup(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).GetWebServicesInResourceGroupAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all Web Services' information in a given Resource Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetWebServicesInResourceGroupOKResponse> GetWebServicesInResourceGroupAsync( this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServicesInResourceGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Web Services' information in current Azure subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetWebServicesInSubscriptionOKResponse GetWebServicesInSubscription(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).GetWebServicesInSubscriptionAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Web Services' information in current Azure subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetWebServicesInSubscriptionOKResponse> GetWebServicesInSubscriptionAsync( this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServicesInSubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check the Web Service Name is valid and not in use
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CheckNameResult CheckNameAvaliability(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).CheckNameAvaliabilityAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check the Web Service Name is valid and not in use
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameResult> CheckNameAvaliabilityAsync( this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvaliabilityWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all available operations of a Web Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetOperationsOKResponse GetOperations(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).GetOperationsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all available operations of a Web Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetOperationsOKResponse> GetOperationsAsync( this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
