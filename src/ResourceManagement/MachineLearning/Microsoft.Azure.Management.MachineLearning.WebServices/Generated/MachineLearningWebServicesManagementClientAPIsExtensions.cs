// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearning.WebServices
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for MachineLearningWebServicesManagementClientAPIs.
    /// </summary>
    public static partial class MachineLearningWebServicesManagementClientAPIsExtensions
    {
            /// <summary>
            /// Create a new Azure ML web service or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createOrUpdatePayload'>
            /// The payload to create or update the Azure ML web service.
            /// </param>
            public static WebService CreateOrUpdateWebService(this IMachineLearningWebServicesManagementClientAPIs operations, WebService createOrUpdatePayload)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).CreateOrUpdateWebServiceAsync(createOrUpdatePayload), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Azure ML web service or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createOrUpdatePayload'>
            /// The payload to create or update the Azure ML web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> CreateOrUpdateWebServiceAsync(this IMachineLearningWebServicesManagementClientAPIs operations, WebService createOrUpdatePayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWebServiceWithHttpMessagesAsync(createOrUpdatePayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Azure ML web service or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createOrUpdatePayload'>
            /// The payload to create or update the Azure ML web service.
            /// </param>
            public static WebService BeginCreateOrUpdateWebService(this IMachineLearningWebServicesManagementClientAPIs operations, WebService createOrUpdatePayload)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).BeginCreateOrUpdateWebServiceAsync(createOrUpdatePayload), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Azure ML web service or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createOrUpdatePayload'>
            /// The payload to create or update the Azure ML web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> BeginCreateOrUpdateWebServiceAsync(this IMachineLearningWebServicesManagementClientAPIs operations, WebService createOrUpdatePayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWebServiceWithHttpMessagesAsync(createOrUpdatePayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve an Azure ML web service definition by its subscription, resource
            /// group and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WebService GetWebService(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).GetWebServiceAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve an Azure ML web service definition by its subscription, resource
            /// group and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> GetWebServiceAsync(this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServiceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch an existing Azure ML web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='patchPayload'>
            /// The payload to patch the Azure ML with.
            /// </param>
            public static WebService PatchWebService(this IMachineLearningWebServicesManagementClientAPIs operations, WebService patchPayload)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).PatchWebServiceAsync(patchPayload), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch an existing Azure ML web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='patchPayload'>
            /// The payload to patch the Azure ML with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> PatchWebServiceAsync(this IMachineLearningWebServicesManagementClientAPIs operations, WebService patchPayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWebServiceWithHttpMessagesAsync(patchPayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch an existing Azure ML web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='patchPayload'>
            /// The payload to patch the Azure ML with.
            /// </param>
            public static WebService BeginPatchWebService(this IMachineLearningWebServicesManagementClientAPIs operations, WebService patchPayload)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).BeginPatchWebServiceAsync(patchPayload), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch an existing Azure ML web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='patchPayload'>
            /// The payload to patch the Azure ML with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> BeginPatchWebServiceAsync(this IMachineLearningWebServicesManagementClientAPIs operations, WebService patchPayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPatchWebServiceWithHttpMessagesAsync(patchPayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove an existing Azure ML web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteWebService(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).DeleteWebServiceAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove an existing Azure ML web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteWebServiceAsync(this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWebServiceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Remove an existing Azure ML web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void BeginDeleteWebService(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).BeginDeleteWebServiceAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove an existing Azure ML web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteWebServiceAsync(this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginDeleteWebServiceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the primary and secondary access keys of a particular Azure ML web
            /// service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WebServiceKeys GetWebServiceKeys(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).GetWebServiceKeysAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the primary and secondary access keys of a particular Azure ML web
            /// service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebServiceKeys> GetWebServiceKeysAsync(this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServiceKeysWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all Azure ML web services in a given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PaginatedWebServicesList GetWebServicesInResourceGroup(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).GetWebServicesInResourceGroupAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all Azure ML web services in a given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedWebServicesList> GetWebServicesInResourceGroupAsync(this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServicesInResourceGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all Azure ML web services in the current Azure subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PaginatedWebServicesList GetWebServicesInSubscription(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).GetWebServicesInSubscriptionAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all Azure ML web services in the current Azure subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedWebServicesList> GetWebServicesInSubscriptionAsync(this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServicesInSubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all available operations for the Microsoft.MachineLearning provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetOperationsOKResponse GetOperations(this IMachineLearningWebServicesManagementClientAPIs operations)
            {
                return Task.Factory.StartNew(s => ((IMachineLearningWebServicesManagementClientAPIs)s).GetOperationsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all available operations for the Microsoft.MachineLearning provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetOperationsOKResponse> GetOperationsAsync(this IMachineLearningWebServicesManagementClientAPIs operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
