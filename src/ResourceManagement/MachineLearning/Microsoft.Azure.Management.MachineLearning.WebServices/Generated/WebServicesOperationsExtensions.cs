// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearning.WebServices
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for WebServicesOperations.
    /// </summary>
    public static partial class WebServicesOperationsExtensions
    {
            /// <summary>
            /// Create a new Azure ML web service or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createOrUpdatePayload'>
            /// The payload to create or update the Azure ML web service.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            public static WebService CreateOrUpdateWebService(this IWebServicesOperations operations, WebService createOrUpdatePayload, string resourceGroupName, string webServiceName)
            {
                return Task.Factory.StartNew(s => ((IWebServicesOperations)s).CreateOrUpdateWebServiceAsync(createOrUpdatePayload, resourceGroupName, webServiceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Azure ML web service or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createOrUpdatePayload'>
            /// The payload to create or update the Azure ML web service.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> CreateOrUpdateWebServiceAsync(this IWebServicesOperations operations, WebService createOrUpdatePayload, string resourceGroupName, string webServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWebServiceWithHttpMessagesAsync(createOrUpdatePayload, resourceGroupName, webServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Azure ML web service or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createOrUpdatePayload'>
            /// The payload to create or update the Azure ML web service.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            public static WebService BeginCreateOrUpdateWebService(this IWebServicesOperations operations, WebService createOrUpdatePayload, string resourceGroupName, string webServiceName)
            {
                return Task.Factory.StartNew(s => ((IWebServicesOperations)s).BeginCreateOrUpdateWebServiceAsync(createOrUpdatePayload, resourceGroupName, webServiceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Azure ML web service or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createOrUpdatePayload'>
            /// The payload to create or update the Azure ML web service.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> BeginCreateOrUpdateWebServiceAsync(this IWebServicesOperations operations, WebService createOrUpdatePayload, string resourceGroupName, string webServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWebServiceWithHttpMessagesAsync(createOrUpdatePayload, resourceGroupName, webServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve an Azure ML web service definition by its subscription, resource
            /// group and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            public static WebService GetWebService(this IWebServicesOperations operations, string resourceGroupName, string webServiceName)
            {
                return Task.Factory.StartNew(s => ((IWebServicesOperations)s).GetWebServiceAsync(resourceGroupName, webServiceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve an Azure ML web service definition by its subscription, resource
            /// group and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> GetWebServiceAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServiceWithHttpMessagesAsync(resourceGroupName, webServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch an existing Azure ML web service resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='patchPayload'>
            /// The payload to patch the Azure ML web service with.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            public static WebService PatchWebService(this IWebServicesOperations operations, WebService patchPayload, string resourceGroupName, string webServiceName)
            {
                return Task.Factory.StartNew(s => ((IWebServicesOperations)s).PatchWebServiceAsync(patchPayload, resourceGroupName, webServiceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch an existing Azure ML web service resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='patchPayload'>
            /// The payload to patch the Azure ML web service with.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> PatchWebServiceAsync(this IWebServicesOperations operations, WebService patchPayload, string resourceGroupName, string webServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWebServiceWithHttpMessagesAsync(patchPayload, resourceGroupName, webServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch an existing Azure ML web service resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='patchPayload'>
            /// The payload to patch the Azure ML web service with.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            public static WebService BeginPatchWebService(this IWebServicesOperations operations, WebService patchPayload, string resourceGroupName, string webServiceName)
            {
                return Task.Factory.StartNew(s => ((IWebServicesOperations)s).BeginPatchWebServiceAsync(patchPayload, resourceGroupName, webServiceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch an existing Azure ML web service resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='patchPayload'>
            /// The payload to patch the Azure ML web service with.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebService> BeginPatchWebServiceAsync(this IWebServicesOperations operations, WebService patchPayload, string resourceGroupName, string webServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPatchWebServiceWithHttpMessagesAsync(patchPayload, resourceGroupName, webServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove an existing Azure ML web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            public static void RemoveWebService(this IWebServicesOperations operations, string resourceGroupName, string webServiceName)
            {
                Task.Factory.StartNew(s => ((IWebServicesOperations)s).RemoveWebServiceAsync(resourceGroupName, webServiceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove an existing Azure ML web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveWebServiceAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemoveWebServiceWithHttpMessagesAsync(resourceGroupName, webServiceName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Remove an existing Azure ML web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            public static void BeginRemoveWebService(this IWebServicesOperations operations, string resourceGroupName, string webServiceName)
            {
                Task.Factory.StartNew(s => ((IWebServicesOperations)s).BeginRemoveWebServiceAsync(resourceGroupName, webServiceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove an existing Azure ML web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRemoveWebServiceAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginRemoveWebServiceWithHttpMessagesAsync(resourceGroupName, webServiceName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the access keys of a particular Azure ML web service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            public static WebServiceKeys GetWebServiceKeys(this IWebServicesOperations operations, string resourceGroupName, string webServiceName)
            {
                return Task.Factory.StartNew(s => ((IWebServicesOperations)s).GetWebServiceKeysAsync(resourceGroupName, webServiceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the access keys of a particular Azure ML web service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='webServiceName'>
            /// The Azure ML web service name which you want to reach.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebServiceKeys> GetWebServiceKeysAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServiceKeysWithHttpMessagesAsync(resourceGroupName, webServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all Azure ML web services in a given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='skiptoken'>
            /// Continuation token for pagination.
            /// </param>
            public static PaginatedWebServicesList GetWebServicesInResourceGroup(this IWebServicesOperations operations, string resourceGroupName, string skiptoken = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebServicesOperations)s).GetWebServicesInResourceGroupAsync(resourceGroupName, skiptoken), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all Azure ML web services in a given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='skiptoken'>
            /// Continuation token for pagination.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedWebServicesList> GetWebServicesInResourceGroupAsync(this IWebServicesOperations operations, string resourceGroupName, string skiptoken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServicesInResourceGroupWithHttpMessagesAsync(resourceGroupName, skiptoken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all Azure ML web services in the current Azure subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skiptoken'>
            /// Continuation token for pagination.
            /// </param>
            public static PaginatedWebServicesList GetWebServicesInSubscription(this IWebServicesOperations operations, string skiptoken = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebServicesOperations)s).GetWebServicesInSubscriptionAsync(skiptoken), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all Azure ML web services in the current Azure subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skiptoken'>
            /// Continuation token for pagination.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaginatedWebServicesList> GetWebServicesInSubscriptionAsync(this IWebServicesOperations operations, string skiptoken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServicesInSubscriptionWithHttpMessagesAsync(skiptoken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
