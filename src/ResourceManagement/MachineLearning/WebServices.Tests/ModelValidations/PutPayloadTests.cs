// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace WebServices.Tests
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    using Microsoft.Azure.Management.MachineLearning.WebServices;
    using Microsoft.Azure.Management.MachineLearning.WebServices.Models;
    using Microsoft.Rest;
    using Microsoft.Rest.ClientRuntime.Azure.TestFramework;
    using Newtonsoft.Json;
    using Xunit;
    public class WebServiceTests : TestBase
    {
        public WebServiceTests()
        {
            this.client = new MachineLearningWebServicesManagementClientAPIs(new TokenCredentials("foo"));
        }

        [Fact]
        public void WebServiceSerializationGraph()
        {
            var payload = this.CreateWebServiceGraph();

            string output = JsonConvert.SerializeObject(payload, client.SerializationSettings);
            this.ValidateJson(output, "TestData\\WebServiceGraph.json");
        }

        [Fact]
        public void WebServiceSerializationCode()
        {
            var payload = this.CreateWebServiceCode();

            string output = JsonConvert.SerializeObject(payload, client.SerializationSettings);
            this.ValidateJson(output, "TestData\\WebServiceCode.json");
        }

        [Fact]
        public void WebServiceDeserializationGraph()
        {
            string input = File.ReadAllText("TestData\\WebServiceGraph.json");
            var inputObj = JsonConvert.DeserializeObject<WebService>(input, client.DeserializationSettings);

            var expectedPayload = this.CreateWebServiceGraph();

            //TODO: Validate two objects are the same.
        }

        [Fact]
        public void WebServiceDeserializationCode()
        {
            string input = File.ReadAllText("TestData\\WebServiceCode.json");
            var inputObj = JsonConvert.DeserializeObject<WebService>(input, client.DeserializationSettings);

            var expectedPayload = this.CreateWebServiceCode();

            //TODO: Validate two objects are the same.
        }

        private MachineLearningWebServicesManagementClientAPIs client;

        private WebService CreateWebServiceGraph()
        {
            var payload = new WebService();
            payload.Location = "foo_Web_US";
            payload.Tags = new Tags("https://foo-graph.com");

            var payloadProperties = new WebServicePropertiesForGraph();
            this.UpdateWebServiceCommonProperties(payloadProperties);

            var graphPackage = new WebServicePropertiesForGraphPackage();
            {
                var nodes = new Dictionary<string, GraphNode>();
                nodes["1"] = new GraphNode("2", null, null, new Dictionary<string, string>());
                nodes["1"].Parameters["key1"] = "value1";
                nodes["1"].Parameters["key2"] = "value2";
                nodes["2"] = new GraphNode("1", null, null, new Dictionary<string, string>());
                nodes["2"].Parameters["key3"] = "value3";
                nodes["2"].Parameters["key4"] = "value4";
                graphPackage.Nodes = nodes;

                var edge1 = new GraphEdge("E3", null, "1", "p1");
                var edge2 = new GraphEdge("E1", "p7", "1", null);
                graphPackage.Edges = new List<GraphEdge> { edge1, edge2 };

                var param1 = new GraphParameter("Param1 description", "bar-foo");
                var link1 = new GraphParameterLink("2", "paramId1");
                var link2 = new GraphParameterLink("4", "paramId3");
                param1.Links = new List<GraphParameterLink> { link1, link2 };
                var param2 = new GraphParameter("Param2 description", "foo-bar");
                var link3 = new GraphParameterLink("7", "paramId5");
                var link4 = new GraphParameterLink("9", "paramId11");
                param2.Links = new List<GraphParameterLink> { link3, link4 };
                graphPackage.GraphParameters = new Dictionary<string, GraphParameter>();
                graphPackage.GraphParameters["id1"] = param1;
                graphPackage.GraphParameters["id2"] = param2;
            }

            payloadProperties.Package = graphPackage;
            payload.Properties = payloadProperties;

            return payload;
        }

        private WebService CreateWebServiceCode()
        {
            var payload = new WebService();

            payload.Location = "foo_Web_US--Code";
            payload.Tags = new Tags("https://foo-code.com");

            var payloadProperties = new WebServicePropertiesForCode();
            this.UpdateWebServiceCommonProperties(payloadProperties);
            payloadProperties.Package = new WebServicePropertiesForCodePackage("R-3.1", "fake code here", "2");
            payload.Properties = payloadProperties;

            return payload;
        }

        private void UpdateWebServiceCommonProperties(WebServiceProperties payloadProperties)
        {
            payloadProperties.Description = "test data";
            payloadProperties.Keys = new WebServiceKeys("primary key here", "secondary key here");
            payloadProperties.OperationModes = new List<string> { "Realtime", "Batch" };
            payloadProperties.RealtimeConfiguration = new RealtimeConfiguration(100, 200, 300);
            payloadProperties.BatchConfiguration = new BatchConfiguration();
            {
                payloadProperties.BatchConfiguration.JobDriver = "x.y, optional";
                payloadProperties.BatchConfiguration.Cluster = new ClusterDefinition("cluster id");
            }
            payloadProperties.ReadOnlyProperty = true;
            var dateTime = new DateTime(2007, 2, 4, 2, 20, 15, DateTimeKind.Local);
            payloadProperties.Diagnostics = new Diagnostics("level 2", dateTime.ToString());
            payloadProperties.StorageAccount = new StorageAccount("storage account id");
            payloadProperties.MachineLearningWorkspace = new MachineLearningWorkspace("workspace ID");
            payloadProperties.Input = new ModuleInterface();
            {
                payloadProperties.Input.Title = "Input title";
                payloadProperties.Input.Description = "Input Description";
                payloadProperties.Input.Type = "object";
                payloadProperties.Input.Properties = new Dictionary<string, AfxDataTable>();
                {
                    var column1 = new AfxDataTableColumn("type1", "format1", new List<string> { "aaa1", "bbb1" });
                    var column2 = new AfxDataTableColumn("type2", "format2", new List<string> { "aaa2", "bbb2" });
                    var afxTable = new AfxDataTable("afxTable", "afx description", "object");
                    afxTable.Properties = new Dictionary<string, AfxDataTableColumn>();
                    afxTable.Properties.Add("column1", column1);
                    afxTable.Properties.Add("column2", column2);
                    payloadProperties.Input.Properties.Add("in1", afxTable);
                }
                {
                    var column1 = new AfxDataTableColumn("type3", "format3", new List<string> { "aaa3", "bbb3" });
                    var column2 = new AfxDataTableColumn("type4", "format4", new List<string> { "aaa4", "bbb4" });
                    var afxTable = new AfxDataTable("afxTable", "afx description", "object");
                    afxTable.Properties = new Dictionary<string, AfxDataTableColumn>();
                    afxTable.Properties.Add("column1", column1);
                    afxTable.Properties.Add("column2", column2);
                    payloadProperties.Input.Properties.Add("in2", afxTable);
                }
            }

            payloadProperties.Output = new ModuleInterface();
            {
                payloadProperties.Output.Title = "Output title";
                payloadProperties.Output.Description = "Output Description";
                payloadProperties.Output.Type = "object";
                payloadProperties.Output.Properties = new Dictionary<string, AfxDataTable>();
                {
                    var column1 = new AfxDataTableColumn("type1", "format1", new List<string> { "aaa1", "bbb1" });
                    var column2 = new AfxDataTableColumn("type2", "format2", new List<string> { "aaa2", "bbb2" });
                    var afxTable = new AfxDataTable("afxTable", "afx description", "object");
                    afxTable.Properties = new Dictionary<string, AfxDataTableColumn>();
                    afxTable.Properties.Add("column1", column1);
                    afxTable.Properties.Add("column2", column2);
                    payloadProperties.Output.Properties.Add("in1", afxTable);
                }
                {
                    var column1 = new AfxDataTableColumn("type3", "format3", new List<string> { "aaa3", "bbb3" });
                    var column2 = new AfxDataTableColumn("type4", "format4", new List<string> { "aaa4", "bbb4" });
                    var afxTable = new AfxDataTable("afxTable", "afx description", "object");
                    afxTable.Properties = new Dictionary<string, AfxDataTableColumn>();
                    afxTable.Properties.Add("column1", column1);
                    afxTable.Properties.Add("column2", column2);
                    payloadProperties.Output.Properties.Add("in2", afxTable);
                }
            }

            payloadProperties.Assets = new Dictionary<string, AssetItem>();
            {
                {
                    var Asset1 = new AssetItem();
                    Asset1.Name = "Asset 1";
                    Asset1.Type = "module";
                    Asset1.Location = new AssetLocation("idv://bar.com/foo", null);
                    Asset1.InputPorts = new Dictionary<string, AssetPort>();
                    {
                        var port1 = new AssetPort("dataset");
                        var port2 = new AssetPort("zip");
                        Asset1.InputPorts["p1"] = port1;
                        Asset1.InputPorts["p2"] = port2;
                    }

                    Asset1.OutputPorts = new Dictionary<string, AssetPort>();
                    {
                        var port1 = new AssetPort("dataset");
                        var port2 = new AssetPort("zip");
                        Asset1.OutputPorts["p1"] = port1;
                        Asset1.OutputPorts["p2"] = port2;
                    }

                    Asset1.Metadata = new Dictionary<string, string>
                    {
                        { "key1", "value1" },
                        { "key2", "value2" }
                    };

                    payloadProperties.Assets["1"] = Asset1;
                }

                {
                    var Asset2 = new AssetItem();
                    Asset2.Name = "Asset 2";
                    Asset2.Type = "module";
                    Asset2.Location = new AssetLocation("idv://bar.com/foo", null);
                    Asset2.InputPorts = new Dictionary<string, AssetPort>();
                    {
                        var port1 = new AssetPort("dataset");
                        var port2 = new AssetPort("zip");
                        Asset2.InputPorts["p1"] = port1;
                        Asset2.InputPorts["p2"] = port2;
                    }

                    Asset2.OutputPorts = new Dictionary<string, AssetPort>();
                    {
                        var port1 = new AssetPort("dataset");
                        var port2 = new AssetPort("zip");
                        Asset2.OutputPorts["p1"] = port1;
                        Asset2.OutputPorts["p2"] = port2;
                    }

                    Asset2.Metadata = new Dictionary<string, string>
                    {
                        { "key3", "value3" },
                        { "key4", "value4" }
                    };

                    payloadProperties.Assets["2"] = Asset2;
                }
            }

            payloadProperties.Parameters = new Dictionary<string, string>();
            payloadProperties.Parameters["param1"] = "value1";
            payloadProperties.Parameters["param2"] = "value2";
        }

        private void ValidateJson(string actualJson, string expectedJsonFilePath)
        {
            string expectedJson = File.ReadAllText(expectedJsonFilePath);
            Assert.Equal(expectedJson, actualJson);
        }
    }
}