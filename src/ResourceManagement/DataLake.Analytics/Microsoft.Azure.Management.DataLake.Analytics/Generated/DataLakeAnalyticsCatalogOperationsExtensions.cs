// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Analytics
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using System.Linq.Expressions;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class DataLakeAnalyticsCatalogOperationsExtensions
    {
            /// <summary>
            /// Creates the specified secret for use with external data sources in the
            /// specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to create the secret in.
            /// </param>
            /// <param name='secretName'>
            /// The parameters required to create the secret (name and password)
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create the secret (name and password)
            /// </param>
            public static USqlSecret CreateSecret(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string secretName, string resourceGroupName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).CreateSecretAsync(accountName, databaseName, secretName, resourceGroupName, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the specified secret for use with external data sources in the
            /// specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to create the secret in.
            /// </param>
            /// <param name='secretName'>
            /// The parameters required to create the secret (name and password)
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create the secret (name and password)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlSecret> CreateSecretAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string secretName, string resourceGroupName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlSecret> result = await operations.CreateSecretWithHttpMessagesAsync(accountName, databaseName, secretName, resourceGroupName, parameters, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Modifies the specified secret for use with external data sources in the
            /// specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to modify the secret in.
            /// </param>
            /// <param name='secretName'>
            /// The parameters required to modify the secret (name and password)
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to modify the secret (name and password)
            /// </param>
            public static USqlSecret UpdateSecret(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string secretName, string resourceGroupName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).UpdateSecretAsync(accountName, databaseName, secretName, resourceGroupName, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modifies the specified secret for use with external data sources in the
            /// specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to modify the secret in.
            /// </param>
            /// <param name='secretName'>
            /// The parameters required to modify the secret (name and password)
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to modify the secret (name and password)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlSecret> UpdateSecretAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string secretName, string resourceGroupName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlSecret> result = await operations.UpdateSecretWithHttpMessagesAsync(accountName, databaseName, secretName, resourceGroupName, parameters, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets the specified secret in the specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to get the secret from.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret to get
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static USqlSecret GetSecret(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string secretName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).GetSecretAsync(accountName, databaseName, secretName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified secret in the specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to get the secret from.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret to get
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlSecret> GetSecretAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string secretName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlSecret> result = await operations.GetSecretWithHttpMessagesAsync(accountName, databaseName, secretName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Deletes the specified secret in the specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to delete the secret from.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret to delete
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static void DeleteSecret(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string secretName, string resourceGroupName)
            {
                Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).DeleteSecretAsync(accountName, databaseName, secretName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified secret in the specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to delete the secret from.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret to delete
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSecretAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string secretName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteSecretWithHttpMessagesAsync(accountName, databaseName, secretName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Retrieves the specified external data source from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the external Data Source in.
            /// </param>
            /// <param name='externalDataSourceName'>
            /// The name of the external Data Source to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static USqlExternalDataSource GetExternalDataSource(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string externalDataSourceName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).GetExternalDataSourceAsync(accountName, databaseName, externalDataSourceName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified external data source from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the external Data Source in.
            /// </param>
            /// <param name='externalDataSourceName'>
            /// The name of the external Data Source to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlExternalDataSource> GetExternalDataSourceAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string externalDataSourceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlExternalDataSource> result = await operations.GetExternalDataSourceWithHttpMessagesAsync(accountName, databaseName, externalDataSourceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of external data sources from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the external Data Source in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlExternalDataSource> ListExternalDataSources(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListExternalDataSourcesAsync(accountName, databaseName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of external data sources from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the external Data Source in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlExternalDataSource>> ListExternalDataSourcesAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlExternalDataSource>> result = await operations.ListExternalDataSourcesWithHttpMessagesAsync(accountName, databaseName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the specified credential from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='credentialName'>
            /// The name of the credential to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static USqlCredential GetCredential(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string credentialName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).GetCredentialAsync(accountName, databaseName, credentialName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified credential from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='credentialName'>
            /// The name of the credential to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlCredential> GetCredentialAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string credentialName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlCredential> result = await operations.GetCredentialWithHttpMessagesAsync(accountName, databaseName, credentialName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of credentials from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlCredential> ListCredentials(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListCredentialsAsync(accountName, databaseName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of credentials from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlCredential>> ListCredentialsAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlCredential>> result = await operations.ListCredentialsWithHttpMessagesAsync(accountName, databaseName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the specified procedure from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the procedure in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the procedure in.
            /// </param>
            /// <param name='procedureName'>
            /// The name of the procedure to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static USqlProcedure GetProcedure(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string procedureName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).GetProcedureAsync(accountName, databaseName, schemaName, procedureName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified procedure from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the procedure in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the procedure in.
            /// </param>
            /// <param name='procedureName'>
            /// The name of the procedure to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlProcedure> GetProcedureAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string procedureName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlProcedure> result = await operations.GetProcedureWithHttpMessagesAsync(accountName, databaseName, schemaName, procedureName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of procedures from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the procedures in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the procedures in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlProcedure> ListProcedures(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListProceduresAsync(accountName, databaseName, schemaName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of procedures from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the procedures in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the procedures in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlProcedure>> ListProceduresAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlProcedure>> result = await operations.ListProceduresWithHttpMessagesAsync(accountName, databaseName, schemaName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the specified table from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the table in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the table in.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static USqlTable GetTable(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string tableName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).GetTableAsync(accountName, databaseName, schemaName, tableName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified table from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the table in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the table in.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlTable> GetTableAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string tableName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlTable> result = await operations.GetTableWithHttpMessagesAsync(accountName, databaseName, schemaName, tableName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the tables in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the tables in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlTable> ListTables(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListTablesAsync(accountName, databaseName, schemaName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the tables in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the tables in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTable>> ListTablesAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlTable>> result = await operations.ListTablesWithHttpMessagesAsync(accountName, databaseName, schemaName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the specified view from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the view in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the view in.
            /// </param>
            /// <param name='viewName'>
            /// The name of the view to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static USqlView GetView(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string viewName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).GetViewAsync(accountName, databaseName, schemaName, viewName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified view from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the view in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the view in.
            /// </param>
            /// <param name='viewName'>
            /// The name of the view to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlView> GetViewAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string viewName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlView> result = await operations.GetViewWithHttpMessagesAsync(accountName, databaseName, schemaName, viewName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of views from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the views in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the views in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlView> ListViews(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListViewsAsync(accountName, databaseName, schemaName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of views from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the views in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the views in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlView>> ListViewsAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlView>> result = await operations.ListViewsWithHttpMessagesAsync(accountName, databaseName, schemaName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the specified table from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the statistics in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the statistics in.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to find the statistics in.
            /// </param>
            /// <param name='statisticsName'>
            /// The name of the table statistics to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static USqlTableStatistics GetTableStatistic(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string tableName, string statisticsName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).GetTableStatisticAsync(accountName, databaseName, schemaName, tableName, statisticsName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified table from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the statistics in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the statistics in.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to find the statistics in.
            /// </param>
            /// <param name='statisticsName'>
            /// The name of the table statistics to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlTableStatistics> GetTableStatisticAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string tableName, string statisticsName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlTableStatistics> result = await operations.GetTableStatisticWithHttpMessagesAsync(accountName, databaseName, schemaName, tableName, statisticsName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the statistics in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the statistics in.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to find the statistics in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlTableStatistics> ListTableStatistics(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string tableName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListTableStatisticsAsync(accountName, databaseName, schemaName, tableName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the statistics in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the statistics in.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to find the statistics in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTableStatistics>> ListTableStatisticsAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string tableName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlTableStatistics>> result = await operations.ListTableStatisticsWithHttpMessagesAsync(accountName, databaseName, schemaName, tableName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of catalog types within the specified database and
            /// schema for the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the types in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the types in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// Query parameters. If null is passed returns all catalog type items.
            /// </param>
            /// <param name='skip'>
            /// Query parameters. If null is passed returns all catalog type items.
            /// </param>
            /// <param name='orderby'>
            /// Query parameters. If null is passed returns all catalog type items.
            /// </param>
            /// <param name='select'>
            /// Query parameters. If null is passed returns all catalog type items.
            /// </param>
            public static IPage<USqlType> ListTypes(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string resourceGroupName, Expression<Func<USqlType, bool>> filter = default(Expression<Func<USqlType, bool>>), int? top = default(int?), int? skip = default(int?), string orderby = default(string), string select = default(string))
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListTypesAsync(accountName, databaseName, schemaName, resourceGroupName, filter, top, skip, orderby, select), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of catalog types within the specified database and
            /// schema for the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the types in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the types in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// Query parameters. If null is passed returns all catalog type items.
            /// </param>
            /// <param name='skip'>
            /// Query parameters. If null is passed returns all catalog type items.
            /// </param>
            /// <param name='orderby'>
            /// Query parameters. If null is passed returns all catalog type items.
            /// </param>
            /// <param name='select'>
            /// Query parameters. If null is passed returns all catalog type items.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlType>> ListTypesAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string resourceGroupName, Expression<Func<USqlType, bool>> filter = default(Expression<Func<USqlType, bool>>), int? top = default(int?), int? skip = default(int?), string orderby = default(string), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlType>> result = await operations.ListTypesWithHttpMessagesAsync(accountName, databaseName, schemaName, resourceGroupName, filter, top, skip, orderby, select, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the specified table valued function from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the table valued function in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the table valued function in.
            /// </param>
            /// <param name='tableValuedFunctionName'>
            /// The name of the tableValuedFunction to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static USqlTableValuedFunction GetTableValuedFunction(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string tableValuedFunctionName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).GetTableValuedFunctionAsync(accountName, databaseName, schemaName, tableValuedFunctionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified table valued function from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the table valued function in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the table valued function in.
            /// </param>
            /// <param name='tableValuedFunctionName'>
            /// The name of the tableValuedFunction to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlTableValuedFunction> GetTableValuedFunctionAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string tableValuedFunctionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlTableValuedFunction> result = await operations.GetTableValuedFunctionWithHttpMessagesAsync(accountName, databaseName, schemaName, tableValuedFunctionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of table valued functions from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the table valued functions in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the table valued functions in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlTableValuedFunction> ListTableValuedFunctions(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListTableValuedFunctionsAsync(accountName, databaseName, schemaName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of table valued functions from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the table valued functions in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the table valued functions in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTableValuedFunction>> ListTableValuedFunctionsAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlTableValuedFunction>> result = await operations.ListTableValuedFunctionsWithHttpMessagesAsync(accountName, databaseName, schemaName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the specified assembly from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the assembly in.
            /// </param>
            /// <param name='assemblyName'>
            /// The name of the assembly to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static USqlAssembly GetAssembly(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string assemblyName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).GetAssemblyAsync(accountName, databaseName, assemblyName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified assembly from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the assembly in.
            /// </param>
            /// <param name='assemblyName'>
            /// The name of the assembly to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlAssembly> GetAssemblyAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string assemblyName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlAssembly> result = await operations.GetAssemblyWithHttpMessagesAsync(accountName, databaseName, assemblyName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of assemblies from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the assembly in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlAssemblyClr> ListAssemblies(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListAssembliesAsync(accountName, databaseName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of assemblies from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the assembly in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlAssemblyClr>> ListAssembliesAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlAssemblyClr>> result = await operations.ListAssembliesWithHttpMessagesAsync(accountName, databaseName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the specified schema from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static USqlSchema GetSchema(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).GetSchemaAsync(accountName, databaseName, schemaName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified schema from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlSchema> GetSchemaAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string schemaName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlSchema> result = await operations.GetSchemaWithHttpMessagesAsync(accountName, databaseName, schemaName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of schemas from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlSchema> ListSchemas(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListSchemasAsync(accountName, databaseName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of schemas from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlSchema>> ListSchemasAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlSchema>> result = await operations.ListSchemasWithHttpMessagesAsync(accountName, databaseName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the specified database from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The path to the file to create.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static USqlDatabase GetDatabase(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).GetDatabaseAsync(accountName, databaseName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified database from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The path to the file to create.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlDatabase> GetDatabaseAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string databaseName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<USqlDatabase> result = await operations.GetDatabaseWithHttpMessagesAsync(accountName, databaseName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of databases from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlDatabase> ListDatabases(this IDataLakeAnalyticsCatalogOperations operations, string accountName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListDatabasesAsync(accountName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of databases from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the account to use
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlDatabase>> ListDatabasesAsync( this IDataLakeAnalyticsCatalogOperations operations, string accountName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlDatabase>> result = await operations.ListDatabasesWithHttpMessagesAsync(accountName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of external data sources from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlExternalDataSource> ListExternalDataSourcesNext(this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListExternalDataSourcesNextAsync(nextPageLink, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of external data sources from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlExternalDataSource>> ListExternalDataSourcesNextAsync( this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlExternalDataSource>> result = await operations.ListExternalDataSourcesNextWithHttpMessagesAsync(nextPageLink, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of credentials from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlCredential> ListCredentialsNext(this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListCredentialsNextAsync(nextPageLink, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of credentials from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlCredential>> ListCredentialsNextAsync( this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlCredential>> result = await operations.ListCredentialsNextWithHttpMessagesAsync(nextPageLink, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of procedures from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlProcedure> ListProceduresNext(this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListProceduresNextAsync(nextPageLink, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of procedures from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlProcedure>> ListProceduresNextAsync( this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlProcedure>> result = await operations.ListProceduresNextWithHttpMessagesAsync(nextPageLink, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlTable> ListTablesNext(this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListTablesNextAsync(nextPageLink, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTable>> ListTablesNextAsync( this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlTable>> result = await operations.ListTablesNextWithHttpMessagesAsync(nextPageLink, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of views from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlView> ListViewsNext(this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListViewsNextAsync(nextPageLink, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of views from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlView>> ListViewsNextAsync( this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlView>> result = await operations.ListViewsNextWithHttpMessagesAsync(nextPageLink, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlTableStatistics> ListTableStatisticsNext(this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListTableStatisticsNextAsync(nextPageLink, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTableStatistics>> ListTableStatisticsNextAsync( this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlTableStatistics>> result = await operations.ListTableStatisticsNextWithHttpMessagesAsync(nextPageLink, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of catalog types within the specified database and
            /// schema for the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlType> ListTypesNext(this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListTypesNextAsync(nextPageLink, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of catalog types within the specified database and
            /// schema for the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlType>> ListTypesNextAsync( this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlType>> result = await operations.ListTypesNextWithHttpMessagesAsync(nextPageLink, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of table valued functions from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlTableValuedFunction> ListTableValuedFunctionsNext(this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListTableValuedFunctionsNextAsync(nextPageLink, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of table valued functions from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTableValuedFunction>> ListTableValuedFunctionsNextAsync( this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlTableValuedFunction>> result = await operations.ListTableValuedFunctionsNextWithHttpMessagesAsync(nextPageLink, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of assemblies from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlAssemblyClr> ListAssembliesNext(this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListAssembliesNextAsync(nextPageLink, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of assemblies from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlAssemblyClr>> ListAssembliesNextAsync( this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlAssemblyClr>> result = await operations.ListAssembliesNextWithHttpMessagesAsync(nextPageLink, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of schemas from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlSchema> ListSchemasNext(this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListSchemasNextAsync(nextPageLink, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of schemas from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlSchema>> ListSchemasNextAsync( this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlSchema>> result = await operations.ListSchemasNextWithHttpMessagesAsync(nextPageLink, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Retrieves the list of databases from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            public static IPage<USqlDatabase> ListDatabasesNext(this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDataLakeAnalyticsCatalogOperations)s).ListDatabasesNextAsync(nextPageLink, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of databases from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resourceGroup the Data Lake Analytics account is in
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlDatabase>> ListDatabasesNextAsync( this IDataLakeAnalyticsCatalogOperations operations, string nextPageLink, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<USqlDatabase>> result = await operations.ListDatabasesNextWithHttpMessagesAsync(nextPageLink, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

    }
}
