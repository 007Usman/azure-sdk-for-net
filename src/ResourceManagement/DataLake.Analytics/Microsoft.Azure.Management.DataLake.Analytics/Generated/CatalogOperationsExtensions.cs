// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Analytics
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure.OData;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for CatalogOperations.
    /// </summary>
    public static partial class CatalogOperationsExtensions
    {
            /// <summary>
            /// Creates the specified secret for use with external data sources in the
            /// specified database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in which to create the secret.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create the secret (name and password)
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlSecret CreateSecret(this ICatalogOperations operations, string databaseName, string secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).CreateSecretAsync(databaseName, secretName, parameters, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the specified secret for use with external data sources in the
            /// specified database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in which to create the secret.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create the secret (name and password)
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlSecret> CreateSecretAsync(this ICatalogOperations operations, string databaseName, string secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSecretWithHttpMessagesAsync(databaseName, secretName, parameters, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Modifies the specified secret for use with external data sources in the
            /// specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the secret.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to modify the secret (name and password)
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlSecret UpdateSecret(this ICatalogOperations operations, string databaseName, string secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).UpdateSecretAsync(databaseName, secretName, parameters, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modifies the specified secret for use with external data sources in the
            /// specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the secret.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to modify the secret (name and password)
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlSecret> UpdateSecretAsync(this ICatalogOperations operations, string databaseName, string secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSecretWithHttpMessagesAsync(databaseName, secretName, parameters, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified secret in the specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the secret.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret to get
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlSecret GetSecret(this ICatalogOperations operations, string databaseName, string secretName, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetSecretAsync(databaseName, secretName, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified secret in the specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the secret.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret to get
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlSecret> GetSecretAsync(this ICatalogOperations operations, string databaseName, string secretName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretWithHttpMessagesAsync(databaseName, secretName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified secret in the specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the secret.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret to delete
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static void DeleteSecret(this ICatalogOperations operations, string databaseName, string secretName, string accountName)
            {
                Task.Factory.StartNew(s => ((ICatalogOperations)s).DeleteSecretAsync(databaseName, secretName, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified secret in the specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the secret.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret to delete
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSecretAsync(this ICatalogOperations operations, string databaseName, string secretName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteSecretWithHttpMessagesAsync(databaseName, secretName, accountName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Retrieves the specified external data source from the Data Lake Analytics
            /// catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the external data source.
            /// </param>
            /// <param name='externalDataSourceName'>
            /// The name of the external data source.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlExternalDataSource GetExternalDataSource(this ICatalogOperations operations, string databaseName, string externalDataSourceName, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetExternalDataSourceAsync(databaseName, externalDataSourceName, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified external data source from the Data Lake Analytics
            /// catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the external data source.
            /// </param>
            /// <param name='externalDataSourceName'>
            /// The name of the external data source.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlExternalDataSource> GetExternalDataSourceAsync(this ICatalogOperations operations, string databaseName, string externalDataSourceName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExternalDataSourceWithHttpMessagesAsync(databaseName, externalDataSourceName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of external data sources from the Data Lake Analytics
            /// catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the external data sources.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlExternalDataSource> ListExternalDataSources(this ICatalogOperations operations, string databaseName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListExternalDataSourcesAsync(databaseName, accountName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of external data sources from the Data Lake Analytics
            /// catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the external data sources.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlExternalDataSource>> ListExternalDataSourcesAsync(this ICatalogOperations operations, string databaseName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExternalDataSourcesWithHttpMessagesAsync(databaseName, accountName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the specified credential from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the schema.
            /// </param>
            /// <param name='credentialName'>
            /// The name of the credential.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlCredential GetCredential(this ICatalogOperations operations, string databaseName, string credentialName, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetCredentialAsync(databaseName, credentialName, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified credential from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the schema.
            /// </param>
            /// <param name='credentialName'>
            /// The name of the credential.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlCredential> GetCredentialAsync(this ICatalogOperations operations, string databaseName, string credentialName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCredentialWithHttpMessagesAsync(databaseName, credentialName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of credentials from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the schema.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlCredential> ListCredentials(this ICatalogOperations operations, string databaseName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListCredentialsAsync(databaseName, accountName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of credentials from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the schema.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlCredential>> ListCredentialsAsync(this ICatalogOperations operations, string databaseName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCredentialsWithHttpMessagesAsync(databaseName, accountName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the specified procedure from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the procedure.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the procedure.
            /// </param>
            /// <param name='procedureName'>
            /// The name of the procedure.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlProcedure GetProcedure(this ICatalogOperations operations, string databaseName, string schemaName, string procedureName, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetProcedureAsync(databaseName, schemaName, procedureName, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified procedure from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the procedure.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the procedure.
            /// </param>
            /// <param name='procedureName'>
            /// The name of the procedure.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlProcedure> GetProcedureAsync(this ICatalogOperations operations, string databaseName, string schemaName, string procedureName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcedureWithHttpMessagesAsync(databaseName, schemaName, procedureName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of procedures from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the procedures.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the procedures.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlProcedure> ListProcedures(this ICatalogOperations operations, string databaseName, string schemaName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListProceduresAsync(databaseName, schemaName, accountName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of procedures from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the procedures.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the procedures.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlProcedure>> ListProceduresAsync(this ICatalogOperations operations, string databaseName, string schemaName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProceduresWithHttpMessagesAsync(databaseName, schemaName, accountName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the specified table from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the table.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the table.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlTable GetTable(this ICatalogOperations operations, string databaseName, string schemaName, string tableName, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetTableAsync(databaseName, schemaName, tableName, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified table from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the table.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the table.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlTable> GetTableAsync(this ICatalogOperations operations, string databaseName, string schemaName, string tableName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTableWithHttpMessagesAsync(databaseName, schemaName, tableName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of tables from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the tables.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the tables.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlTable> ListTables(this ICatalogOperations operations, string databaseName, string schemaName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTablesAsync(databaseName, schemaName, accountName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of tables from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the tables.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the tables.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTable>> ListTablesAsync(this ICatalogOperations operations, string databaseName, string schemaName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTablesWithHttpMessagesAsync(databaseName, schemaName, accountName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the specified view from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the view.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the view.
            /// </param>
            /// <param name='viewName'>
            /// The name of the view.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlView GetView(this ICatalogOperations operations, string databaseName, string schemaName, string viewName, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetViewAsync(databaseName, schemaName, viewName, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified view from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the view.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the view.
            /// </param>
            /// <param name='viewName'>
            /// The name of the view.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlView> GetViewAsync(this ICatalogOperations operations, string databaseName, string schemaName, string viewName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetViewWithHttpMessagesAsync(databaseName, schemaName, viewName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of views from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the views.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the views.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlView> ListViews(this ICatalogOperations operations, string databaseName, string schemaName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListViewsAsync(databaseName, schemaName, accountName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of views from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the views.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the views.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlView>> ListViewsAsync(this ICatalogOperations operations, string databaseName, string schemaName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListViewsWithHttpMessagesAsync(databaseName, schemaName, accountName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the specified table from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the statistics.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the statistics.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table containing the statistics.
            /// </param>
            /// <param name='statisticsName'>
            /// The name of the table statistics.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlTableStatistics GetTableStatistic(this ICatalogOperations operations, string databaseName, string schemaName, string tableName, string statisticsName, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetTableStatisticAsync(databaseName, schemaName, tableName, statisticsName, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified table from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the statistics.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the statistics.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table containing the statistics.
            /// </param>
            /// <param name='statisticsName'>
            /// The name of the table statistics.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlTableStatistics> GetTableStatisticAsync(this ICatalogOperations operations, string databaseName, string schemaName, string tableName, string statisticsName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTableStatisticWithHttpMessagesAsync(databaseName, schemaName, tableName, statisticsName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of tables from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the statistics.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the statistics.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table containing the statistics.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlTableStatistics> ListTableStatistics(this ICatalogOperations operations, string databaseName, string schemaName, string tableName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTableStatisticsAsync(databaseName, schemaName, tableName, accountName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of tables from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the statistics.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the statistics.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table containing the statistics.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTableStatistics>> ListTableStatisticsAsync(this ICatalogOperations operations, string databaseName, string schemaName, string tableName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTableStatisticsWithHttpMessagesAsync(databaseName, schemaName, tableName, accountName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of types within the specified database and schema from
            /// the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the types.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the types.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlType> ListTypes(this ICatalogOperations operations, string databaseName, string schemaName, string accountName, ODataQuery<USqlType> odataQuery = default(ODataQuery<USqlType>), string select = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTypesAsync(databaseName, schemaName, accountName, odataQuery, select, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of types within the specified database and schema from
            /// the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the types.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the types.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlType>> ListTypesAsync(this ICatalogOperations operations, string databaseName, string schemaName, string accountName, ODataQuery<USqlType> odataQuery = default(ODataQuery<USqlType>), string select = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTypesWithHttpMessagesAsync(databaseName, schemaName, accountName, odataQuery, select, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the specified table valued function from the Data Lake Analytics
            /// catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the table valued function.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the table valued function.
            /// </param>
            /// <param name='tableValuedFunctionName'>
            /// The name of the tableValuedFunction.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlTableValuedFunction GetTableValuedFunction(this ICatalogOperations operations, string databaseName, string schemaName, string tableValuedFunctionName, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetTableValuedFunctionAsync(databaseName, schemaName, tableValuedFunctionName, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified table valued function from the Data Lake Analytics
            /// catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the table valued function.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the table valued function.
            /// </param>
            /// <param name='tableValuedFunctionName'>
            /// The name of the tableValuedFunction.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlTableValuedFunction> GetTableValuedFunctionAsync(this ICatalogOperations operations, string databaseName, string schemaName, string tableValuedFunctionName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTableValuedFunctionWithHttpMessagesAsync(databaseName, schemaName, tableValuedFunctionName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of table valued functions from the Data Lake Analytics
            /// catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the table valued functions.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the table valued functions.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlTableValuedFunction> ListTableValuedFunctions(this ICatalogOperations operations, string databaseName, string schemaName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTableValuedFunctionsAsync(databaseName, schemaName, accountName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of table valued functions from the Data Lake Analytics
            /// catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the table valued functions.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema containing the table valued functions.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTableValuedFunction>> ListTableValuedFunctionsAsync(this ICatalogOperations operations, string databaseName, string schemaName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTableValuedFunctionsWithHttpMessagesAsync(databaseName, schemaName, accountName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the specified assembly from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the assembly.
            /// </param>
            /// <param name='assemblyName'>
            /// The name of the assembly.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlAssembly GetAssembly(this ICatalogOperations operations, string databaseName, string assemblyName, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetAssemblyAsync(databaseName, assemblyName, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified assembly from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the assembly.
            /// </param>
            /// <param name='assemblyName'>
            /// The name of the assembly.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlAssembly> GetAssemblyAsync(this ICatalogOperations operations, string databaseName, string assemblyName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssemblyWithHttpMessagesAsync(databaseName, assemblyName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of assemblies from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the assembly.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlAssemblyClr> ListAssemblies(this ICatalogOperations operations, string databaseName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListAssembliesAsync(databaseName, accountName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of assemblies from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the assembly.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlAssemblyClr>> ListAssembliesAsync(this ICatalogOperations operations, string databaseName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAssembliesWithHttpMessagesAsync(databaseName, accountName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the specified schema from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the schema.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlSchema GetSchema(this ICatalogOperations operations, string databaseName, string schemaName, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetSchemaAsync(databaseName, schemaName, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified schema from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the schema.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlSchema> GetSchemaAsync(this ICatalogOperations operations, string databaseName, string schemaName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchemaWithHttpMessagesAsync(databaseName, schemaName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of schemas from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the schema.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlSchema> ListSchemas(this ICatalogOperations operations, string databaseName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListSchemasAsync(databaseName, accountName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of schemas from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database containing the schema.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlSchema>> ListSchemasAsync(this ICatalogOperations operations, string databaseName, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSchemasWithHttpMessagesAsync(databaseName, accountName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the specified database from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            public static USqlDatabase GetDatabase(this ICatalogOperations operations, string databaseName, string accountName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetDatabaseAsync(databaseName, accountName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified database from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlDatabase> GetDatabaseAsync(this ICatalogOperations operations, string databaseName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatabaseWithHttpMessagesAsync(databaseName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of databases from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlDatabase> ListDatabases(this ICatalogOperations operations, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListDatabasesAsync(accountName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of databases from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Data Lake Analytics account to execute catalog operations on.
            /// </param>
            /// <param name='filter'>
            /// OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// The number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// The number of items to skip over before returning elements. Optional.
            /// </param>
            /// <param name='expand'>
            /// OData expansion. Expand related resources in line with the retrieved
            /// resources, e.g. Categories/$expand=Products would expand Product data in
            /// line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// OrderBy clause. One or more comma-separated expressions with an optional
            /// "asc" (the default) or "desc" depending on the order you'd like the
            /// values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlDatabase>> ListDatabasesAsync(this ICatalogOperations operations, string accountName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDatabasesWithHttpMessagesAsync(accountName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of external data sources from the Data Lake Analytics
            /// catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlExternalDataSource> ListExternalDataSourcesNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListExternalDataSourcesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of external data sources from the Data Lake Analytics
            /// catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlExternalDataSource>> ListExternalDataSourcesNextAsync(this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExternalDataSourcesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of credentials from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlCredential> ListCredentialsNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListCredentialsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of credentials from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlCredential>> ListCredentialsNextAsync(this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCredentialsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of procedures from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlProcedure> ListProceduresNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListProceduresNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of procedures from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlProcedure>> ListProceduresNextAsync(this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProceduresNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of tables from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlTable> ListTablesNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTablesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of tables from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTable>> ListTablesNextAsync(this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTablesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of views from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlView> ListViewsNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListViewsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of views from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlView>> ListViewsNextAsync(this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListViewsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of tables from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlTableStatistics> ListTableStatisticsNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTableStatisticsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of tables from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTableStatistics>> ListTableStatisticsNextAsync(this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTableStatisticsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of types within the specified database and schema from
            /// the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlType> ListTypesNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTypesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of types within the specified database and schema from
            /// the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlType>> ListTypesNextAsync(this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTypesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of table valued functions from the Data Lake Analytics
            /// catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlTableValuedFunction> ListTableValuedFunctionsNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTableValuedFunctionsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of table valued functions from the Data Lake Analytics
            /// catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTableValuedFunction>> ListTableValuedFunctionsNextAsync(this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTableValuedFunctionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of assemblies from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlAssemblyClr> ListAssembliesNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListAssembliesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of assemblies from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlAssemblyClr>> ListAssembliesNextAsync(this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAssembliesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of schemas from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlSchema> ListSchemasNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListSchemasNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of schemas from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlSchema>> ListSchemasNextAsync(this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSchemasNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of databases from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlDatabase> ListDatabasesNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListDatabasesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of databases from the Data Lake Analytics catalog.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlDatabase>> ListDatabasesNextAsync(this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDatabasesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
