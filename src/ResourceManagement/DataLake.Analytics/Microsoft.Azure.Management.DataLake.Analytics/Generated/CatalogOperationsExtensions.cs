// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Analytics
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure.OData;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class CatalogOperationsExtensions
    {
            /// <summary>
            /// Creates the specified secret for use with external data sources in the
            /// specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to create the secret in.
            /// </param>
            /// <param name='secretName'>
            /// The parameters required to create the secret (name and password)
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create the secret (name and password)
            /// </param>
            public static USqlSecret CreateSecret(this ICatalogOperations operations, string accountname, string databaseName, string secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).CreateSecretAsync(accountname, databaseName, secretName, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the specified secret for use with external data sources in the
            /// specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to create the secret in.
            /// </param>
            /// <param name='secretName'>
            /// The parameters required to create the secret (name and password)
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create the secret (name and password)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlSecret> CreateSecretAsync( this ICatalogOperations operations, string accountname, string databaseName, string secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.CreateSecretWithHttpMessagesAsync(accountname, databaseName, secretName, parameters, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Modifies the specified secret for use with external data sources in the
            /// specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to modify the secret in.
            /// </param>
            /// <param name='secretName'>
            /// The parameters required to modify the secret (name and password)
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to modify the secret (name and password)
            /// </param>
            public static USqlSecret UpdateSecret(this ICatalogOperations operations, string accountname, string databaseName, string secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).UpdateSecretAsync(accountname, databaseName, secretName, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modifies the specified secret for use with external data sources in the
            /// specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to modify the secret in.
            /// </param>
            /// <param name='secretName'>
            /// The parameters required to modify the secret (name and password)
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to modify the secret (name and password)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlSecret> UpdateSecretAsync( this ICatalogOperations operations, string accountname, string databaseName, string secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.UpdateSecretWithHttpMessagesAsync(accountname, databaseName, secretName, parameters, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Gets the specified secret in the specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to get the secret from.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret to get
            /// </param>
            public static USqlSecret GetSecret(this ICatalogOperations operations, string accountname, string databaseName, string secretName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetSecretAsync(accountname, databaseName, secretName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified secret in the specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to get the secret from.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret to get
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlSecret> GetSecretAsync( this ICatalogOperations operations, string accountname, string databaseName, string secretName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetSecretWithHttpMessagesAsync(accountname, databaseName, secretName, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Deletes the specified secret in the specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to delete the secret from.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret to delete
            /// </param>
            public static void DeleteSecret(this ICatalogOperations operations, string accountname, string databaseName, string secretName)
            {
                Task.Factory.StartNew(s => ((ICatalogOperations)s).DeleteSecretAsync(accountname, databaseName, secretName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified secret in the specified database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to delete the secret from.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSecretAsync( this ICatalogOperations operations, string accountname, string databaseName, string secretName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteSecretWithHttpMessagesAsync(accountname, databaseName, secretName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Retrieves the specified external data source from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the external Data Source in.
            /// </param>
            /// <param name='externalDataSourceName'>
            /// The name of the external Data Source to find.
            /// </param>
            public static USqlExternalDataSource GetExternalDataSource(this ICatalogOperations operations, string accountname, string databaseName, string externalDataSourceName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetExternalDataSourceAsync(accountname, databaseName, externalDataSourceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified external data source from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the external Data Source in.
            /// </param>
            /// <param name='externalDataSourceName'>
            /// The name of the external Data Source to find.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlExternalDataSource> GetExternalDataSourceAsync( this ICatalogOperations operations, string accountname, string databaseName, string externalDataSourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetExternalDataSourceWithHttpMessagesAsync(accountname, databaseName, externalDataSourceName, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of external data sources from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the external Data Source in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlExternalDataSource> ListExternalDataSources(this ICatalogOperations operations, string accountname, string databaseName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListExternalDataSourcesAsync(accountname, databaseName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of external data sources from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the external Data Source in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlExternalDataSource>> ListExternalDataSourcesAsync( this ICatalogOperations operations, string accountname, string databaseName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListExternalDataSourcesWithHttpMessagesAsync(accountname, databaseName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the specified credential from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='credentialName'>
            /// The name of the credential to find.
            /// </param>
            public static USqlCredential GetCredential(this ICatalogOperations operations, string accountname, string databaseName, string credentialName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetCredentialAsync(accountname, databaseName, credentialName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified credential from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='credentialName'>
            /// The name of the credential to find.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlCredential> GetCredentialAsync( this ICatalogOperations operations, string accountname, string databaseName, string credentialName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetCredentialWithHttpMessagesAsync(accountname, databaseName, credentialName, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of credentials from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlCredential> ListCredentials(this ICatalogOperations operations, string accountname, string databaseName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListCredentialsAsync(accountname, databaseName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of credentials from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlCredential>> ListCredentialsAsync( this ICatalogOperations operations, string accountname, string databaseName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListCredentialsWithHttpMessagesAsync(accountname, databaseName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the specified procedure from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the procedure in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the procedure in.
            /// </param>
            /// <param name='procedureName'>
            /// The name of the procedure to find.
            /// </param>
            public static USqlProcedure GetProcedure(this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string procedureName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetProcedureAsync(accountname, databaseName, schemaName, procedureName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified procedure from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the procedure in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the procedure in.
            /// </param>
            /// <param name='procedureName'>
            /// The name of the procedure to find.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlProcedure> GetProcedureAsync( this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string procedureName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetProcedureWithHttpMessagesAsync(accountname, databaseName, schemaName, procedureName, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of procedures from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the procedures in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the procedures in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlProcedure> ListProcedures(this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListProceduresAsync(accountname, databaseName, schemaName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of procedures from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the procedures in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the procedures in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlProcedure>> ListProceduresAsync( this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListProceduresWithHttpMessagesAsync(accountname, databaseName, schemaName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the specified table from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the table in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the table in.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to find.
            /// </param>
            public static USqlTable GetTable(this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string tableName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetTableAsync(accountname, databaseName, schemaName, tableName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified table from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the table in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the table in.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to find.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlTable> GetTableAsync( this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetTableWithHttpMessagesAsync(accountname, databaseName, schemaName, tableName, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the tables in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the tables in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlTable> ListTables(this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTablesAsync(accountname, databaseName, schemaName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the tables in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the tables in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTable>> ListTablesAsync( this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListTablesWithHttpMessagesAsync(accountname, databaseName, schemaName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the specified view from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the view in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the view in.
            /// </param>
            /// <param name='viewName'>
            /// The name of the view to find.
            /// </param>
            public static USqlView GetView(this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string viewName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetViewAsync(accountname, databaseName, schemaName, viewName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified view from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the view in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the view in.
            /// </param>
            /// <param name='viewName'>
            /// The name of the view to find.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlView> GetViewAsync( this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string viewName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetViewWithHttpMessagesAsync(accountname, databaseName, schemaName, viewName, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of views from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the views in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the views in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlView> ListViews(this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListViewsAsync(accountname, databaseName, schemaName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of views from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the views in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the views in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlView>> ListViewsAsync( this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListViewsWithHttpMessagesAsync(accountname, databaseName, schemaName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the specified table from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the statistics in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the statistics in.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to find the statistics in.
            /// </param>
            /// <param name='statisticsName'>
            /// The name of the table statistics to find.
            /// </param>
            public static USqlTableStatistics GetTableStatistic(this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string tableName, string statisticsName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetTableStatisticAsync(accountname, databaseName, schemaName, tableName, statisticsName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified table from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the statistics in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the statistics in.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to find the statistics in.
            /// </param>
            /// <param name='statisticsName'>
            /// The name of the table statistics to find.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlTableStatistics> GetTableStatisticAsync( this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string tableName, string statisticsName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetTableStatisticWithHttpMessagesAsync(accountname, databaseName, schemaName, tableName, statisticsName, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the statistics in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the statistics in.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to find the statistics in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlTableStatistics> ListTableStatistics(this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string tableName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTableStatisticsAsync(accountname, databaseName, schemaName, tableName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the statistics in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the statistics in.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to find the statistics in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTableStatistics>> ListTableStatisticsAsync( this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string tableName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListTableStatisticsWithHttpMessagesAsync(accountname, databaseName, schemaName, tableName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of catalog types within the specified database and
            /// schema for the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the types in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the types in.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlType> ListTypes(this ICatalogOperations operations, string accountname, string databaseName, string schemaName, ODataQuery<USqlType> odataQuery = default(ODataQuery<USqlType>), string select = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTypesAsync(accountname, databaseName, schemaName, odataQuery, select, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of catalog types within the specified database and
            /// schema for the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the types in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the types in.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlType>> ListTypesAsync( this ICatalogOperations operations, string accountname, string databaseName, string schemaName, ODataQuery<USqlType> odataQuery = default(ODataQuery<USqlType>), string select = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListTypesWithHttpMessagesAsync(accountname, databaseName, schemaName, odataQuery, select, count, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the specified table valued function from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the table valued function in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the table valued function in.
            /// </param>
            /// <param name='tableValuedFunctionName'>
            /// The name of the tableValuedFunction to find.
            /// </param>
            public static USqlTableValuedFunction GetTableValuedFunction(this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string tableValuedFunctionName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetTableValuedFunctionAsync(accountname, databaseName, schemaName, tableValuedFunctionName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified table valued function from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the table valued function in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the table valued function in.
            /// </param>
            /// <param name='tableValuedFunctionName'>
            /// The name of the tableValuedFunction to find.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlTableValuedFunction> GetTableValuedFunctionAsync( this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string tableValuedFunctionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetTableValuedFunctionWithHttpMessagesAsync(accountname, databaseName, schemaName, tableValuedFunctionName, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of table valued functions from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the table valued functions in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the table valued functions in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlTableValuedFunction> ListTableValuedFunctions(this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTableValuedFunctionsAsync(accountname, databaseName, schemaName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of table valued functions from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the table valued functions in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find the table valued functions in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTableValuedFunction>> ListTableValuedFunctionsAsync( this ICatalogOperations operations, string accountname, string databaseName, string schemaName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListTableValuedFunctionsWithHttpMessagesAsync(accountname, databaseName, schemaName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the specified assembly from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the assembly in.
            /// </param>
            /// <param name='assemblyName'>
            /// The name of the assembly to find.
            /// </param>
            public static USqlAssembly GetAssembly(this ICatalogOperations operations, string accountname, string databaseName, string assemblyName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetAssemblyAsync(accountname, databaseName, assemblyName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified assembly from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the assembly in.
            /// </param>
            /// <param name='assemblyName'>
            /// The name of the assembly to find.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlAssembly> GetAssemblyAsync( this ICatalogOperations operations, string accountname, string databaseName, string assemblyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetAssemblyWithHttpMessagesAsync(accountname, databaseName, assemblyName, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of assemblies from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the assembly in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlAssemblyClr> ListAssemblies(this ICatalogOperations operations, string accountname, string databaseName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListAssembliesAsync(accountname, databaseName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of assemblies from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the assembly in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlAssemblyClr>> ListAssembliesAsync( this ICatalogOperations operations, string accountname, string databaseName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListAssembliesWithHttpMessagesAsync(accountname, databaseName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the specified schema from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find.
            /// </param>
            public static USqlSchema GetSchema(this ICatalogOperations operations, string accountname, string databaseName, string schemaName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetSchemaAsync(accountname, databaseName, schemaName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified schema from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema to find.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlSchema> GetSchemaAsync( this ICatalogOperations operations, string accountname, string databaseName, string schemaName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetSchemaWithHttpMessagesAsync(accountname, databaseName, schemaName, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of schemas from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlSchema> ListSchemas(this ICatalogOperations operations, string accountname, string databaseName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListSchemasAsync(accountname, databaseName, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of schemas from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database to find the schema in.
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlSchema>> ListSchemasAsync( this ICatalogOperations operations, string accountname, string databaseName, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListSchemasWithHttpMessagesAsync(accountname, databaseName, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the specified database from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The path to the file to create.
            /// </param>
            public static USqlDatabase GetDatabase(this ICatalogOperations operations, string accountname, string databaseName)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).GetDatabaseAsync(accountname, databaseName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specified database from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='databaseName'>
            /// The path to the file to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<USqlDatabase> GetDatabaseAsync( this ICatalogOperations operations, string accountname, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetDatabaseWithHttpMessagesAsync(accountname, databaseName, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of databases from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<USqlDatabase> ListDatabases(this ICatalogOperations operations, string accountname, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListDatabasesAsync(accountname, filter, top, skip, expand, select, orderby, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of databases from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the account to use
            /// </param>
            /// <param name='filter'>
            /// Gets or sets OData filter. Optional.
            /// </param>
            /// <param name='top'>
            /// Gets or sets the number of items to return. Optional.
            /// </param>
            /// <param name='skip'>
            /// Gets or sets the number of items to skip over before returning elements.
            /// Optional.
            /// </param>
            /// <param name='expand'>
            /// Gets or sets OData expansion. Expand related resources in line with the
            /// retrieved resources, e.g. Categories/$expand=Products would expand
            /// Product data in line with each Category entry. Optional.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='orderby'>
            /// Gets or sets the OrderBy clause. One or more comma-separated expressions
            /// with an optional â€œascâ€ (the default) or â€œdescâ€ depending on the
            /// order youâ€™d like the values sorted, e.g.
            /// Categories?$orderby=CategoryName desc. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlDatabase>> ListDatabasesAsync( this ICatalogOperations operations, string accountname, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), string select = default(string), string orderby = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListDatabasesWithHttpMessagesAsync(accountname, filter, top, skip, expand, select, orderby, count, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of external data sources from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlExternalDataSource> ListExternalDataSourcesNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListExternalDataSourcesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of external data sources from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlExternalDataSource>> ListExternalDataSourcesNextAsync( this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListExternalDataSourcesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of credentials from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlCredential> ListCredentialsNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListCredentialsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of credentials from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlCredential>> ListCredentialsNextAsync( this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListCredentialsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of procedures from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlProcedure> ListProceduresNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListProceduresNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of procedures from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlProcedure>> ListProceduresNextAsync( this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListProceduresNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlTable> ListTablesNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTablesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTable>> ListTablesNextAsync( this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListTablesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of views from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlView> ListViewsNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListViewsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of views from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlView>> ListViewsNextAsync( this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListViewsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlTableStatistics> ListTableStatisticsNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTableStatisticsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of tables from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTableStatistics>> ListTableStatisticsNextAsync( this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListTableStatisticsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of catalog types within the specified database and
            /// schema for the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlType> ListTypesNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTypesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of catalog types within the specified database and
            /// schema for the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlType>> ListTypesNextAsync( this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListTypesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of table valued functions from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlTableValuedFunction> ListTableValuedFunctionsNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListTableValuedFunctionsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of table valued functions from the current Data Lake
            /// Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlTableValuedFunction>> ListTableValuedFunctionsNextAsync( this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListTableValuedFunctionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of assemblies from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlAssemblyClr> ListAssembliesNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListAssembliesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of assemblies from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlAssemblyClr>> ListAssembliesNextAsync( this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListAssembliesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of schemas from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlSchema> ListSchemasNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListSchemasNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of schemas from the current Data Lake Analytics catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlSchema>> ListSchemasNextAsync( this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListSchemasNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <summary>
            /// Retrieves the list of databases from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<USqlDatabase> ListDatabasesNext(this ICatalogOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICatalogOperations)s).ListDatabasesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of databases from the current Data Lake Analytics
            /// catalog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<USqlDatabase>> ListDatabasesNextAsync( this ICatalogOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListDatabasesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

    }
}
