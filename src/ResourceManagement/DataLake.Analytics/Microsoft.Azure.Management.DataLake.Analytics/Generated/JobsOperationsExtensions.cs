// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Analytics
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure.OData;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class JobsOperationsExtensions
    {
            /// <summary>
            /// Gets the job statistics object specified by the job ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to get the job from
            /// </param>
            /// <param name='jobIdentity'>
            /// JobInfo ID.
            /// </param>
            public static JobStatistics GetStatistics(this IJobsOperations operations, string accountname, string jobIdentity)
            {
                return Task.Factory.StartNew(s => ((IJobsOperations)s).GetStatisticsAsync(accountname, jobIdentity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the job statistics object specified by the job ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to get the job from
            /// </param>
            /// <param name='jobIdentity'>
            /// JobInfo ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobStatistics> GetStatisticsAsync( this IJobsOperations operations, string accountname, string jobIdentity, CancellationToken cancellationToken = default(CancellationToken))
            {
                var result = await operations.GetStatisticsWithHttpMessagesAsync(accountname, jobIdentity, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets the U-SQL job debug data information specified by the job ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to get the job from
            /// </param>
            /// <param name='jobIdentity'>
            /// JobInfo ID.
            /// </param>
            public static JobDataPath GetDebugDataPath(this IJobsOperations operations, string accountname, string jobIdentity)
            {
                return Task.Factory.StartNew(s => ((IJobsOperations)s).GetDebugDataPathAsync(accountname, jobIdentity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the U-SQL job debug data information specified by the job ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to get the job from
            /// </param>
            /// <param name='jobIdentity'>
            /// JobInfo ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobDataPath> GetDebugDataPathAsync( this IJobsOperations operations, string accountname, string jobIdentity, CancellationToken cancellationToken = default(CancellationToken))
            {
                var result = await operations.GetDebugDataPathWithHttpMessagesAsync(accountname, jobIdentity, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Builds (compiles) the specified job in the specified Data Lake Analytics
            /// account for job correctness and validation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to build the job for
            /// </param>
            /// <param name='parameters'>
            /// The parameters to build a job, which simulates submission.
            /// </param>
            public static JobInformation Build(this IJobsOperations operations, string accountname, JobInfoBuildOrCreateParameters parameters)
            {
                return Task.Factory.StartNew(s => ((IJobsOperations)s).BuildAsync(accountname, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Builds (compiles) the specified job in the specified Data Lake Analytics
            /// account for job correctness and validation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to build the job for
            /// </param>
            /// <param name='parameters'>
            /// The parameters to build a job, which simulates submission.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobInformation> BuildAsync( this IJobsOperations operations, string accountname, JobInfoBuildOrCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                var result = await operations.BuildWithHttpMessagesAsync(accountname, parameters, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Submits the specified job to the specified Data Lake Analytics account for
            /// computation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to create the job for
            /// </param>
            /// <param name='jobId'>
            /// The parameters to submit a job.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to submit a job.
            /// </param>
            public static JobInformation Create(this IJobsOperations operations, string accountname, string jobId, JobInfoBuildOrCreateParameters parameters)
            {
                return Task.Factory.StartNew(s => ((IJobsOperations)s).CreateAsync(accountname, jobId, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits the specified job to the specified Data Lake Analytics account for
            /// computation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to create the job for
            /// </param>
            /// <param name='jobId'>
            /// The parameters to submit a job.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to submit a job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobInformation> CreateAsync( this IJobsOperations operations, string accountname, string jobId, JobInfoBuildOrCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                var result = await operations.CreateWithHttpMessagesAsync(accountname, jobId, parameters, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Cancels the running job specified by the job ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to cancel the job for
            /// </param>
            /// <param name='jobIdentity'>
            /// JobInfo ID to cancel.
            /// </param>
            public static void Cancel(this IJobsOperations operations, string accountname, string jobIdentity)
            {
                Task.Factory.StartNew(s => ((IJobsOperations)s).CancelAsync(accountname, jobIdentity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels the running job specified by the job ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to cancel the job for
            /// </param>
            /// <param name='jobIdentity'>
            /// JobInfo ID to cancel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelAsync( this IJobsOperations operations, string accountname, string jobIdentity, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CancelWithHttpMessagesAsync(accountname, jobIdentity, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the JobInfo object specified by the job ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to get the job from
            /// </param>
            /// <param name='jobIdentity'>
            /// JobInfo ID.
            /// </param>
            public static JobInformation Get(this IJobsOperations operations, string accountname, string jobIdentity)
            {
                return Task.Factory.StartNew(s => ((IJobsOperations)s).GetAsync(accountname, jobIdentity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the JobInfo object specified by the job ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to get the job from
            /// </param>
            /// <param name='jobIdentity'>
            /// JobInfo ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobInformation> GetAsync( this IJobsOperations operations, string accountname, string jobIdentity, CancellationToken cancellationToken = default(CancellationToken))
            {
                var result = await operations.GetWithHttpMessagesAsync(accountname, jobIdentity, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets the first page of the Data Lake Analytics JobInformation objects
            /// within the specified resource group with a link to the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to get the job from
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='search'>
            /// Gets or sets a free form search. A free-text search expression to match
            /// for whether a particular entry should be included in the feed, e.g.
            /// Categories?$search=blue OR green. Optional.
            /// </param>
            /// <param name='format'>
            /// Gets or sets the return format. Return the response in particular
            /// formatxii without access to request headers for standard content-type
            /// negotiation (e.g Orders?$format=json). Optional.
            /// </param>
            public static IPage<JobInformation> List(this IJobsOperations operations, string accountname, ODataQuery<JobInformation> odataQuery = default(ODataQuery<JobInformation>), string select = default(string), bool? count = default(bool?), string search = default(string), string format = default(string))
            {
                return Task.Factory.StartNew(s => ((IJobsOperations)s).ListAsync(accountname, odataQuery, select, count, search, format), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of the Data Lake Analytics JobInformation objects
            /// within the specified resource group with a link to the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountname'>
            /// The name of the Data Lake Analytics account to get the job from
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// Gets or sets OData Select statement. Limits the properties on each entry
            /// to just those requested, e.g.
            /// Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// Gets or sets a Boolean value of true or false to request a count of the
            /// matching resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='search'>
            /// Gets or sets a free form search. A free-text search expression to match
            /// for whether a particular entry should be included in the feed, e.g.
            /// Categories?$search=blue OR green. Optional.
            /// </param>
            /// <param name='format'>
            /// Gets or sets the return format. Return the response in particular
            /// formatxii without access to request headers for standard content-type
            /// negotiation (e.g Orders?$format=json). Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<JobInformation>> ListAsync( this IJobsOperations operations, string accountname, ODataQuery<JobInformation> odataQuery = default(ODataQuery<JobInformation>), string select = default(string), bool? count = default(bool?), string search = default(string), string format = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                var result = await operations.ListWithHttpMessagesAsync(accountname, odataQuery, select, count, search, format, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets the first page of the Data Lake Analytics JobInformation objects
            /// within the specified resource group with a link to the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<JobInformation> ListNext(this IJobsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IJobsOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of the Data Lake Analytics JobInformation objects
            /// within the specified resource group with a link to the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<JobInformation>> ListNextAsync( this IJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                var result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

    }
}
