// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure.CentralManagement.BackupServices;
using Microsoft.Azure.CentralManagement.BackupServices.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.CentralManagement.BackupServices
{
    /// <summary>
    /// Definition of Protection Policy operations for the Azure Backup
    /// extension.
    /// </summary>
    internal partial class ProtectionPolicyOperations : IServiceOperations<BackupServicesCentralManagementClient>, IProtectionPolicyOperations
    {
        /// <summary>
        /// Initializes a new instance of the ProtectionPolicyOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ProtectionPolicyOperations(BackupServicesCentralManagementClient client)
        {
            this._client = client;
        }
        
        private BackupServicesCentralManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.CentralManagement.BackupServices.BackupServicesCentralManagementClient.
        /// </summary>
        public BackupServicesCentralManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create new Protection Policy.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required.
        /// </param>
        /// <param name='resourceName'>
        /// Required.
        /// </param>
        /// <param name='fabricName'>
        /// Required.
        /// </param>
        /// <param name='policyName'>
        /// Required. The protection policy Name to be added/updated.
        /// </param>
        /// <param name='request'>
        /// Required. The protection policy creation request.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a WorkerResponseBase.
        /// </returns>
        public async Task<ResourceWorkerResponse> CreateOrUpdateAsync(string resourceGroupName, string resourceName, string fabricName, string policyName, ResourceWorkerRequest request, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("request", request);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Backup";
            url = url + "/";
            url = url + "recoveryServicesVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/backupPolicies/";
            url = url + Uri.EscapeDataString(policyName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject resourceWorkerRequestValue = new JObject();
                requestDoc = resourceWorkerRequestValue;
                
                if (request.ResourceId != null)
                {
                    resourceWorkerRequestValue["resourceId"] = request.ResourceId;
                }
                
                if (request.Item != null)
                {
                    JObject itemValue = new JObject();
                    resourceWorkerRequestValue["item"] = itemValue;
                    
                    if (request.Item.Id != null)
                    {
                        itemValue["id"] = request.Item.Id;
                    }
                    
                    if (request.Item.Name != null)
                    {
                        itemValue["name"] = request.Item.Name;
                    }
                    
                    if (request.Item.Type != null)
                    {
                        itemValue["type"] = request.Item.Type;
                    }
                    
                    if (request.Item.Location != null)
                    {
                        itemValue["location"] = request.Item.Location;
                    }
                    
                    if (request.Item.Tags != null)
                    {
                        if (request.Item.Tags is ILazyCollection == false || ((ILazyCollection)request.Item.Tags).IsInitialized)
                        {
                            JObject tagsDictionary = new JObject();
                            foreach (KeyValuePair<string, string> pair in request.Item.Tags)
                            {
                                string tagsKey = pair.Key;
                                string tagsValue = pair.Value;
                                tagsDictionary[tagsKey] = tagsValue;
                            }
                            itemValue["tags"] = tagsDictionary;
                        }
                    }
                    
                    if (request.Item.ETag != null)
                    {
                        itemValue["eTag"] = request.Item.ETag;
                    }
                    
                    if (request.Item.Properties != null)
                    {
                        itemValue["properties"] = request.Item.Properties.ToString();
                    }
                }
                
                if (request.Uri != null)
                {
                    resourceWorkerRequestValue["uri"] = request.Uri;
                }
                
                if (request.Headers != null)
                {
                    JObject headersDictionary = new JObject();
                    foreach (KeyValuePair<string, IList<string>> pair2 in request.Headers)
                    {
                        string headersKey = pair2.Key;
                        IList<string> headersValue = pair2.Value;
                        headersDictionary[headersKey] = headersValue.ToString();
                    }
                    resourceWorkerRequestValue["headers"] = headersDictionary;
                }
                
                if (request.Parameters != null)
                {
                    JObject parametersDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair3 in request.Parameters)
                    {
                        string parametersKey = pair3.Key;
                        string parametersValue = pair3.Value;
                        parametersDictionary[parametersKey] = parametersValue;
                    }
                    resourceWorkerRequestValue["parameters"] = parametersDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ResourceWorkerResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ResourceWorkerResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken itemValue2 = responseDoc["item"];
                            if (itemValue2 != null && itemValue2.Type != JTokenType.Null)
                            {
                                Resource itemInstance = new Resource();
                                result.Item = itemInstance;
                                
                                JToken idValue = itemValue2["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    itemInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = itemValue2["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    itemInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = itemValue2["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    itemInstance.Type = typeInstance;
                                }
                                
                                JToken locationValue = itemValue2["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    itemInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)itemValue2["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey2 = ((string)property.Name);
                                        string tagsValue2 = ((string)property.Value);
                                        itemInstance.Tags.Add(tagsKey2, tagsValue2);
                                    }
                                }
                                
                                JToken eTagValue = itemValue2["eTag"];
                                if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                                {
                                    string eTagInstance = ((string)eTagValue);
                                    itemInstance.ETag = eTagInstance;
                                }
                                
                                JToken propertiesValue = itemValue2["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    ProtectionPolicyBase propertiesInstance = new ProtectionPolicyBase();
                                    itemInstance.Properties = propertiesInstance;
                                }
                            }
                            
                            JToken statusCodeValue = responseDoc["statusCode"];
                            if (statusCodeValue != null && statusCodeValue.Type != JTokenType.Null)
                            {
                                HttpStatusCode statusCodeInstance = ((HttpStatusCode)Enum.Parse(typeof(HttpStatusCode), ((string)statusCodeValue), true));
                                result.StatusCode = statusCodeInstance;
                            }
                            
                            JToken headersSequenceElement = ((JToken)responseDoc["headers"]);
                            if (headersSequenceElement != null && headersSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in headersSequenceElement)
                                {
                                    string headersKey2 = ((string)property2.Name);
                                    IList<string> headersValue2 = new List<string>();
                                    foreach (JToken headersElement in ((JArray)property2.Value))
                                    {
                                        headersValue2.Add(((string)headersElement));
                                    }
                                    result.Headers.Add(headersKey2, headersValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a Protection Policy.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required.
        /// </param>
        /// <param name='resourceName'>
        /// Required.
        /// </param>
        /// <param name='fabricName'>
        /// Required.
        /// </param>
        /// <param name='policyName'>
        /// Required. The protection policy Name to be deleted.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a WorkerResponseBase.
        /// </returns>
        public async Task<ResourceWorkerResponse> DeleteAsync(string resourceGroupName, string resourceName, string fabricName, string policyName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Backup";
            url = url + "/";
            url = url + "recoveryServicesVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/backupPolicies/";
            url = url + Uri.EscapeDataString(policyName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ResourceWorkerResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ResourceWorkerResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken itemValue = responseDoc["item"];
                            if (itemValue != null && itemValue.Type != JTokenType.Null)
                            {
                                Resource itemInstance = new Resource();
                                result.Item = itemInstance;
                                
                                JToken idValue = itemValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    itemInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = itemValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    itemInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = itemValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    itemInstance.Type = typeInstance;
                                }
                                
                                JToken locationValue = itemValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    itemInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)itemValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        itemInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken eTagValue = itemValue["eTag"];
                                if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                                {
                                    string eTagInstance = ((string)eTagValue);
                                    itemInstance.ETag = eTagInstance;
                                }
                                
                                JToken propertiesValue = itemValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    ProtectionPolicyBase propertiesInstance = new ProtectionPolicyBase();
                                    itemInstance.Properties = propertiesInstance;
                                }
                            }
                            
                            JToken statusCodeValue = responseDoc["statusCode"];
                            if (statusCodeValue != null && statusCodeValue.Type != JTokenType.Null)
                            {
                                HttpStatusCode statusCodeInstance = ((HttpStatusCode)Enum.Parse(typeof(HttpStatusCode), ((string)statusCodeValue), true));
                                result.StatusCode = statusCodeInstance;
                            }
                            
                            JToken headersSequenceElement = ((JToken)responseDoc["headers"]);
                            if (headersSequenceElement != null && headersSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in headersSequenceElement)
                                {
                                    string headersKey = ((string)property2.Name);
                                    IList<string> headersValue = new List<string>();
                                    foreach (JToken headersElement in ((JArray)property2.Value))
                                    {
                                        headersValue.Add(((string)headersElement));
                                    }
                                    result.Headers.Add(headersKey, headersValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all Protection Policy.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required.
        /// </param>
        /// <param name='resourceName'>
        /// Required.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a WorkerResponseBase.
        /// </returns>
        public async Task<ResourceListWorkerResponse> ListAsync(string resourceGroupName, string resourceName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Backup";
            url = url + "/";
            url = url + "recoveryServicesVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupPolicies";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ResourceListWorkerResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ResourceListWorkerResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken itemListValue = responseDoc["itemList"];
                            if (itemListValue != null && itemListValue.Type != JTokenType.Null)
                            {
                                ResourceList itemListInstance = new ResourceList();
                                result.ItemList = itemListInstance;
                                
                                JToken valueArray = itemListValue["value"];
                                if (valueArray != null && valueArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken valueValue in ((JArray)valueArray))
                                    {

                                        itemListInstance.Value.Add(((string)valueValue));
                                    }
                                }
                                
                                JToken nextLinkValue = itemListValue["nextLink"];
                                if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                                {
                                    string nextLinkInstance = ((string)nextLinkValue);
                                    itemListInstance.NextLink = nextLinkInstance;
                                }
                            }
                            
                            JToken statusCodeValue = responseDoc["statusCode"];
                            if (statusCodeValue != null && statusCodeValue.Type != JTokenType.Null)
                            {
                                HttpStatusCode statusCodeInstance = ((HttpStatusCode)Enum.Parse(typeof(HttpStatusCode), ((string)statusCodeValue), true));
                                result.StatusCode = statusCodeInstance;
                            }
                            
                            JToken headersSequenceElement = ((JToken)responseDoc["headers"]);
                            if (headersSequenceElement != null && headersSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in headersSequenceElement)
                                {
                                    string headersKey = ((string)property.Name);
                                    IList<string> headersValue = new List<string>();
                                    foreach (JToken headersElement in ((JArray)property.Value))
                                    {
                                        headersValue.Add(((string)headersElement));
                                    }
                                    result.Headers.Add(headersKey, headersValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
