// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.Sql;
using Microsoft.Azure.Management.Sql.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Sql
{
    /// <summary>
    /// Represents all the operations for operating pertaining to activation on
    /// Azure SQL Data Warehouse databases. Contains operations to: Pause and
    /// Resume databases
    /// </summary>
    internal partial class DatabaseActivationOperations : IServiceOperations<SqlManagementClient>, IDatabaseActivationOperations
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseActivationOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DatabaseActivationOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Start an Azure SQL Data Warehouse database pause operation.To
        /// determine the status of the operation call
        /// GetDatabaseOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Server on which the data
        /// warehouse database is hosted.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Data Warehouse database to
        /// pause.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running Azure Sql Database operations.
        /// </returns>
        public async Task<DatabaseCreateOrUpdateResponse> BeginPauseAsync(string resourceGroupName, string serverName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "BeginPauseAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/pause";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DatabaseCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            Database databaseInstance = new Database();
                            result.Database = databaseInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                DatabaseProperties propertiesInstance = new DatabaseProperties();
                                databaseInstance.Properties = propertiesInstance;
                                
                                JToken collationValue = propertiesValue["collation"];
                                if (collationValue != null && collationValue.Type != JTokenType.Null)
                                {
                                    string collationInstance = ((string)collationValue);
                                    propertiesInstance.Collation = collationInstance;
                                }
                                
                                JToken creationDateValue = propertiesValue["creationDate"];
                                if (creationDateValue != null && creationDateValue.Type != JTokenType.Null)
                                {
                                    DateTime creationDateInstance = ((DateTime)creationDateValue);
                                    propertiesInstance.CreationDate = creationDateInstance;
                                }
                                
                                JToken currentServiceObjectiveIdValue = propertiesValue["currentServiceObjectiveId"];
                                if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    string currentServiceObjectiveIdInstance = ((string)currentServiceObjectiveIdValue);
                                    propertiesInstance.CurrentServiceObjectiveId = currentServiceObjectiveIdInstance;
                                }
                                
                                JToken databaseIdValue = propertiesValue["databaseId"];
                                if (databaseIdValue != null && databaseIdValue.Type != JTokenType.Null)
                                {
                                    string databaseIdInstance = ((string)databaseIdValue);
                                    propertiesInstance.DatabaseId = databaseIdInstance;
                                }
                                
                                JToken earliestRestoreDateValue = propertiesValue["earliestRestoreDate"];
                                if (earliestRestoreDateValue != null && earliestRestoreDateValue.Type != JTokenType.Null)
                                {
                                    DateTime earliestRestoreDateInstance = ((DateTime)earliestRestoreDateValue);
                                    propertiesInstance.EarliestRestoreDate = earliestRestoreDateInstance;
                                }
                                
                                JToken editionValue = propertiesValue["edition"];
                                if (editionValue != null && editionValue.Type != JTokenType.Null)
                                {
                                    string editionInstance = ((string)editionValue);
                                    propertiesInstance.Edition = editionInstance;
                                }
                                
                                JToken maxSizeBytesValue = propertiesValue["maxSizeBytes"];
                                if (maxSizeBytesValue != null && maxSizeBytesValue.Type != JTokenType.Null)
                                {
                                    long maxSizeBytesInstance = ((long)maxSizeBytesValue);
                                    propertiesInstance.MaxSizeBytes = maxSizeBytesInstance;
                                }
                                
                                JToken requestedServiceObjectiveIdValue = propertiesValue["requestedServiceObjectiveId"];
                                if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    string requestedServiceObjectiveIdInstance = ((string)requestedServiceObjectiveIdValue);
                                    propertiesInstance.RequestedServiceObjectiveId = requestedServiceObjectiveIdInstance;
                                }
                                
                                JToken requestedServiceObjectiveNameValue = propertiesValue["requestedServiceObjectiveName"];
                                if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue.Type != JTokenType.Null)
                                {
                                    string requestedServiceObjectiveNameInstance = ((string)requestedServiceObjectiveNameValue);
                                    propertiesInstance.RequestedServiceObjectiveName = requestedServiceObjectiveNameInstance;
                                }
                                
                                JToken serviceLevelObjectiveValue = propertiesValue["serviceLevelObjective"];
                                if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue.Type != JTokenType.Null)
                                {
                                    string serviceLevelObjectiveInstance = ((string)serviceLevelObjectiveValue);
                                    propertiesInstance.ServiceObjective = serviceLevelObjectiveInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    string statusInstance = ((string)statusValue);
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken elasticPoolNameValue = propertiesValue["elasticPoolName"];
                                if (elasticPoolNameValue != null && elasticPoolNameValue.Type != JTokenType.Null)
                                {
                                    string elasticPoolNameInstance = ((string)elasticPoolNameValue);
                                    propertiesInstance.ElasticPoolName = elasticPoolNameInstance;
                                }
                                
                                JToken serviceTierAdvisorsArray = propertiesValue["serviceTierAdvisors"];
                                if (serviceTierAdvisorsArray != null && serviceTierAdvisorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken serviceTierAdvisorsValue in ((JArray)serviceTierAdvisorsArray))
                                    {
                                        ServiceTierAdvisor serviceTierAdvisorInstance = new ServiceTierAdvisor();
                                        propertiesInstance.ServiceTierAdvisors.Add(serviceTierAdvisorInstance);
                                        
                                        JToken propertiesValue2 = serviceTierAdvisorsValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            ServiceTierAdvisorProperties propertiesInstance2 = new ServiceTierAdvisorProperties();
                                            serviceTierAdvisorInstance.Properties = propertiesInstance2;
                                            
                                            JToken observationPeriodStartValue = propertiesValue2["observationPeriodStart"];
                                            if (observationPeriodStartValue != null && observationPeriodStartValue.Type != JTokenType.Null)
                                            {
                                                DateTime observationPeriodStartInstance = ((DateTime)observationPeriodStartValue);
                                                propertiesInstance2.ObservationPeriodStart = observationPeriodStartInstance;
                                            }
                                            
                                            JToken observationPeriodEndValue = propertiesValue2["observationPeriodEnd"];
                                            if (observationPeriodEndValue != null && observationPeriodEndValue.Type != JTokenType.Null)
                                            {
                                                DateTime observationPeriodEndInstance = ((DateTime)observationPeriodEndValue);
                                                propertiesInstance2.ObservationPeriodEnd = observationPeriodEndInstance;
                                            }
                                            
                                            JToken activeTimeRatioValue = propertiesValue2["activeTimeRatio"];
                                            if (activeTimeRatioValue != null && activeTimeRatioValue.Type != JTokenType.Null)
                                            {
                                                double activeTimeRatioInstance = ((double)activeTimeRatioValue);
                                                propertiesInstance2.ActiveTimeRatio = activeTimeRatioInstance;
                                            }
                                            
                                            JToken minDtuValue = propertiesValue2["minDtu"];
                                            if (minDtuValue != null && minDtuValue.Type != JTokenType.Null)
                                            {
                                                double minDtuInstance = ((double)minDtuValue);
                                                propertiesInstance2.MinDtu = minDtuInstance;
                                            }
                                            
                                            JToken avgDtuValue = propertiesValue2["avgDtu"];
                                            if (avgDtuValue != null && avgDtuValue.Type != JTokenType.Null)
                                            {
                                                double avgDtuInstance = ((double)avgDtuValue);
                                                propertiesInstance2.AvgDtu = avgDtuInstance;
                                            }
                                            
                                            JToken maxDtuValue = propertiesValue2["maxDtu"];
                                            if (maxDtuValue != null && maxDtuValue.Type != JTokenType.Null)
                                            {
                                                double maxDtuInstance = ((double)maxDtuValue);
                                                propertiesInstance2.MaxDtu = maxDtuInstance;
                                            }
                                            
                                            JToken maxSizeInGBValue = propertiesValue2["maxSizeInGB"];
                                            if (maxSizeInGBValue != null && maxSizeInGBValue.Type != JTokenType.Null)
                                            {
                                                double maxSizeInGBInstance = ((double)maxSizeInGBValue);
                                                propertiesInstance2.MaxSizeInGB = maxSizeInGBInstance;
                                            }
                                            
                                            JToken serviceLevelObjectiveUsageMetricsArray = propertiesValue2["serviceLevelObjectiveUsageMetrics"];
                                            if (serviceLevelObjectiveUsageMetricsArray != null && serviceLevelObjectiveUsageMetricsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken serviceLevelObjectiveUsageMetricsValue in ((JArray)serviceLevelObjectiveUsageMetricsArray))
                                                {
                                                    SloUsageMetric sloUsageMetricInstance = new SloUsageMetric();
                                                    propertiesInstance2.ServiceLevelObjectiveUsageMetrics.Add(sloUsageMetricInstance);
                                                    
                                                    JToken serviceLevelObjectiveValue2 = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjective"];
                                                    if (serviceLevelObjectiveValue2 != null && serviceLevelObjectiveValue2.Type != JTokenType.Null)
                                                    {
                                                        string serviceLevelObjectiveInstance2 = ((string)serviceLevelObjectiveValue2);
                                                        sloUsageMetricInstance.ServiceLevelObjective = serviceLevelObjectiveInstance2;
                                                    }
                                                    
                                                    JToken serviceLevelObjectiveIdValue = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjectiveId"];
                                                    if (serviceLevelObjectiveIdValue != null && serviceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        Guid serviceLevelObjectiveIdInstance = Guid.Parse(((string)serviceLevelObjectiveIdValue));
                                                        sloUsageMetricInstance.ServiceLevelObjectiveId = serviceLevelObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken inRangeTimeRatioValue = serviceLevelObjectiveUsageMetricsValue["inRangeTimeRatio"];
                                                    if (inRangeTimeRatioValue != null && inRangeTimeRatioValue.Type != JTokenType.Null)
                                                    {
                                                        double inRangeTimeRatioInstance = ((double)inRangeTimeRatioValue);
                                                        sloUsageMetricInstance.InRangeTimeRatio = inRangeTimeRatioInstance;
                                                    }
                                                    
                                                    JToken idValue = serviceLevelObjectiveUsageMetricsValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        sloUsageMetricInstance.Id = idInstance;
                                                    }
                                                    
                                                    JToken nameValue = serviceLevelObjectiveUsageMetricsValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        sloUsageMetricInstance.Name = nameInstance;
                                                    }
                                                    
                                                    JToken typeValue = serviceLevelObjectiveUsageMetricsValue["type"];
                                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance = ((string)typeValue);
                                                        sloUsageMetricInstance.Type = typeInstance;
                                                    }
                                                    
                                                    JToken locationValue = serviceLevelObjectiveUsageMetricsValue["location"];
                                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                    {
                                                        string locationInstance = ((string)locationValue);
                                                        sloUsageMetricInstance.Location = locationInstance;
                                                    }
                                                    
                                                    JToken tagsSequenceElement = ((JToken)serviceLevelObjectiveUsageMetricsValue["tags"]);
                                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property in tagsSequenceElement)
                                                        {
                                                            string tagsKey = ((string)property.Name);
                                                            string tagsValue = ((string)property.Value);
                                                            sloUsageMetricInstance.Tags.Add(tagsKey, tagsValue);
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken currentServiceLevelObjectiveValue = propertiesValue2["currentServiceLevelObjective"];
                                            if (currentServiceLevelObjectiveValue != null && currentServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string currentServiceLevelObjectiveInstance = ((string)currentServiceLevelObjectiveValue);
                                                propertiesInstance2.CurrentServiceLevelObjective = currentServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken currentServiceLevelObjectiveIdValue = propertiesValue2["currentServiceLevelObjectiveId"];
                                            if (currentServiceLevelObjectiveIdValue != null && currentServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid currentServiceLevelObjectiveIdInstance = Guid.Parse(((string)currentServiceLevelObjectiveIdValue));
                                                propertiesInstance2.CurrentServiceLevelObjectiveId = currentServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken usageBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["usageBasedRecommendationServiceLevelObjective"];
                                            if (usageBasedRecommendationServiceLevelObjectiveValue != null && usageBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string usageBasedRecommendationServiceLevelObjectiveInstance = ((string)usageBasedRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.UsageBasedRecommendationServiceLevelObjective = usageBasedRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken usageBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["usageBasedRecommendationServiceLevelObjectiveId"];
                                            if (usageBasedRecommendationServiceLevelObjectiveIdValue != null && usageBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid usageBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)usageBasedRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.UsageBasedRecommendationServiceLevelObjectiveId = usageBasedRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken databaseSizeBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["databaseSizeBasedRecommendationServiceLevelObjective"];
                                            if (databaseSizeBasedRecommendationServiceLevelObjectiveValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string databaseSizeBasedRecommendationServiceLevelObjectiveInstance = ((string)databaseSizeBasedRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.DatabaseSizeBasedRecommendationServiceLevelObjective = databaseSizeBasedRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken databaseSizeBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["databaseSizeBasedRecommendationServiceLevelObjectiveId"];
                                            if (databaseSizeBasedRecommendationServiceLevelObjectiveIdValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)databaseSizeBasedRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.DatabaseSizeBasedRecommendationServiceLevelObjectiveId = databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken disasterPlanBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["disasterPlanBasedRecommendationServiceLevelObjective"];
                                            if (disasterPlanBasedRecommendationServiceLevelObjectiveValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string disasterPlanBasedRecommendationServiceLevelObjectiveInstance = ((string)disasterPlanBasedRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.DisasterPlanBasedRecommendationServiceLevelObjective = disasterPlanBasedRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken disasterPlanBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["disasterPlanBasedRecommendationServiceLevelObjectiveId"];
                                            if (disasterPlanBasedRecommendationServiceLevelObjectiveIdValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)disasterPlanBasedRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.DisasterPlanBasedRecommendationServiceLevelObjectiveId = disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken overallRecommendationServiceLevelObjectiveValue = propertiesValue2["overallRecommendationServiceLevelObjective"];
                                            if (overallRecommendationServiceLevelObjectiveValue != null && overallRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string overallRecommendationServiceLevelObjectiveInstance = ((string)overallRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.OverallRecommendationServiceLevelObjective = overallRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken overallRecommendationServiceLevelObjectiveIdValue = propertiesValue2["overallRecommendationServiceLevelObjectiveId"];
                                            if (overallRecommendationServiceLevelObjectiveIdValue != null && overallRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid overallRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)overallRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.OverallRecommendationServiceLevelObjectiveId = overallRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken confidenceValue = propertiesValue2["confidence"];
                                            if (confidenceValue != null && confidenceValue.Type != JTokenType.Null)
                                            {
                                                double confidenceInstance = ((double)confidenceValue);
                                                propertiesInstance2.Confidence = confidenceInstance;
                                            }
                                        }
                                        
                                        JToken idValue2 = serviceTierAdvisorsValue["id"];
                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                        {
                                            string idInstance2 = ((string)idValue2);
                                            serviceTierAdvisorInstance.Id = idInstance2;
                                        }
                                        
                                        JToken nameValue2 = serviceTierAdvisorsValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            serviceTierAdvisorInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken typeValue2 = serviceTierAdvisorsValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            serviceTierAdvisorInstance.Type = typeInstance2;
                                        }
                                        
                                        JToken locationValue2 = serviceTierAdvisorsValue["location"];
                                        if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                        {
                                            string locationInstance2 = ((string)locationValue2);
                                            serviceTierAdvisorInstance.Location = locationInstance2;
                                        }
                                        
                                        JToken tagsSequenceElement2 = ((JToken)serviceTierAdvisorsValue["tags"]);
                                        if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property2 in tagsSequenceElement2)
                                            {
                                                string tagsKey2 = ((string)property2.Name);
                                                string tagsValue2 = ((string)property2.Value);
                                                serviceTierAdvisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                            }
                                        }
                                    }
                                }
                                
                                JToken upgradeHintValue = propertiesValue["upgradeHint"];
                                if (upgradeHintValue != null && upgradeHintValue.Type != JTokenType.Null)
                                {
                                    UpgradeHint upgradeHintInstance = new UpgradeHint();
                                    propertiesInstance.UpgradeHint = upgradeHintInstance;
                                    
                                    JToken targetServiceLevelObjectiveValue = upgradeHintValue["targetServiceLevelObjective"];
                                    if (targetServiceLevelObjectiveValue != null && targetServiceLevelObjectiveValue.Type != JTokenType.Null)
                                    {
                                        string targetServiceLevelObjectiveInstance = ((string)targetServiceLevelObjectiveValue);
                                        upgradeHintInstance.TargetServiceLevelObjective = targetServiceLevelObjectiveInstance;
                                    }
                                    
                                    JToken targetServiceLevelObjectiveIdValue = upgradeHintValue["targetServiceLevelObjectiveId"];
                                    if (targetServiceLevelObjectiveIdValue != null && targetServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                    {
                                        Guid targetServiceLevelObjectiveIdInstance = Guid.Parse(((string)targetServiceLevelObjectiveIdValue));
                                        upgradeHintInstance.TargetServiceLevelObjectiveId = targetServiceLevelObjectiveIdInstance;
                                    }
                                    
                                    JToken idValue3 = upgradeHintValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        upgradeHintInstance.Id = idInstance3;
                                    }
                                    
                                    JToken nameValue3 = upgradeHintValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        upgradeHintInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken typeValue3 = upgradeHintValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        upgradeHintInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken locationValue3 = upgradeHintValue["location"];
                                    if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                    {
                                        string locationInstance3 = ((string)locationValue3);
                                        upgradeHintInstance.Location = locationInstance3;
                                    }
                                    
                                    JToken tagsSequenceElement3 = ((JToken)upgradeHintValue["tags"]);
                                    if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property3 in tagsSequenceElement3)
                                        {
                                            string tagsKey3 = ((string)property3.Name);
                                            string tagsValue3 = ((string)property3.Value);
                                            upgradeHintInstance.Tags.Add(tagsKey3, tagsValue3);
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue4 = responseDoc["id"];
                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                            {
                                string idInstance4 = ((string)idValue4);
                                databaseInstance.Id = idInstance4;
                            }
                            
                            JToken nameValue4 = responseDoc["name"];
                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                            {
                                string nameInstance4 = ((string)nameValue4);
                                databaseInstance.Name = nameInstance4;
                            }
                            
                            JToken typeValue4 = responseDoc["type"];
                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                            {
                                string typeInstance4 = ((string)typeValue4);
                                databaseInstance.Type = typeInstance4;
                            }
                            
                            JToken locationValue4 = responseDoc["location"];
                            if (locationValue4 != null && locationValue4.Type != JTokenType.Null)
                            {
                                string locationInstance4 = ((string)locationValue4);
                                databaseInstance.Location = locationInstance4;
                            }
                            
                            JToken tagsSequenceElement4 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement4 != null && tagsSequenceElement4.Type != JTokenType.Null)
                            {
                                foreach (JProperty property4 in tagsSequenceElement4)
                                {
                                    string tagsKey4 = ((string)property4.Name);
                                    string tagsValue4 = ((string)property4.Value);
                                    databaseInstance.Tags.Add(tagsKey4, tagsValue4);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Start an Azure SQL Data Warehouse database resume operation. To
        /// determine the status of the operation call
        /// GetDatabaseOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Server on which the data
        /// warehouse database is hosted.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Data Warehouse database to
        /// pause.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running Azure Sql Database operations.
        /// </returns>
        public async Task<DatabaseCreateOrUpdateResponse> BeginResumeAsync(string resourceGroupName, string serverName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "BeginResumeAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/resume";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DatabaseCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            Database databaseInstance = new Database();
                            result.Database = databaseInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                DatabaseProperties propertiesInstance = new DatabaseProperties();
                                databaseInstance.Properties = propertiesInstance;
                                
                                JToken collationValue = propertiesValue["collation"];
                                if (collationValue != null && collationValue.Type != JTokenType.Null)
                                {
                                    string collationInstance = ((string)collationValue);
                                    propertiesInstance.Collation = collationInstance;
                                }
                                
                                JToken creationDateValue = propertiesValue["creationDate"];
                                if (creationDateValue != null && creationDateValue.Type != JTokenType.Null)
                                {
                                    DateTime creationDateInstance = ((DateTime)creationDateValue);
                                    propertiesInstance.CreationDate = creationDateInstance;
                                }
                                
                                JToken currentServiceObjectiveIdValue = propertiesValue["currentServiceObjectiveId"];
                                if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    string currentServiceObjectiveIdInstance = ((string)currentServiceObjectiveIdValue);
                                    propertiesInstance.CurrentServiceObjectiveId = currentServiceObjectiveIdInstance;
                                }
                                
                                JToken databaseIdValue = propertiesValue["databaseId"];
                                if (databaseIdValue != null && databaseIdValue.Type != JTokenType.Null)
                                {
                                    string databaseIdInstance = ((string)databaseIdValue);
                                    propertiesInstance.DatabaseId = databaseIdInstance;
                                }
                                
                                JToken earliestRestoreDateValue = propertiesValue["earliestRestoreDate"];
                                if (earliestRestoreDateValue != null && earliestRestoreDateValue.Type != JTokenType.Null)
                                {
                                    DateTime earliestRestoreDateInstance = ((DateTime)earliestRestoreDateValue);
                                    propertiesInstance.EarliestRestoreDate = earliestRestoreDateInstance;
                                }
                                
                                JToken editionValue = propertiesValue["edition"];
                                if (editionValue != null && editionValue.Type != JTokenType.Null)
                                {
                                    string editionInstance = ((string)editionValue);
                                    propertiesInstance.Edition = editionInstance;
                                }
                                
                                JToken maxSizeBytesValue = propertiesValue["maxSizeBytes"];
                                if (maxSizeBytesValue != null && maxSizeBytesValue.Type != JTokenType.Null)
                                {
                                    long maxSizeBytesInstance = ((long)maxSizeBytesValue);
                                    propertiesInstance.MaxSizeBytes = maxSizeBytesInstance;
                                }
                                
                                JToken requestedServiceObjectiveIdValue = propertiesValue["requestedServiceObjectiveId"];
                                if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    string requestedServiceObjectiveIdInstance = ((string)requestedServiceObjectiveIdValue);
                                    propertiesInstance.RequestedServiceObjectiveId = requestedServiceObjectiveIdInstance;
                                }
                                
                                JToken requestedServiceObjectiveNameValue = propertiesValue["requestedServiceObjectiveName"];
                                if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue.Type != JTokenType.Null)
                                {
                                    string requestedServiceObjectiveNameInstance = ((string)requestedServiceObjectiveNameValue);
                                    propertiesInstance.RequestedServiceObjectiveName = requestedServiceObjectiveNameInstance;
                                }
                                
                                JToken serviceLevelObjectiveValue = propertiesValue["serviceLevelObjective"];
                                if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue.Type != JTokenType.Null)
                                {
                                    string serviceLevelObjectiveInstance = ((string)serviceLevelObjectiveValue);
                                    propertiesInstance.ServiceObjective = serviceLevelObjectiveInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    string statusInstance = ((string)statusValue);
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken elasticPoolNameValue = propertiesValue["elasticPoolName"];
                                if (elasticPoolNameValue != null && elasticPoolNameValue.Type != JTokenType.Null)
                                {
                                    string elasticPoolNameInstance = ((string)elasticPoolNameValue);
                                    propertiesInstance.ElasticPoolName = elasticPoolNameInstance;
                                }
                                
                                JToken serviceTierAdvisorsArray = propertiesValue["serviceTierAdvisors"];
                                if (serviceTierAdvisorsArray != null && serviceTierAdvisorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken serviceTierAdvisorsValue in ((JArray)serviceTierAdvisorsArray))
                                    {
                                        ServiceTierAdvisor serviceTierAdvisorInstance = new ServiceTierAdvisor();
                                        propertiesInstance.ServiceTierAdvisors.Add(serviceTierAdvisorInstance);
                                        
                                        JToken propertiesValue2 = serviceTierAdvisorsValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            ServiceTierAdvisorProperties propertiesInstance2 = new ServiceTierAdvisorProperties();
                                            serviceTierAdvisorInstance.Properties = propertiesInstance2;
                                            
                                            JToken observationPeriodStartValue = propertiesValue2["observationPeriodStart"];
                                            if (observationPeriodStartValue != null && observationPeriodStartValue.Type != JTokenType.Null)
                                            {
                                                DateTime observationPeriodStartInstance = ((DateTime)observationPeriodStartValue);
                                                propertiesInstance2.ObservationPeriodStart = observationPeriodStartInstance;
                                            }
                                            
                                            JToken observationPeriodEndValue = propertiesValue2["observationPeriodEnd"];
                                            if (observationPeriodEndValue != null && observationPeriodEndValue.Type != JTokenType.Null)
                                            {
                                                DateTime observationPeriodEndInstance = ((DateTime)observationPeriodEndValue);
                                                propertiesInstance2.ObservationPeriodEnd = observationPeriodEndInstance;
                                            }
                                            
                                            JToken activeTimeRatioValue = propertiesValue2["activeTimeRatio"];
                                            if (activeTimeRatioValue != null && activeTimeRatioValue.Type != JTokenType.Null)
                                            {
                                                double activeTimeRatioInstance = ((double)activeTimeRatioValue);
                                                propertiesInstance2.ActiveTimeRatio = activeTimeRatioInstance;
                                            }
                                            
                                            JToken minDtuValue = propertiesValue2["minDtu"];
                                            if (minDtuValue != null && minDtuValue.Type != JTokenType.Null)
                                            {
                                                double minDtuInstance = ((double)minDtuValue);
                                                propertiesInstance2.MinDtu = minDtuInstance;
                                            }
                                            
                                            JToken avgDtuValue = propertiesValue2["avgDtu"];
                                            if (avgDtuValue != null && avgDtuValue.Type != JTokenType.Null)
                                            {
                                                double avgDtuInstance = ((double)avgDtuValue);
                                                propertiesInstance2.AvgDtu = avgDtuInstance;
                                            }
                                            
                                            JToken maxDtuValue = propertiesValue2["maxDtu"];
                                            if (maxDtuValue != null && maxDtuValue.Type != JTokenType.Null)
                                            {
                                                double maxDtuInstance = ((double)maxDtuValue);
                                                propertiesInstance2.MaxDtu = maxDtuInstance;
                                            }
                                            
                                            JToken maxSizeInGBValue = propertiesValue2["maxSizeInGB"];
                                            if (maxSizeInGBValue != null && maxSizeInGBValue.Type != JTokenType.Null)
                                            {
                                                double maxSizeInGBInstance = ((double)maxSizeInGBValue);
                                                propertiesInstance2.MaxSizeInGB = maxSizeInGBInstance;
                                            }
                                            
                                            JToken serviceLevelObjectiveUsageMetricsArray = propertiesValue2["serviceLevelObjectiveUsageMetrics"];
                                            if (serviceLevelObjectiveUsageMetricsArray != null && serviceLevelObjectiveUsageMetricsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken serviceLevelObjectiveUsageMetricsValue in ((JArray)serviceLevelObjectiveUsageMetricsArray))
                                                {
                                                    SloUsageMetric sloUsageMetricInstance = new SloUsageMetric();
                                                    propertiesInstance2.ServiceLevelObjectiveUsageMetrics.Add(sloUsageMetricInstance);
                                                    
                                                    JToken serviceLevelObjectiveValue2 = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjective"];
                                                    if (serviceLevelObjectiveValue2 != null && serviceLevelObjectiveValue2.Type != JTokenType.Null)
                                                    {
                                                        string serviceLevelObjectiveInstance2 = ((string)serviceLevelObjectiveValue2);
                                                        sloUsageMetricInstance.ServiceLevelObjective = serviceLevelObjectiveInstance2;
                                                    }
                                                    
                                                    JToken serviceLevelObjectiveIdValue = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjectiveId"];
                                                    if (serviceLevelObjectiveIdValue != null && serviceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        Guid serviceLevelObjectiveIdInstance = Guid.Parse(((string)serviceLevelObjectiveIdValue));
                                                        sloUsageMetricInstance.ServiceLevelObjectiveId = serviceLevelObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken inRangeTimeRatioValue = serviceLevelObjectiveUsageMetricsValue["inRangeTimeRatio"];
                                                    if (inRangeTimeRatioValue != null && inRangeTimeRatioValue.Type != JTokenType.Null)
                                                    {
                                                        double inRangeTimeRatioInstance = ((double)inRangeTimeRatioValue);
                                                        sloUsageMetricInstance.InRangeTimeRatio = inRangeTimeRatioInstance;
                                                    }
                                                    
                                                    JToken idValue = serviceLevelObjectiveUsageMetricsValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        sloUsageMetricInstance.Id = idInstance;
                                                    }
                                                    
                                                    JToken nameValue = serviceLevelObjectiveUsageMetricsValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        sloUsageMetricInstance.Name = nameInstance;
                                                    }
                                                    
                                                    JToken typeValue = serviceLevelObjectiveUsageMetricsValue["type"];
                                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance = ((string)typeValue);
                                                        sloUsageMetricInstance.Type = typeInstance;
                                                    }
                                                    
                                                    JToken locationValue = serviceLevelObjectiveUsageMetricsValue["location"];
                                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                    {
                                                        string locationInstance = ((string)locationValue);
                                                        sloUsageMetricInstance.Location = locationInstance;
                                                    }
                                                    
                                                    JToken tagsSequenceElement = ((JToken)serviceLevelObjectiveUsageMetricsValue["tags"]);
                                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property in tagsSequenceElement)
                                                        {
                                                            string tagsKey = ((string)property.Name);
                                                            string tagsValue = ((string)property.Value);
                                                            sloUsageMetricInstance.Tags.Add(tagsKey, tagsValue);
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken currentServiceLevelObjectiveValue = propertiesValue2["currentServiceLevelObjective"];
                                            if (currentServiceLevelObjectiveValue != null && currentServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string currentServiceLevelObjectiveInstance = ((string)currentServiceLevelObjectiveValue);
                                                propertiesInstance2.CurrentServiceLevelObjective = currentServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken currentServiceLevelObjectiveIdValue = propertiesValue2["currentServiceLevelObjectiveId"];
                                            if (currentServiceLevelObjectiveIdValue != null && currentServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid currentServiceLevelObjectiveIdInstance = Guid.Parse(((string)currentServiceLevelObjectiveIdValue));
                                                propertiesInstance2.CurrentServiceLevelObjectiveId = currentServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken usageBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["usageBasedRecommendationServiceLevelObjective"];
                                            if (usageBasedRecommendationServiceLevelObjectiveValue != null && usageBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string usageBasedRecommendationServiceLevelObjectiveInstance = ((string)usageBasedRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.UsageBasedRecommendationServiceLevelObjective = usageBasedRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken usageBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["usageBasedRecommendationServiceLevelObjectiveId"];
                                            if (usageBasedRecommendationServiceLevelObjectiveIdValue != null && usageBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid usageBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)usageBasedRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.UsageBasedRecommendationServiceLevelObjectiveId = usageBasedRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken databaseSizeBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["databaseSizeBasedRecommendationServiceLevelObjective"];
                                            if (databaseSizeBasedRecommendationServiceLevelObjectiveValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string databaseSizeBasedRecommendationServiceLevelObjectiveInstance = ((string)databaseSizeBasedRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.DatabaseSizeBasedRecommendationServiceLevelObjective = databaseSizeBasedRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken databaseSizeBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["databaseSizeBasedRecommendationServiceLevelObjectiveId"];
                                            if (databaseSizeBasedRecommendationServiceLevelObjectiveIdValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)databaseSizeBasedRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.DatabaseSizeBasedRecommendationServiceLevelObjectiveId = databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken disasterPlanBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["disasterPlanBasedRecommendationServiceLevelObjective"];
                                            if (disasterPlanBasedRecommendationServiceLevelObjectiveValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string disasterPlanBasedRecommendationServiceLevelObjectiveInstance = ((string)disasterPlanBasedRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.DisasterPlanBasedRecommendationServiceLevelObjective = disasterPlanBasedRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken disasterPlanBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["disasterPlanBasedRecommendationServiceLevelObjectiveId"];
                                            if (disasterPlanBasedRecommendationServiceLevelObjectiveIdValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)disasterPlanBasedRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.DisasterPlanBasedRecommendationServiceLevelObjectiveId = disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken overallRecommendationServiceLevelObjectiveValue = propertiesValue2["overallRecommendationServiceLevelObjective"];
                                            if (overallRecommendationServiceLevelObjectiveValue != null && overallRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string overallRecommendationServiceLevelObjectiveInstance = ((string)overallRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.OverallRecommendationServiceLevelObjective = overallRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken overallRecommendationServiceLevelObjectiveIdValue = propertiesValue2["overallRecommendationServiceLevelObjectiveId"];
                                            if (overallRecommendationServiceLevelObjectiveIdValue != null && overallRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid overallRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)overallRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.OverallRecommendationServiceLevelObjectiveId = overallRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken confidenceValue = propertiesValue2["confidence"];
                                            if (confidenceValue != null && confidenceValue.Type != JTokenType.Null)
                                            {
                                                double confidenceInstance = ((double)confidenceValue);
                                                propertiesInstance2.Confidence = confidenceInstance;
                                            }
                                        }
                                        
                                        JToken idValue2 = serviceTierAdvisorsValue["id"];
                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                        {
                                            string idInstance2 = ((string)idValue2);
                                            serviceTierAdvisorInstance.Id = idInstance2;
                                        }
                                        
                                        JToken nameValue2 = serviceTierAdvisorsValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            serviceTierAdvisorInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken typeValue2 = serviceTierAdvisorsValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            serviceTierAdvisorInstance.Type = typeInstance2;
                                        }
                                        
                                        JToken locationValue2 = serviceTierAdvisorsValue["location"];
                                        if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                        {
                                            string locationInstance2 = ((string)locationValue2);
                                            serviceTierAdvisorInstance.Location = locationInstance2;
                                        }
                                        
                                        JToken tagsSequenceElement2 = ((JToken)serviceTierAdvisorsValue["tags"]);
                                        if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property2 in tagsSequenceElement2)
                                            {
                                                string tagsKey2 = ((string)property2.Name);
                                                string tagsValue2 = ((string)property2.Value);
                                                serviceTierAdvisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                            }
                                        }
                                    }
                                }
                                
                                JToken upgradeHintValue = propertiesValue["upgradeHint"];
                                if (upgradeHintValue != null && upgradeHintValue.Type != JTokenType.Null)
                                {
                                    UpgradeHint upgradeHintInstance = new UpgradeHint();
                                    propertiesInstance.UpgradeHint = upgradeHintInstance;
                                    
                                    JToken targetServiceLevelObjectiveValue = upgradeHintValue["targetServiceLevelObjective"];
                                    if (targetServiceLevelObjectiveValue != null && targetServiceLevelObjectiveValue.Type != JTokenType.Null)
                                    {
                                        string targetServiceLevelObjectiveInstance = ((string)targetServiceLevelObjectiveValue);
                                        upgradeHintInstance.TargetServiceLevelObjective = targetServiceLevelObjectiveInstance;
                                    }
                                    
                                    JToken targetServiceLevelObjectiveIdValue = upgradeHintValue["targetServiceLevelObjectiveId"];
                                    if (targetServiceLevelObjectiveIdValue != null && targetServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                    {
                                        Guid targetServiceLevelObjectiveIdInstance = Guid.Parse(((string)targetServiceLevelObjectiveIdValue));
                                        upgradeHintInstance.TargetServiceLevelObjectiveId = targetServiceLevelObjectiveIdInstance;
                                    }
                                    
                                    JToken idValue3 = upgradeHintValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        upgradeHintInstance.Id = idInstance3;
                                    }
                                    
                                    JToken nameValue3 = upgradeHintValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        upgradeHintInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken typeValue3 = upgradeHintValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        upgradeHintInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken locationValue3 = upgradeHintValue["location"];
                                    if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                    {
                                        string locationInstance3 = ((string)locationValue3);
                                        upgradeHintInstance.Location = locationInstance3;
                                    }
                                    
                                    JToken tagsSequenceElement3 = ((JToken)upgradeHintValue["tags"]);
                                    if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property3 in tagsSequenceElement3)
                                        {
                                            string tagsKey3 = ((string)property3.Name);
                                            string tagsValue3 = ((string)property3.Value);
                                            upgradeHintInstance.Tags.Add(tagsKey3, tagsValue3);
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue4 = responseDoc["id"];
                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                            {
                                string idInstance4 = ((string)idValue4);
                                databaseInstance.Id = idInstance4;
                            }
                            
                            JToken nameValue4 = responseDoc["name"];
                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                            {
                                string nameInstance4 = ((string)nameValue4);
                                databaseInstance.Name = nameInstance4;
                            }
                            
                            JToken typeValue4 = responseDoc["type"];
                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                            {
                                string typeInstance4 = ((string)typeValue4);
                                databaseInstance.Type = typeInstance4;
                            }
                            
                            JToken locationValue4 = responseDoc["location"];
                            if (locationValue4 != null && locationValue4.Type != JTokenType.Null)
                            {
                                string locationInstance4 = ((string)locationValue4);
                                databaseInstance.Location = locationInstance4;
                            }
                            
                            JToken tagsSequenceElement4 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement4 != null && tagsSequenceElement4.Type != JTokenType.Null)
                            {
                                foreach (JProperty property4 in tagsSequenceElement4)
                                {
                                    string tagsKey4 = ((string)property4.Name);
                                    string tagsValue4 = ((string)property4.Value);
                                    databaseInstance.Tags.Add(tagsKey4, tagsValue4);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the status of an Azure SQL Data Warehouse Database pause or
        /// resume operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running Azure Sql Database operations.
        /// </returns>
        public async Task<DatabaseCreateOrUpdateResponse> GetDatabaseActivationOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDatabaseActivationOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DatabaseCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            Database databaseInstance = new Database();
                            result.Database = databaseInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                DatabaseProperties propertiesInstance = new DatabaseProperties();
                                databaseInstance.Properties = propertiesInstance;
                                
                                JToken collationValue = propertiesValue["collation"];
                                if (collationValue != null && collationValue.Type != JTokenType.Null)
                                {
                                    string collationInstance = ((string)collationValue);
                                    propertiesInstance.Collation = collationInstance;
                                }
                                
                                JToken creationDateValue = propertiesValue["creationDate"];
                                if (creationDateValue != null && creationDateValue.Type != JTokenType.Null)
                                {
                                    DateTime creationDateInstance = ((DateTime)creationDateValue);
                                    propertiesInstance.CreationDate = creationDateInstance;
                                }
                                
                                JToken currentServiceObjectiveIdValue = propertiesValue["currentServiceObjectiveId"];
                                if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    string currentServiceObjectiveIdInstance = ((string)currentServiceObjectiveIdValue);
                                    propertiesInstance.CurrentServiceObjectiveId = currentServiceObjectiveIdInstance;
                                }
                                
                                JToken databaseIdValue = propertiesValue["databaseId"];
                                if (databaseIdValue != null && databaseIdValue.Type != JTokenType.Null)
                                {
                                    string databaseIdInstance = ((string)databaseIdValue);
                                    propertiesInstance.DatabaseId = databaseIdInstance;
                                }
                                
                                JToken earliestRestoreDateValue = propertiesValue["earliestRestoreDate"];
                                if (earliestRestoreDateValue != null && earliestRestoreDateValue.Type != JTokenType.Null)
                                {
                                    DateTime earliestRestoreDateInstance = ((DateTime)earliestRestoreDateValue);
                                    propertiesInstance.EarliestRestoreDate = earliestRestoreDateInstance;
                                }
                                
                                JToken editionValue = propertiesValue["edition"];
                                if (editionValue != null && editionValue.Type != JTokenType.Null)
                                {
                                    string editionInstance = ((string)editionValue);
                                    propertiesInstance.Edition = editionInstance;
                                }
                                
                                JToken maxSizeBytesValue = propertiesValue["maxSizeBytes"];
                                if (maxSizeBytesValue != null && maxSizeBytesValue.Type != JTokenType.Null)
                                {
                                    long maxSizeBytesInstance = ((long)maxSizeBytesValue);
                                    propertiesInstance.MaxSizeBytes = maxSizeBytesInstance;
                                }
                                
                                JToken requestedServiceObjectiveIdValue = propertiesValue["requestedServiceObjectiveId"];
                                if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    string requestedServiceObjectiveIdInstance = ((string)requestedServiceObjectiveIdValue);
                                    propertiesInstance.RequestedServiceObjectiveId = requestedServiceObjectiveIdInstance;
                                }
                                
                                JToken requestedServiceObjectiveNameValue = propertiesValue["requestedServiceObjectiveName"];
                                if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue.Type != JTokenType.Null)
                                {
                                    string requestedServiceObjectiveNameInstance = ((string)requestedServiceObjectiveNameValue);
                                    propertiesInstance.RequestedServiceObjectiveName = requestedServiceObjectiveNameInstance;
                                }
                                
                                JToken serviceLevelObjectiveValue = propertiesValue["serviceLevelObjective"];
                                if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue.Type != JTokenType.Null)
                                {
                                    string serviceLevelObjectiveInstance = ((string)serviceLevelObjectiveValue);
                                    propertiesInstance.ServiceObjective = serviceLevelObjectiveInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    string statusInstance = ((string)statusValue);
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken elasticPoolNameValue = propertiesValue["elasticPoolName"];
                                if (elasticPoolNameValue != null && elasticPoolNameValue.Type != JTokenType.Null)
                                {
                                    string elasticPoolNameInstance = ((string)elasticPoolNameValue);
                                    propertiesInstance.ElasticPoolName = elasticPoolNameInstance;
                                }
                                
                                JToken serviceTierAdvisorsArray = propertiesValue["serviceTierAdvisors"];
                                if (serviceTierAdvisorsArray != null && serviceTierAdvisorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken serviceTierAdvisorsValue in ((JArray)serviceTierAdvisorsArray))
                                    {
                                        ServiceTierAdvisor serviceTierAdvisorInstance = new ServiceTierAdvisor();
                                        propertiesInstance.ServiceTierAdvisors.Add(serviceTierAdvisorInstance);
                                        
                                        JToken propertiesValue2 = serviceTierAdvisorsValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            ServiceTierAdvisorProperties propertiesInstance2 = new ServiceTierAdvisorProperties();
                                            serviceTierAdvisorInstance.Properties = propertiesInstance2;
                                            
                                            JToken observationPeriodStartValue = propertiesValue2["observationPeriodStart"];
                                            if (observationPeriodStartValue != null && observationPeriodStartValue.Type != JTokenType.Null)
                                            {
                                                DateTime observationPeriodStartInstance = ((DateTime)observationPeriodStartValue);
                                                propertiesInstance2.ObservationPeriodStart = observationPeriodStartInstance;
                                            }
                                            
                                            JToken observationPeriodEndValue = propertiesValue2["observationPeriodEnd"];
                                            if (observationPeriodEndValue != null && observationPeriodEndValue.Type != JTokenType.Null)
                                            {
                                                DateTime observationPeriodEndInstance = ((DateTime)observationPeriodEndValue);
                                                propertiesInstance2.ObservationPeriodEnd = observationPeriodEndInstance;
                                            }
                                            
                                            JToken activeTimeRatioValue = propertiesValue2["activeTimeRatio"];
                                            if (activeTimeRatioValue != null && activeTimeRatioValue.Type != JTokenType.Null)
                                            {
                                                double activeTimeRatioInstance = ((double)activeTimeRatioValue);
                                                propertiesInstance2.ActiveTimeRatio = activeTimeRatioInstance;
                                            }
                                            
                                            JToken minDtuValue = propertiesValue2["minDtu"];
                                            if (minDtuValue != null && minDtuValue.Type != JTokenType.Null)
                                            {
                                                double minDtuInstance = ((double)minDtuValue);
                                                propertiesInstance2.MinDtu = minDtuInstance;
                                            }
                                            
                                            JToken avgDtuValue = propertiesValue2["avgDtu"];
                                            if (avgDtuValue != null && avgDtuValue.Type != JTokenType.Null)
                                            {
                                                double avgDtuInstance = ((double)avgDtuValue);
                                                propertiesInstance2.AvgDtu = avgDtuInstance;
                                            }
                                            
                                            JToken maxDtuValue = propertiesValue2["maxDtu"];
                                            if (maxDtuValue != null && maxDtuValue.Type != JTokenType.Null)
                                            {
                                                double maxDtuInstance = ((double)maxDtuValue);
                                                propertiesInstance2.MaxDtu = maxDtuInstance;
                                            }
                                            
                                            JToken maxSizeInGBValue = propertiesValue2["maxSizeInGB"];
                                            if (maxSizeInGBValue != null && maxSizeInGBValue.Type != JTokenType.Null)
                                            {
                                                double maxSizeInGBInstance = ((double)maxSizeInGBValue);
                                                propertiesInstance2.MaxSizeInGB = maxSizeInGBInstance;
                                            }
                                            
                                            JToken serviceLevelObjectiveUsageMetricsArray = propertiesValue2["serviceLevelObjectiveUsageMetrics"];
                                            if (serviceLevelObjectiveUsageMetricsArray != null && serviceLevelObjectiveUsageMetricsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken serviceLevelObjectiveUsageMetricsValue in ((JArray)serviceLevelObjectiveUsageMetricsArray))
                                                {
                                                    SloUsageMetric sloUsageMetricInstance = new SloUsageMetric();
                                                    propertiesInstance2.ServiceLevelObjectiveUsageMetrics.Add(sloUsageMetricInstance);
                                                    
                                                    JToken serviceLevelObjectiveValue2 = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjective"];
                                                    if (serviceLevelObjectiveValue2 != null && serviceLevelObjectiveValue2.Type != JTokenType.Null)
                                                    {
                                                        string serviceLevelObjectiveInstance2 = ((string)serviceLevelObjectiveValue2);
                                                        sloUsageMetricInstance.ServiceLevelObjective = serviceLevelObjectiveInstance2;
                                                    }
                                                    
                                                    JToken serviceLevelObjectiveIdValue = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjectiveId"];
                                                    if (serviceLevelObjectiveIdValue != null && serviceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        Guid serviceLevelObjectiveIdInstance = Guid.Parse(((string)serviceLevelObjectiveIdValue));
                                                        sloUsageMetricInstance.ServiceLevelObjectiveId = serviceLevelObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken inRangeTimeRatioValue = serviceLevelObjectiveUsageMetricsValue["inRangeTimeRatio"];
                                                    if (inRangeTimeRatioValue != null && inRangeTimeRatioValue.Type != JTokenType.Null)
                                                    {
                                                        double inRangeTimeRatioInstance = ((double)inRangeTimeRatioValue);
                                                        sloUsageMetricInstance.InRangeTimeRatio = inRangeTimeRatioInstance;
                                                    }
                                                    
                                                    JToken idValue = serviceLevelObjectiveUsageMetricsValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        sloUsageMetricInstance.Id = idInstance;
                                                    }
                                                    
                                                    JToken nameValue = serviceLevelObjectiveUsageMetricsValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        sloUsageMetricInstance.Name = nameInstance;
                                                    }
                                                    
                                                    JToken typeValue = serviceLevelObjectiveUsageMetricsValue["type"];
                                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance = ((string)typeValue);
                                                        sloUsageMetricInstance.Type = typeInstance;
                                                    }
                                                    
                                                    JToken locationValue = serviceLevelObjectiveUsageMetricsValue["location"];
                                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                    {
                                                        string locationInstance = ((string)locationValue);
                                                        sloUsageMetricInstance.Location = locationInstance;
                                                    }
                                                    
                                                    JToken tagsSequenceElement = ((JToken)serviceLevelObjectiveUsageMetricsValue["tags"]);
                                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property in tagsSequenceElement)
                                                        {
                                                            string tagsKey = ((string)property.Name);
                                                            string tagsValue = ((string)property.Value);
                                                            sloUsageMetricInstance.Tags.Add(tagsKey, tagsValue);
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken currentServiceLevelObjectiveValue = propertiesValue2["currentServiceLevelObjective"];
                                            if (currentServiceLevelObjectiveValue != null && currentServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string currentServiceLevelObjectiveInstance = ((string)currentServiceLevelObjectiveValue);
                                                propertiesInstance2.CurrentServiceLevelObjective = currentServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken currentServiceLevelObjectiveIdValue = propertiesValue2["currentServiceLevelObjectiveId"];
                                            if (currentServiceLevelObjectiveIdValue != null && currentServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid currentServiceLevelObjectiveIdInstance = Guid.Parse(((string)currentServiceLevelObjectiveIdValue));
                                                propertiesInstance2.CurrentServiceLevelObjectiveId = currentServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken usageBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["usageBasedRecommendationServiceLevelObjective"];
                                            if (usageBasedRecommendationServiceLevelObjectiveValue != null && usageBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string usageBasedRecommendationServiceLevelObjectiveInstance = ((string)usageBasedRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.UsageBasedRecommendationServiceLevelObjective = usageBasedRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken usageBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["usageBasedRecommendationServiceLevelObjectiveId"];
                                            if (usageBasedRecommendationServiceLevelObjectiveIdValue != null && usageBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid usageBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)usageBasedRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.UsageBasedRecommendationServiceLevelObjectiveId = usageBasedRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken databaseSizeBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["databaseSizeBasedRecommendationServiceLevelObjective"];
                                            if (databaseSizeBasedRecommendationServiceLevelObjectiveValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string databaseSizeBasedRecommendationServiceLevelObjectiveInstance = ((string)databaseSizeBasedRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.DatabaseSizeBasedRecommendationServiceLevelObjective = databaseSizeBasedRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken databaseSizeBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["databaseSizeBasedRecommendationServiceLevelObjectiveId"];
                                            if (databaseSizeBasedRecommendationServiceLevelObjectiveIdValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)databaseSizeBasedRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.DatabaseSizeBasedRecommendationServiceLevelObjectiveId = databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken disasterPlanBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["disasterPlanBasedRecommendationServiceLevelObjective"];
                                            if (disasterPlanBasedRecommendationServiceLevelObjectiveValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string disasterPlanBasedRecommendationServiceLevelObjectiveInstance = ((string)disasterPlanBasedRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.DisasterPlanBasedRecommendationServiceLevelObjective = disasterPlanBasedRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken disasterPlanBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["disasterPlanBasedRecommendationServiceLevelObjectiveId"];
                                            if (disasterPlanBasedRecommendationServiceLevelObjectiveIdValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)disasterPlanBasedRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.DisasterPlanBasedRecommendationServiceLevelObjectiveId = disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken overallRecommendationServiceLevelObjectiveValue = propertiesValue2["overallRecommendationServiceLevelObjective"];
                                            if (overallRecommendationServiceLevelObjectiveValue != null && overallRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string overallRecommendationServiceLevelObjectiveInstance = ((string)overallRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.OverallRecommendationServiceLevelObjective = overallRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken overallRecommendationServiceLevelObjectiveIdValue = propertiesValue2["overallRecommendationServiceLevelObjectiveId"];
                                            if (overallRecommendationServiceLevelObjectiveIdValue != null && overallRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid overallRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)overallRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.OverallRecommendationServiceLevelObjectiveId = overallRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken confidenceValue = propertiesValue2["confidence"];
                                            if (confidenceValue != null && confidenceValue.Type != JTokenType.Null)
                                            {
                                                double confidenceInstance = ((double)confidenceValue);
                                                propertiesInstance2.Confidence = confidenceInstance;
                                            }
                                        }
                                        
                                        JToken idValue2 = serviceTierAdvisorsValue["id"];
                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                        {
                                            string idInstance2 = ((string)idValue2);
                                            serviceTierAdvisorInstance.Id = idInstance2;
                                        }
                                        
                                        JToken nameValue2 = serviceTierAdvisorsValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            serviceTierAdvisorInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken typeValue2 = serviceTierAdvisorsValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            serviceTierAdvisorInstance.Type = typeInstance2;
                                        }
                                        
                                        JToken locationValue2 = serviceTierAdvisorsValue["location"];
                                        if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                        {
                                            string locationInstance2 = ((string)locationValue2);
                                            serviceTierAdvisorInstance.Location = locationInstance2;
                                        }
                                        
                                        JToken tagsSequenceElement2 = ((JToken)serviceTierAdvisorsValue["tags"]);
                                        if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property2 in tagsSequenceElement2)
                                            {
                                                string tagsKey2 = ((string)property2.Name);
                                                string tagsValue2 = ((string)property2.Value);
                                                serviceTierAdvisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                            }
                                        }
                                    }
                                }
                                
                                JToken upgradeHintValue = propertiesValue["upgradeHint"];
                                if (upgradeHintValue != null && upgradeHintValue.Type != JTokenType.Null)
                                {
                                    UpgradeHint upgradeHintInstance = new UpgradeHint();
                                    propertiesInstance.UpgradeHint = upgradeHintInstance;
                                    
                                    JToken targetServiceLevelObjectiveValue = upgradeHintValue["targetServiceLevelObjective"];
                                    if (targetServiceLevelObjectiveValue != null && targetServiceLevelObjectiveValue.Type != JTokenType.Null)
                                    {
                                        string targetServiceLevelObjectiveInstance = ((string)targetServiceLevelObjectiveValue);
                                        upgradeHintInstance.TargetServiceLevelObjective = targetServiceLevelObjectiveInstance;
                                    }
                                    
                                    JToken targetServiceLevelObjectiveIdValue = upgradeHintValue["targetServiceLevelObjectiveId"];
                                    if (targetServiceLevelObjectiveIdValue != null && targetServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                    {
                                        Guid targetServiceLevelObjectiveIdInstance = Guid.Parse(((string)targetServiceLevelObjectiveIdValue));
                                        upgradeHintInstance.TargetServiceLevelObjectiveId = targetServiceLevelObjectiveIdInstance;
                                    }
                                    
                                    JToken idValue3 = upgradeHintValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        upgradeHintInstance.Id = idInstance3;
                                    }
                                    
                                    JToken nameValue3 = upgradeHintValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        upgradeHintInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken typeValue3 = upgradeHintValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        upgradeHintInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken locationValue3 = upgradeHintValue["location"];
                                    if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                    {
                                        string locationInstance3 = ((string)locationValue3);
                                        upgradeHintInstance.Location = locationInstance3;
                                    }
                                    
                                    JToken tagsSequenceElement3 = ((JToken)upgradeHintValue["tags"]);
                                    if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property3 in tagsSequenceElement3)
                                        {
                                            string tagsKey3 = ((string)property3.Name);
                                            string tagsValue3 = ((string)property3.Value);
                                            upgradeHintInstance.Tags.Add(tagsKey3, tagsValue3);
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue4 = responseDoc["id"];
                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                            {
                                string idInstance4 = ((string)idValue4);
                                databaseInstance.Id = idInstance4;
                            }
                            
                            JToken nameValue4 = responseDoc["name"];
                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                            {
                                string nameInstance4 = ((string)nameValue4);
                                databaseInstance.Name = nameInstance4;
                            }
                            
                            JToken typeValue4 = responseDoc["type"];
                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                            {
                                string typeInstance4 = ((string)typeValue4);
                                databaseInstance.Type = typeInstance4;
                            }
                            
                            JToken locationValue4 = responseDoc["location"];
                            if (locationValue4 != null && locationValue4.Type != JTokenType.Null)
                            {
                                string locationInstance4 = ((string)locationValue4);
                                databaseInstance.Location = locationInstance4;
                            }
                            
                            JToken tagsSequenceElement4 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement4 != null && tagsSequenceElement4.Type != JTokenType.Null)
                            {
                                foreach (JProperty property4 in tagsSequenceElement4)
                                {
                                    string tagsKey4 = ((string)property4.Name);
                                    string tagsValue4 = ((string)property4.Value);
                                    databaseInstance.Tags.Add(tagsKey4, tagsValue4);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Start an Azure SQL Data Warehouse database pause operation.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Server on which the data
        /// warehouse database is hosted.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Data Warehouse database to
        /// pause.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running Azure Sql Database operations.
        /// </returns>
        public async Task<DatabaseCreateOrUpdateResponse> PauseAsync(string resourceGroupName, string serverName, string databaseName, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "PauseAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DatabaseCreateOrUpdateResponse response = await client.DatabaseActivation.BeginPauseAsync(resourceGroupName, serverName, databaseName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DatabaseCreateOrUpdateResponse result = await client.DatabaseActivation.GetDatabaseActivationOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.DatabaseActivation.GetDatabaseActivationOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Start an Azure SQL Data Warehouse database resume operation.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Server on which the data
        /// warehouse database is hosted.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Data Warehouse database to
        /// resume.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running Azure Sql Database operations.
        /// </returns>
        public async Task<DatabaseCreateOrUpdateResponse> ResumeAsync(string resourceGroupName, string serverName, string databaseName, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "ResumeAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DatabaseCreateOrUpdateResponse response = await client.DatabaseActivation.BeginResumeAsync(resourceGroupName, serverName, databaseName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DatabaseCreateOrUpdateResponse result = await client.DatabaseActivation.GetDatabaseActivationOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.DatabaseActivation.GetDatabaseActivationOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
