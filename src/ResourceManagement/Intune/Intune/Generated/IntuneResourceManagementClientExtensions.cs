// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.12.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Intune
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class IntuneResourceManagementClientExtensions
    {
            /// <summary>
            /// Returns location for user tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Location> GetLocations(this IIntuneResourceManagementClient operations)
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetLocationsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns location for user tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Location>> GetLocationsAsync( this IIntuneResourceManagementClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<Location>> result = await operations.GetLocationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns location for given tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Location GetLocationByHostName(this IIntuneResourceManagementClient operations)
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetLocationByHostNameAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns location for given tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Location> GetLocationByHostNameAsync( this IIntuneResourceManagementClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Location> result = await operations.GetLocationByHostNameWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns Intune Manageable apps.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static IPage<Application> GetApps(this IIntuneResourceManagementClient operations, string hostName, string filter = default(string), int? top = default(int?), string select = default(string))
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetAppsAsync(hostName, filter, top, select), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune Manageable apps.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Application>> GetAppsAsync( this IIntuneResourceManagementClient operations, string hostName, string filter = default(string), int? top = default(int?), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<Application>> result = await operations.GetAppsWithHttpMessagesAsync(hostName, filter, top, select, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Get devices for a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='userName'>
            /// user unique Id
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static IPage<Device> GetUserDevices(this IIntuneResourceManagementClient operations, string hostName, string userName, string filter = default(string), int? top = default(int?), string select = default(string))
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetUserDevicesAsync(hostName, userName, filter, top, select), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get devices for a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='userName'>
            /// user unique Id
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Device>> GetUserDevicesAsync( this IIntuneResourceManagementClient operations, string hostName, string userName, string filter = default(string), int? top = default(int?), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<Device>> result = await operations.GetUserDevicesWithHttpMessagesAsync(hostName, userName, filter, top, select, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Get a unique device for a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='userName'>
            /// unique user name
            /// </param>
            /// <param name='deviceName'>
            /// device name
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static Device GetUserDeviceByDeviceName(this IIntuneResourceManagementClient operations, string hostName, string userName, string deviceName, string select = default(string))
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetUserDeviceByDeviceNameAsync(hostName, userName, deviceName, select), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a unique device for a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='userName'>
            /// unique user name
            /// </param>
            /// <param name='deviceName'>
            /// device name
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Device> GetUserDeviceByDeviceNameAsync( this IIntuneResourceManagementClient operations, string hostName, string userName, string deviceName, string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Device> result = await operations.GetUserDeviceByDeviceNameWithHttpMessagesAsync(hostName, userName, deviceName, select, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Wipe a device for a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='userName'>
            /// unique user name
            /// </param>
            /// <param name='deviceName'>
            /// device name
            /// </param>
            public static WipeDeviceOperationResult WipeUserDevice(this IIntuneResourceManagementClient operations, string hostName, string userName, string deviceName)
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).WipeUserDeviceAsync(hostName, userName, deviceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Wipe a device for a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='userName'>
            /// unique user name
            /// </param>
            /// <param name='deviceName'>
            /// device name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WipeDeviceOperationResult> WipeUserDeviceAsync( this IIntuneResourceManagementClient operations, string hostName, string userName, string deviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<WipeDeviceOperationResult> result = await operations.WipeUserDeviceWithHttpMessagesAsync(hostName, userName, deviceName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns operationResults.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static IPage<OperationResult> GetOperationResults(this IIntuneResourceManagementClient operations, string hostName, string filter = default(string), int? top = default(int?), string select = default(string))
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetOperationResultsAsync(hostName, filter, top, select), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns operationResults.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OperationResult>> GetOperationResultsAsync( this IIntuneResourceManagementClient operations, string hostName, string filter = default(string), int? top = default(int?), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<OperationResult>> result = await operations.GetOperationResultsWithHttpMessagesAsync(hostName, filter, top, select, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns Intune Tenant level statuses.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            public static StatusesDefault GetDefaultStatuses(this IIntuneResourceManagementClient operations, string hostName)
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetDefaultStatusesAsync(hostName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune Tenant level statuses.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusesDefault> GetDefaultStatusesAsync( this IIntuneResourceManagementClient operations, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<StatusesDefault> result = await operations.GetDefaultStatusesWithHttpMessagesAsync(hostName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns Intune flagged user collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static FlaggedUserCollection GetFlaggedUsers(this IIntuneResourceManagementClient operations, string hostName, string filter = default(string), int? top = default(int?), string select = default(string))
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetFlaggedUsersAsync(hostName, filter, top, select), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune flagged user collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FlaggedUserCollection> GetFlaggedUsersAsync( this IIntuneResourceManagementClient operations, string hostName, string filter = default(string), int? top = default(int?), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<FlaggedUserCollection> result = await operations.GetFlaggedUsersWithHttpMessagesAsync(hostName, filter, top, select, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns Intune flagged user details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='userName'>
            /// Flagged userName
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static FlaggedUser GetFlaggedUserByName(this IIntuneResourceManagementClient operations, string hostName, string userName, string select = default(string))
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetFlaggedUserByNameAsync(hostName, userName, select), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune flagged user details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='userName'>
            /// Flagged userName
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FlaggedUser> GetFlaggedUserByNameAsync( this IIntuneResourceManagementClient operations, string hostName, string userName, string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<FlaggedUser> result = await operations.GetFlaggedUserByNameWithHttpMessagesAsync(hostName, userName, select, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns Intune flagged enrolled app collection for the User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='userName'>
            /// User name for the tenant
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static FlaggedEnrolledAppCollection GetUserFlaggedEnrolledApps(this IIntuneResourceManagementClient operations, string hostName, string userName, string filter = default(string), int? top = default(int?), string select = default(string))
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetUserFlaggedEnrolledAppsAsync(hostName, userName, filter, top, select), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune flagged enrolled app collection for the User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='userName'>
            /// User name for the tenant
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FlaggedEnrolledAppCollection> GetUserFlaggedEnrolledAppsAsync( this IIntuneResourceManagementClient operations, string hostName, string userName, string filter = default(string), int? top = default(int?), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<FlaggedEnrolledAppCollection> result = await operations.GetUserFlaggedEnrolledAppsWithHttpMessagesAsync(hostName, userName, filter, top, select, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns location for user tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Location> GetLocationsNext(this IIntuneResourceManagementClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetLocationsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns location for user tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Location>> GetLocationsNextAsync( this IIntuneResourceManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<Location>> result = await operations.GetLocationsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns Intune Manageable apps.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Application> GetAppsNext(this IIntuneResourceManagementClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetAppsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune Manageable apps.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Application>> GetAppsNextAsync( this IIntuneResourceManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<Application>> result = await operations.GetAppsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Get devices for a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Device> GetUserDevicesNext(this IIntuneResourceManagementClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetUserDevicesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get devices for a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Device>> GetUserDevicesNextAsync( this IIntuneResourceManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<Device>> result = await operations.GetUserDevicesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns operationResults.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OperationResult> GetOperationResultsNext(this IIntuneResourceManagementClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetOperationResultsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns operationResults.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OperationResult>> GetOperationResultsNextAsync( this IIntuneResourceManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IPage<OperationResult>> result = await operations.GetOperationResultsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns Intune Tenant level statuses.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static StatusesDefault GetDefaultStatusesNext(this IIntuneResourceManagementClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetDefaultStatusesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune Tenant level statuses.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusesDefault> GetDefaultStatusesNextAsync( this IIntuneResourceManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<StatusesDefault> result = await operations.GetDefaultStatusesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns Intune flagged user collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static FlaggedUserCollection GetFlaggedUsersNext(this IIntuneResourceManagementClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetFlaggedUsersNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune flagged user collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FlaggedUserCollection> GetFlaggedUsersNextAsync( this IIntuneResourceManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<FlaggedUserCollection> result = await operations.GetFlaggedUsersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns Intune flagged user details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static FlaggedUser GetFlaggedUserByNameNext(this IIntuneResourceManagementClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetFlaggedUserByNameNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune flagged user details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FlaggedUser> GetFlaggedUserByNameNextAsync( this IIntuneResourceManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<FlaggedUser> result = await operations.GetFlaggedUserByNameNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Returns Intune flagged enrolled app collection for the User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static FlaggedEnrolledAppCollection GetUserFlaggedEnrolledAppsNext(this IIntuneResourceManagementClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IIntuneResourceManagementClient)s).GetUserFlaggedEnrolledAppsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune flagged enrolled app collection for the User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FlaggedEnrolledAppCollection> GetUserFlaggedEnrolledAppsNextAsync( this IIntuneResourceManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<FlaggedEnrolledAppCollection> result = await operations.GetUserFlaggedEnrolledAppsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

    }
}
