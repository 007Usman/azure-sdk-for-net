// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Network;
using Microsoft.Azure.Management.Network.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Network
{
    /// <summary>
    /// The Network Resource Provider API includes operations managing the
    /// application gateways for your subscription.
    /// </summary>
    internal partial class ApplicationGatewayOperations : IServiceOperations<NetworkResourceProviderClient>, IApplicationGatewayOperations
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ApplicationGatewayOperations(NetworkResourceProviderClient client)
        {
            this._client = client;
        }
        
        private NetworkResourceProviderClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Network.NetworkResourceProviderClient.
        /// </summary>
        public NetworkResourceProviderClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Put ApplicationGateway operation creates/updates a
        /// ApplicationGateway
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='applicationGatewayName'>
        /// Required. The name of the ApplicationGateway.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create/delete
        /// ApplicationGateway operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of Put ApplicationGateway operation
        /// </returns>
        public async Task<ApplicationGatewayPutResponse> BeginCreateOrUpdatingAsync(string resourceGroupName, string applicationGatewayName, ApplicationGateway parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (applicationGatewayName == null)
            {
                throw new ArgumentNullException("applicationGatewayName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("applicationGatewayName", applicationGatewayName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/applicationGateways/";
            url = url + Uri.EscapeDataString(applicationGatewayName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject applicationGatewayJsonFormatValue = new JObject();
                requestDoc = applicationGatewayJsonFormatValue;
                
                JObject propertiesValue = new JObject();
                applicationGatewayJsonFormatValue["properties"] = propertiesValue;
                
                propertiesValue["instanceCount"] = parameters.InstanceCount;
                
                if (parameters.Size != null)
                {
                    propertiesValue["applicationGatewaySize"] = parameters.Size;
                }
                
                if (parameters.GatewayIpConfigurations != null)
                {
                    if (parameters.GatewayIpConfigurations is ILazyCollection == false || ((ILazyCollection)parameters.GatewayIpConfigurations).IsInitialized)
                    {
                        JArray gatewayIpConfigurationsArray = new JArray();
                        foreach (ApplicationGatewayIpConfiguration gatewayIpConfigurationsItem in parameters.GatewayIpConfigurations)
                        {
                            JObject applicationGatewayIpConfigurationJsonFormatValue = new JObject();
                            gatewayIpConfigurationsArray.Add(applicationGatewayIpConfigurationJsonFormatValue);
                            
                            JObject propertiesValue2 = new JObject();
                            applicationGatewayIpConfigurationJsonFormatValue["properties"] = propertiesValue2;
                            
                            if (gatewayIpConfigurationsItem.Subnet != null)
                            {
                                JObject subnetValue = new JObject();
                                propertiesValue2["subnet"] = subnetValue;
                                
                                if (gatewayIpConfigurationsItem.Subnet.Id != null)
                                {
                                    subnetValue["id"] = gatewayIpConfigurationsItem.Subnet.Id;
                                }
                            }
                            
                            propertiesValue2["provisioningState"] = propertiesValue2;
                            
                            if (gatewayIpConfigurationsItem.Name != null)
                            {
                                applicationGatewayIpConfigurationJsonFormatValue["name"] = gatewayIpConfigurationsItem.Name;
                            }
                            
                            if (gatewayIpConfigurationsItem.Etag != null)
                            {
                                applicationGatewayIpConfigurationJsonFormatValue["etag"] = gatewayIpConfigurationsItem.Etag;
                            }
                            
                            if (gatewayIpConfigurationsItem.Id != null)
                            {
                                applicationGatewayIpConfigurationJsonFormatValue["id"] = gatewayIpConfigurationsItem.Id;
                            }
                        }
                        propertiesValue["gatewayIpConfigurations"] = gatewayIpConfigurationsArray;
                    }
                }
                
                if (parameters.SslCertificates != null)
                {
                    if (parameters.SslCertificates is ILazyCollection == false || ((ILazyCollection)parameters.SslCertificates).IsInitialized)
                    {
                        JArray sslCertificatesArray = new JArray();
                        foreach (ApplicationGatewaySslCertificate sslCertificatesItem in parameters.SslCertificates)
                        {
                            JObject applicationGatewaySslCertificateJsonFormatValue = new JObject();
                            sslCertificatesArray.Add(applicationGatewaySslCertificateJsonFormatValue);
                            
                            JObject propertiesValue3 = new JObject();
                            applicationGatewaySslCertificateJsonFormatValue["properties"] = propertiesValue3;
                            
                            if (sslCertificatesItem.Data != null)
                            {
                                propertiesValue3["data"] = sslCertificatesItem.Data;
                            }
                            
                            if (sslCertificatesItem.Password != null)
                            {
                                propertiesValue3["password"] = sslCertificatesItem.Password;
                            }
                            
                            if (sslCertificatesItem.PublicCertData != null)
                            {
                                propertiesValue3["publicCertData"] = sslCertificatesItem.PublicCertData;
                            }
                            
                            propertiesValue3["provisioningState"] = propertiesValue3;
                            
                            if (sslCertificatesItem.Name != null)
                            {
                                applicationGatewaySslCertificateJsonFormatValue["name"] = sslCertificatesItem.Name;
                            }
                            
                            if (sslCertificatesItem.Etag != null)
                            {
                                applicationGatewaySslCertificateJsonFormatValue["etag"] = sslCertificatesItem.Etag;
                            }
                            
                            if (sslCertificatesItem.Id != null)
                            {
                                applicationGatewaySslCertificateJsonFormatValue["id"] = sslCertificatesItem.Id;
                            }
                        }
                        propertiesValue["sslCertificates"] = sslCertificatesArray;
                    }
                }
                
                if (parameters.FrontendIpConfigurations != null)
                {
                    if (parameters.FrontendIpConfigurations is ILazyCollection == false || ((ILazyCollection)parameters.FrontendIpConfigurations).IsInitialized)
                    {
                        JArray frontendIPConfigurationsArray = new JArray();
                        foreach (ApplicationGatewayFrontendIpConfiguration frontendIPConfigurationsItem in parameters.FrontendIpConfigurations)
                        {
                            JObject applicationGatewayFrontendIpConfigurationJsonFormatValue = new JObject();
                            frontendIPConfigurationsArray.Add(applicationGatewayFrontendIpConfigurationJsonFormatValue);
                            
                            JObject propertiesValue4 = new JObject();
                            applicationGatewayFrontendIpConfigurationJsonFormatValue["properties"] = propertiesValue4;
                            
                            if (frontendIPConfigurationsItem.PrivateIpAddress != null)
                            {
                                propertiesValue4["privateIPAddress"] = frontendIPConfigurationsItem.PrivateIpAddress;
                            }
                            
                            if (frontendIPConfigurationsItem.PrivateIpAllocationMethod != null)
                            {
                                propertiesValue4["privateIPAllocationMethod"] = frontendIPConfigurationsItem.PrivateIpAllocationMethod;
                            }
                            
                            if (frontendIPConfigurationsItem.Subnet != null)
                            {
                                JObject subnetValue2 = new JObject();
                                propertiesValue4["subnet"] = subnetValue2;
                                
                                if (frontendIPConfigurationsItem.Subnet.Id != null)
                                {
                                    subnetValue2["id"] = frontendIPConfigurationsItem.Subnet.Id;
                                }
                            }
                            
                            if (frontendIPConfigurationsItem.PublicIpAddress != null)
                            {
                                JObject publicIPAddressValue = new JObject();
                                propertiesValue4["publicIPAddress"] = publicIPAddressValue;
                                
                                if (frontendIPConfigurationsItem.PublicIpAddress.Id != null)
                                {
                                    publicIPAddressValue["id"] = frontendIPConfigurationsItem.PublicIpAddress.Id;
                                }
                            }
                            
                            if (frontendIPConfigurationsItem.ProvisioningState != null)
                            {
                                propertiesValue4["provisioningState"] = frontendIPConfigurationsItem.ProvisioningState;
                            }
                            
                            if (frontendIPConfigurationsItem.Name != null)
                            {
                                applicationGatewayFrontendIpConfigurationJsonFormatValue["name"] = frontendIPConfigurationsItem.Name;
                            }
                            
                            if (frontendIPConfigurationsItem.Etag != null)
                            {
                                applicationGatewayFrontendIpConfigurationJsonFormatValue["etag"] = frontendIPConfigurationsItem.Etag;
                            }
                            
                            if (frontendIPConfigurationsItem.Id != null)
                            {
                                applicationGatewayFrontendIpConfigurationJsonFormatValue["id"] = frontendIPConfigurationsItem.Id;
                            }
                        }
                        propertiesValue["frontendIPConfigurations"] = frontendIPConfigurationsArray;
                    }
                }
                
                if (parameters.FrontendPorts != null)
                {
                    if (parameters.FrontendPorts is ILazyCollection == false || ((ILazyCollection)parameters.FrontendPorts).IsInitialized)
                    {
                        JArray frontendPortsArray = new JArray();
                        foreach (ApplicationGatewayFrontendPort frontendPortsItem in parameters.FrontendPorts)
                        {
                            JObject applicationGatewayFrontendPortJsonFormatValue = new JObject();
                            frontendPortsArray.Add(applicationGatewayFrontendPortJsonFormatValue);
                            
                            JObject propertiesValue5 = new JObject();
                            applicationGatewayFrontendPortJsonFormatValue["properties"] = propertiesValue5;
                            
                            propertiesValue5["port"] = frontendPortsItem.Port;
                            
                            propertiesValue5["provisioningState"] = propertiesValue5;
                            
                            if (frontendPortsItem.Name != null)
                            {
                                applicationGatewayFrontendPortJsonFormatValue["name"] = frontendPortsItem.Name;
                            }
                            
                            if (frontendPortsItem.Etag != null)
                            {
                                applicationGatewayFrontendPortJsonFormatValue["etag"] = frontendPortsItem.Etag;
                            }
                            
                            if (frontendPortsItem.Id != null)
                            {
                                applicationGatewayFrontendPortJsonFormatValue["id"] = frontendPortsItem.Id;
                            }
                        }
                        propertiesValue["frontendPorts"] = frontendPortsArray;
                    }
                }
                
                if (parameters.BackendAddressPools != null)
                {
                    if (parameters.BackendAddressPools is ILazyCollection == false || ((ILazyCollection)parameters.BackendAddressPools).IsInitialized)
                    {
                        JArray backendAddressPoolsArray = new JArray();
                        foreach (ApplicationGatewayBackendAddressPool backendAddressPoolsItem in parameters.BackendAddressPools)
                        {
                            JObject applicationGatewayBackendAddressPoolJsonFormatValue = new JObject();
                            backendAddressPoolsArray.Add(applicationGatewayBackendAddressPoolJsonFormatValue);
                            
                            JObject propertiesValue6 = new JObject();
                            applicationGatewayBackendAddressPoolJsonFormatValue["properties"] = propertiesValue6;
                            
                            if (backendAddressPoolsItem.BackendAddresses != null)
                            {
                                if (backendAddressPoolsItem.BackendAddresses is ILazyCollection == false || ((ILazyCollection)backendAddressPoolsItem.BackendAddresses).IsInitialized)
                                {
                                    JArray backendAddressesArray = new JArray();
                                    foreach (ApplicationGatewayBackendAddress backendAddressesItem in backendAddressPoolsItem.BackendAddresses)
                                    {
                                        JObject applicationGatewayBackendAddressValue = new JObject();
                                        backendAddressesArray.Add(applicationGatewayBackendAddressValue);
                                        
                                        if (backendAddressesItem.DnsName != null)
                                        {
                                            applicationGatewayBackendAddressValue["dnsName"] = backendAddressesItem.DnsName;
                                        }
                                        
                                        if (backendAddressesItem.IpAddress != null)
                                        {
                                            applicationGatewayBackendAddressValue["ipAddress"] = backendAddressesItem.IpAddress;
                                        }
                                        
                                        if (backendAddressesItem.Name != null)
                                        {
                                            applicationGatewayBackendAddressValue["name"] = backendAddressesItem.Name;
                                        }
                                        
                                        if (backendAddressesItem.Etag != null)
                                        {
                                            applicationGatewayBackendAddressValue["etag"] = backendAddressesItem.Etag;
                                        }
                                        
                                        if (backendAddressesItem.Id != null)
                                        {
                                            applicationGatewayBackendAddressValue["id"] = backendAddressesItem.Id;
                                        }
                                    }
                                    propertiesValue6["backendAddresses"] = backendAddressesArray;
                                }
                            }
                            
                            propertiesValue6["provisioningState"] = propertiesValue6;
                            
                            if (backendAddressPoolsItem.Name != null)
                            {
                                applicationGatewayBackendAddressPoolJsonFormatValue["name"] = backendAddressPoolsItem.Name;
                            }
                            
                            if (backendAddressPoolsItem.Etag != null)
                            {
                                applicationGatewayBackendAddressPoolJsonFormatValue["etag"] = backendAddressPoolsItem.Etag;
                            }
                            
                            if (backendAddressPoolsItem.Id != null)
                            {
                                applicationGatewayBackendAddressPoolJsonFormatValue["id"] = backendAddressPoolsItem.Id;
                            }
                        }
                        propertiesValue["backendAddressPools"] = backendAddressPoolsArray;
                    }
                }
                
                if (parameters.BackendHttpSettingsList != null)
                {
                    if (parameters.BackendHttpSettingsList is ILazyCollection == false || ((ILazyCollection)parameters.BackendHttpSettingsList).IsInitialized)
                    {
                        JArray backendHttpSettingsListArray = new JArray();
                        foreach (ApplicationGatewayBackendHttpSettings backendHttpSettingsListItem in parameters.BackendHttpSettingsList)
                        {
                            JObject applicationGatewayBackendHttpSettingsJsonFormatValue = new JObject();
                            backendHttpSettingsListArray.Add(applicationGatewayBackendHttpSettingsJsonFormatValue);
                            
                            JObject propertiesValue7 = new JObject();
                            applicationGatewayBackendHttpSettingsJsonFormatValue["properties"] = propertiesValue7;
                            
                            propertiesValue7["port"] = backendHttpSettingsListItem.Port;
                            
                            if (backendHttpSettingsListItem.Protocol != null)
                            {
                                propertiesValue7["protocol"] = backendHttpSettingsListItem.Protocol;
                            }
                            
                            if (backendHttpSettingsListItem.CookieBasedAffinity != null)
                            {
                                propertiesValue7["cookieBasedAffinity"] = backendHttpSettingsListItem.CookieBasedAffinity;
                            }
                            
                            propertiesValue7["provisioningState"] = propertiesValue7;
                            
                            if (backendHttpSettingsListItem.Name != null)
                            {
                                applicationGatewayBackendHttpSettingsJsonFormatValue["name"] = backendHttpSettingsListItem.Name;
                            }
                            
                            if (backendHttpSettingsListItem.Etag != null)
                            {
                                applicationGatewayBackendHttpSettingsJsonFormatValue["etag"] = backendHttpSettingsListItem.Etag;
                            }
                            
                            if (backendHttpSettingsListItem.Id != null)
                            {
                                applicationGatewayBackendHttpSettingsJsonFormatValue["id"] = backendHttpSettingsListItem.Id;
                            }
                        }
                        propertiesValue["backendHttpSettingsList"] = backendHttpSettingsListArray;
                    }
                }
                
                if (parameters.HttpListeners != null)
                {
                    if (parameters.HttpListeners is ILazyCollection == false || ((ILazyCollection)parameters.HttpListeners).IsInitialized)
                    {
                        JArray httpListenersArray = new JArray();
                        foreach (ApplicationGatewayHttpListener httpListenersItem in parameters.HttpListeners)
                        {
                            JObject applicationGatewayHttpListenerJsonFormatValue = new JObject();
                            httpListenersArray.Add(applicationGatewayHttpListenerJsonFormatValue);
                            
                            JObject propertiesValue8 = new JObject();
                            applicationGatewayHttpListenerJsonFormatValue["properties"] = propertiesValue8;
                            
                            if (httpListenersItem.FrontendIpConfiguration != null)
                            {
                                JObject frontendIpConfigurationValue = new JObject();
                                propertiesValue8["frontendIpConfiguration"] = frontendIpConfigurationValue;
                                
                                if (httpListenersItem.FrontendIpConfiguration.Id != null)
                                {
                                    frontendIpConfigurationValue["id"] = httpListenersItem.FrontendIpConfiguration.Id;
                                }
                            }
                            
                            if (httpListenersItem.FrontendPort != null)
                            {
                                JObject frontendPortValue = new JObject();
                                propertiesValue8["frontendPort"] = frontendPortValue;
                                
                                if (httpListenersItem.FrontendPort.Id != null)
                                {
                                    frontendPortValue["id"] = httpListenersItem.FrontendPort.Id;
                                }
                            }
                            
                            if (httpListenersItem.Protocol != null)
                            {
                                propertiesValue8["protocol"] = httpListenersItem.Protocol;
                            }
                            
                            if (httpListenersItem.SslCertificate != null)
                            {
                                JObject sslCertificateValue = new JObject();
                                propertiesValue8["sslCertificate"] = sslCertificateValue;
                                
                                if (httpListenersItem.SslCertificate.Id != null)
                                {
                                    sslCertificateValue["id"] = httpListenersItem.SslCertificate.Id;
                                }
                            }
                            
                            propertiesValue8["provisioningState"] = propertiesValue8;
                            
                            if (httpListenersItem.Name != null)
                            {
                                applicationGatewayHttpListenerJsonFormatValue["name"] = httpListenersItem.Name;
                            }
                            
                            if (httpListenersItem.Etag != null)
                            {
                                applicationGatewayHttpListenerJsonFormatValue["etag"] = httpListenersItem.Etag;
                            }
                            
                            if (httpListenersItem.Id != null)
                            {
                                applicationGatewayHttpListenerJsonFormatValue["id"] = httpListenersItem.Id;
                            }
                        }
                        propertiesValue["httpListeners"] = httpListenersArray;
                    }
                }
                
                if (parameters.RequestRoutingRules != null)
                {
                    if (parameters.RequestRoutingRules is ILazyCollection == false || ((ILazyCollection)parameters.RequestRoutingRules).IsInitialized)
                    {
                        JArray requestRoutingRulesArray = new JArray();
                        foreach (ApplicationGatewayRequestRoutingRule requestRoutingRulesItem in parameters.RequestRoutingRules)
                        {
                            JObject applicationGatewayRequestRoutingRuleJsonFormatValue = new JObject();
                            requestRoutingRulesArray.Add(applicationGatewayRequestRoutingRuleJsonFormatValue);
                            
                            JObject propertiesValue9 = new JObject();
                            applicationGatewayRequestRoutingRuleJsonFormatValue["properties"] = propertiesValue9;
                            
                            if (requestRoutingRulesItem.Type != null)
                            {
                                propertiesValue9["type"] = requestRoutingRulesItem.Type;
                            }
                            
                            if (requestRoutingRulesItem.BackendAddressPool != null)
                            {
                                JObject backendAddressPoolValue = new JObject();
                                propertiesValue9["backendAddressPool"] = backendAddressPoolValue;
                                
                                if (requestRoutingRulesItem.BackendAddressPool.Id != null)
                                {
                                    backendAddressPoolValue["id"] = requestRoutingRulesItem.BackendAddressPool.Id;
                                }
                            }
                            
                            if (requestRoutingRulesItem.BackendHttpSettings != null)
                            {
                                JObject backendHttpSettingsValue = new JObject();
                                propertiesValue9["backendHttpSettings"] = backendHttpSettingsValue;
                                
                                if (requestRoutingRulesItem.BackendHttpSettings.Id != null)
                                {
                                    backendHttpSettingsValue["id"] = requestRoutingRulesItem.BackendHttpSettings.Id;
                                }
                            }
                            
                            if (requestRoutingRulesItem.HttpListener != null)
                            {
                                JObject httpListenerValue = new JObject();
                                propertiesValue9["httpListener"] = httpListenerValue;
                                
                                if (requestRoutingRulesItem.HttpListener.Id != null)
                                {
                                    httpListenerValue["id"] = requestRoutingRulesItem.HttpListener.Id;
                                }
                            }
                            
                            propertiesValue9["provisioningState"] = propertiesValue9;
                            
                            if (requestRoutingRulesItem.Name != null)
                            {
                                applicationGatewayRequestRoutingRuleJsonFormatValue["name"] = requestRoutingRulesItem.Name;
                            }
                            
                            if (requestRoutingRulesItem.Etag != null)
                            {
                                applicationGatewayRequestRoutingRuleJsonFormatValue["etag"] = requestRoutingRulesItem.Etag;
                            }
                            
                            if (requestRoutingRulesItem.Id != null)
                            {
                                applicationGatewayRequestRoutingRuleJsonFormatValue["id"] = requestRoutingRulesItem.Id;
                            }
                        }
                        propertiesValue["requestRoutingRules"] = requestRoutingRulesArray;
                    }
                }
                
                propertiesValue["provisioningState"] = propertiesValue;
                
                if (parameters.Etag != null)
                {
                    applicationGatewayJsonFormatValue["etag"] = parameters.Etag;
                }
                
                if (parameters.Id != null)
                {
                    applicationGatewayJsonFormatValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    applicationGatewayJsonFormatValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    applicationGatewayJsonFormatValue["type"] = parameters.Type;
                }
                
                applicationGatewayJsonFormatValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    applicationGatewayJsonFormatValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayPutResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationGatewayPutResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ApplicationGateway applicationGatewayInstance = new ApplicationGateway();
                            result.ApplicationGateway = applicationGatewayInstance;
                            
                            JToken propertiesValue10 = responseDoc["properties"];
                            if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                            {
                                JToken instanceCountValue = propertiesValue10["instanceCount"];
                                if (instanceCountValue != null && instanceCountValue.Type != JTokenType.Null)
                                {
                                    uint instanceCountInstance = ((uint)instanceCountValue);
                                    applicationGatewayInstance.InstanceCount = instanceCountInstance;
                                }
                                
                                JToken applicationGatewaySizeValue = propertiesValue10["applicationGatewaySize"];
                                if (applicationGatewaySizeValue != null && applicationGatewaySizeValue.Type != JTokenType.Null)
                                {
                                    string applicationGatewaySizeInstance = ((string)applicationGatewaySizeValue);
                                    applicationGatewayInstance.Size = applicationGatewaySizeInstance;
                                }
                                
                                JToken gatewayIpConfigurationsArray2 = propertiesValue10["gatewayIpConfigurations"];
                                if (gatewayIpConfigurationsArray2 != null && gatewayIpConfigurationsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken gatewayIpConfigurationsValue in ((JArray)gatewayIpConfigurationsArray2))
                                    {
                                        ApplicationGatewayIpConfiguration applicationGatewayIpConfigurationJsonFormatInstance = new ApplicationGatewayIpConfiguration();
                                        applicationGatewayInstance.GatewayIpConfigurations.Add(applicationGatewayIpConfigurationJsonFormatInstance);
                                        
                                        JToken propertiesValue11 = gatewayIpConfigurationsValue["properties"];
                                        if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                        {
                                            JToken subnetValue3 = propertiesValue11["subnet"];
                                            if (subnetValue3 != null && subnetValue3.Type != JTokenType.Null)
                                            {
                                                ResourceId subnetInstance = new ResourceId();
                                                applicationGatewayIpConfigurationJsonFormatInstance.Subnet = subnetInstance;
                                                
                                                JToken idValue = subnetValue3["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    subnetInstance.Id = idInstance;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue = propertiesValue11["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue = gatewayIpConfigurationsValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            applicationGatewayIpConfigurationJsonFormatInstance.Name = nameInstance;
                                        }
                                        
                                        JToken etagValue = gatewayIpConfigurationsValue["etag"];
                                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                                        {
                                            string etagInstance = ((string)etagValue);
                                            applicationGatewayIpConfigurationJsonFormatInstance.Etag = etagInstance;
                                        }
                                        
                                        JToken idValue2 = gatewayIpConfigurationsValue["id"];
                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                        {
                                            string idInstance2 = ((string)idValue2);
                                            applicationGatewayIpConfigurationJsonFormatInstance.Id = idInstance2;
                                        }
                                    }
                                }
                                
                                JToken sslCertificatesArray2 = propertiesValue10["sslCertificates"];
                                if (sslCertificatesArray2 != null && sslCertificatesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken sslCertificatesValue in ((JArray)sslCertificatesArray2))
                                    {
                                        ApplicationGatewaySslCertificate applicationGatewaySslCertificateJsonFormatInstance = new ApplicationGatewaySslCertificate();
                                        applicationGatewayInstance.SslCertificates.Add(applicationGatewaySslCertificateJsonFormatInstance);
                                        
                                        JToken propertiesValue12 = sslCertificatesValue["properties"];
                                        if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                        {
                                            JToken dataValue = propertiesValue12["data"];
                                            if (dataValue != null && dataValue.Type != JTokenType.Null)
                                            {
                                                string dataInstance = ((string)dataValue);
                                                applicationGatewaySslCertificateJsonFormatInstance.Data = dataInstance;
                                            }
                                            
                                            JToken passwordValue = propertiesValue12["password"];
                                            if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                            {
                                                string passwordInstance = ((string)passwordValue);
                                                applicationGatewaySslCertificateJsonFormatInstance.Password = passwordInstance;
                                            }
                                            
                                            JToken publicCertDataValue = propertiesValue12["publicCertData"];
                                            if (publicCertDataValue != null && publicCertDataValue.Type != JTokenType.Null)
                                            {
                                                string publicCertDataInstance = ((string)publicCertDataValue);
                                                applicationGatewaySslCertificateJsonFormatInstance.PublicCertData = publicCertDataInstance;
                                            }
                                            
                                            JToken provisioningStateValue2 = propertiesValue12["provisioningState"];
                                            if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue2 = sslCertificatesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            applicationGatewaySslCertificateJsonFormatInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken etagValue2 = sslCertificatesValue["etag"];
                                        if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                        {
                                            string etagInstance2 = ((string)etagValue2);
                                            applicationGatewaySslCertificateJsonFormatInstance.Etag = etagInstance2;
                                        }
                                        
                                        JToken idValue3 = sslCertificatesValue["id"];
                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                        {
                                            string idInstance3 = ((string)idValue3);
                                            applicationGatewaySslCertificateJsonFormatInstance.Id = idInstance3;
                                        }
                                    }
                                }
                                
                                JToken frontendIPConfigurationsArray2 = propertiesValue10["frontendIPConfigurations"];
                                if (frontendIPConfigurationsArray2 != null && frontendIPConfigurationsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken frontendIPConfigurationsValue in ((JArray)frontendIPConfigurationsArray2))
                                    {
                                        ApplicationGatewayFrontendIpConfiguration applicationGatewayFrontendIpConfigurationJsonFormatInstance = new ApplicationGatewayFrontendIpConfiguration();
                                        applicationGatewayInstance.FrontendIpConfigurations.Add(applicationGatewayFrontendIpConfigurationJsonFormatInstance);
                                        
                                        JToken propertiesValue13 = frontendIPConfigurationsValue["properties"];
                                        if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                        {
                                            JToken privateIPAddressValue = propertiesValue13["privateIPAddress"];
                                            if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                applicationGatewayFrontendIpConfigurationJsonFormatInstance.PrivateIpAddress = privateIPAddressInstance;
                                            }
                                            
                                            JToken privateIPAllocationMethodValue = propertiesValue13["privateIPAllocationMethod"];
                                            if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                applicationGatewayFrontendIpConfigurationJsonFormatInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                            }
                                            
                                            JToken subnetValue4 = propertiesValue13["subnet"];
                                            if (subnetValue4 != null && subnetValue4.Type != JTokenType.Null)
                                            {
                                                ResourceId subnetInstance2 = new ResourceId();
                                                applicationGatewayFrontendIpConfigurationJsonFormatInstance.Subnet = subnetInstance2;
                                                
                                                JToken idValue4 = subnetValue4["id"];
                                                if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                {
                                                    string idInstance4 = ((string)idValue4);
                                                    subnetInstance2.Id = idInstance4;
                                                }
                                            }
                                            
                                            JToken publicIPAddressValue2 = propertiesValue13["publicIPAddress"];
                                            if (publicIPAddressValue2 != null && publicIPAddressValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId publicIPAddressInstance = new ResourceId();
                                                applicationGatewayFrontendIpConfigurationJsonFormatInstance.PublicIpAddress = publicIPAddressInstance;
                                                
                                                JToken idValue5 = publicIPAddressValue2["id"];
                                                if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                {
                                                    string idInstance5 = ((string)idValue5);
                                                    publicIPAddressInstance.Id = idInstance5;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue3 = propertiesValue13["provisioningState"];
                                            if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue3);
                                                applicationGatewayFrontendIpConfigurationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                        }
                                        
                                        JToken nameValue3 = frontendIPConfigurationsValue["name"];
                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                        {
                                            string nameInstance3 = ((string)nameValue3);
                                            applicationGatewayFrontendIpConfigurationJsonFormatInstance.Name = nameInstance3;
                                        }
                                        
                                        JToken etagValue3 = frontendIPConfigurationsValue["etag"];
                                        if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                        {
                                            string etagInstance3 = ((string)etagValue3);
                                            applicationGatewayFrontendIpConfigurationJsonFormatInstance.Etag = etagInstance3;
                                        }
                                        
                                        JToken idValue6 = frontendIPConfigurationsValue["id"];
                                        if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                        {
                                            string idInstance6 = ((string)idValue6);
                                            applicationGatewayFrontendIpConfigurationJsonFormatInstance.Id = idInstance6;
                                        }
                                    }
                                }
                                
                                JToken frontendPortsArray2 = propertiesValue10["frontendPorts"];
                                if (frontendPortsArray2 != null && frontendPortsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken frontendPortsValue in ((JArray)frontendPortsArray2))
                                    {
                                        ApplicationGatewayFrontendPort applicationGatewayFrontendPortJsonFormatInstance = new ApplicationGatewayFrontendPort();
                                        applicationGatewayInstance.FrontendPorts.Add(applicationGatewayFrontendPortJsonFormatInstance);
                                        
                                        JToken propertiesValue14 = frontendPortsValue["properties"];
                                        if (propertiesValue14 != null && propertiesValue14.Type != JTokenType.Null)
                                        {
                                            JToken portValue = propertiesValue14["port"];
                                            if (portValue != null && portValue.Type != JTokenType.Null)
                                            {
                                                uint portInstance = ((uint)portValue);
                                                applicationGatewayFrontendPortJsonFormatInstance.Port = portInstance;
                                            }
                                            
                                            JToken provisioningStateValue4 = propertiesValue14["provisioningState"];
                                            if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue4 = frontendPortsValue["name"];
                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                        {
                                            string nameInstance4 = ((string)nameValue4);
                                            applicationGatewayFrontendPortJsonFormatInstance.Name = nameInstance4;
                                        }
                                        
                                        JToken etagValue4 = frontendPortsValue["etag"];
                                        if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                        {
                                            string etagInstance4 = ((string)etagValue4);
                                            applicationGatewayFrontendPortJsonFormatInstance.Etag = etagInstance4;
                                        }
                                        
                                        JToken idValue7 = frontendPortsValue["id"];
                                        if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                        {
                                            string idInstance7 = ((string)idValue7);
                                            applicationGatewayFrontendPortJsonFormatInstance.Id = idInstance7;
                                        }
                                    }
                                }
                                
                                JToken backendAddressPoolsArray2 = propertiesValue10["backendAddressPools"];
                                if (backendAddressPoolsArray2 != null && backendAddressPoolsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken backendAddressPoolsValue in ((JArray)backendAddressPoolsArray2))
                                    {
                                        ApplicationGatewayBackendAddressPool applicationGatewayBackendAddressPoolJsonFormatInstance = new ApplicationGatewayBackendAddressPool();
                                        applicationGatewayInstance.BackendAddressPools.Add(applicationGatewayBackendAddressPoolJsonFormatInstance);
                                        
                                        JToken propertiesValue15 = backendAddressPoolsValue["properties"];
                                        if (propertiesValue15 != null && propertiesValue15.Type != JTokenType.Null)
                                        {
                                            JToken backendAddressesArray2 = propertiesValue15["backendAddresses"];
                                            if (backendAddressesArray2 != null && backendAddressesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken backendAddressesValue in ((JArray)backendAddressesArray2))
                                                {
                                                    ApplicationGatewayBackendAddress applicationGatewayBackendAddressInstance = new ApplicationGatewayBackendAddress();
                                                    applicationGatewayBackendAddressPoolJsonFormatInstance.BackendAddresses.Add(applicationGatewayBackendAddressInstance);
                                                    
                                                    JToken dnsNameValue = backendAddressesValue["dnsName"];
                                                    if (dnsNameValue != null && dnsNameValue.Type != JTokenType.Null)
                                                    {
                                                        string dnsNameInstance = ((string)dnsNameValue);
                                                        applicationGatewayBackendAddressInstance.DnsName = dnsNameInstance;
                                                    }
                                                    
                                                    JToken ipAddressValue = backendAddressesValue["ipAddress"];
                                                    if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                    {
                                                        string ipAddressInstance = ((string)ipAddressValue);
                                                        applicationGatewayBackendAddressInstance.IpAddress = ipAddressInstance;
                                                    }
                                                    
                                                    JToken nameValue5 = backendAddressesValue["name"];
                                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance5 = ((string)nameValue5);
                                                        applicationGatewayBackendAddressInstance.Name = nameInstance5;
                                                    }
                                                    
                                                    JToken etagValue5 = backendAddressesValue["etag"];
                                                    if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                                    {
                                                        string etagInstance5 = ((string)etagValue5);
                                                        applicationGatewayBackendAddressInstance.Etag = etagInstance5;
                                                    }
                                                    
                                                    JToken idValue8 = backendAddressesValue["id"];
                                                    if (idValue8 != null && idValue8.Type != JTokenType.Null)
                                                    {
                                                        string idInstance8 = ((string)idValue8);
                                                        applicationGatewayBackendAddressInstance.Id = idInstance8;
                                                    }
                                                }
                                            }
                                            
                                            JToken provisioningStateValue5 = propertiesValue15["provisioningState"];
                                            if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue6 = backendAddressPoolsValue["name"];
                                        if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                        {
                                            string nameInstance6 = ((string)nameValue6);
                                            applicationGatewayBackendAddressPoolJsonFormatInstance.Name = nameInstance6;
                                        }
                                        
                                        JToken etagValue6 = backendAddressPoolsValue["etag"];
                                        if (etagValue6 != null && etagValue6.Type != JTokenType.Null)
                                        {
                                            string etagInstance6 = ((string)etagValue6);
                                            applicationGatewayBackendAddressPoolJsonFormatInstance.Etag = etagInstance6;
                                        }
                                        
                                        JToken idValue9 = backendAddressPoolsValue["id"];
                                        if (idValue9 != null && idValue9.Type != JTokenType.Null)
                                        {
                                            string idInstance9 = ((string)idValue9);
                                            applicationGatewayBackendAddressPoolJsonFormatInstance.Id = idInstance9;
                                        }
                                    }
                                }
                                
                                JToken backendHttpSettingsListArray2 = propertiesValue10["backendHttpSettingsList"];
                                if (backendHttpSettingsListArray2 != null && backendHttpSettingsListArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken backendHttpSettingsListValue in ((JArray)backendHttpSettingsListArray2))
                                    {
                                        ApplicationGatewayBackendHttpSettings applicationGatewayBackendHttpSettingsJsonFormatInstance = new ApplicationGatewayBackendHttpSettings();
                                        applicationGatewayInstance.BackendHttpSettingsList.Add(applicationGatewayBackendHttpSettingsJsonFormatInstance);
                                        
                                        JToken propertiesValue16 = backendHttpSettingsListValue["properties"];
                                        if (propertiesValue16 != null && propertiesValue16.Type != JTokenType.Null)
                                        {
                                            JToken portValue2 = propertiesValue16["port"];
                                            if (portValue2 != null && portValue2.Type != JTokenType.Null)
                                            {
                                                uint portInstance2 = ((uint)portValue2);
                                                applicationGatewayBackendHttpSettingsJsonFormatInstance.Port = portInstance2;
                                            }
                                            
                                            JToken protocolValue = propertiesValue16["protocol"];
                                            if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                            {
                                                string protocolInstance = ((string)protocolValue);
                                                applicationGatewayBackendHttpSettingsJsonFormatInstance.Protocol = protocolInstance;
                                            }
                                            
                                            JToken cookieBasedAffinityValue = propertiesValue16["cookieBasedAffinity"];
                                            if (cookieBasedAffinityValue != null && cookieBasedAffinityValue.Type != JTokenType.Null)
                                            {
                                                string cookieBasedAffinityInstance = ((string)cookieBasedAffinityValue);
                                                applicationGatewayBackendHttpSettingsJsonFormatInstance.CookieBasedAffinity = cookieBasedAffinityInstance;
                                            }
                                            
                                            JToken provisioningStateValue6 = propertiesValue16["provisioningState"];
                                            if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue7 = backendHttpSettingsListValue["name"];
                                        if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                        {
                                            string nameInstance7 = ((string)nameValue7);
                                            applicationGatewayBackendHttpSettingsJsonFormatInstance.Name = nameInstance7;
                                        }
                                        
                                        JToken etagValue7 = backendHttpSettingsListValue["etag"];
                                        if (etagValue7 != null && etagValue7.Type != JTokenType.Null)
                                        {
                                            string etagInstance7 = ((string)etagValue7);
                                            applicationGatewayBackendHttpSettingsJsonFormatInstance.Etag = etagInstance7;
                                        }
                                        
                                        JToken idValue10 = backendHttpSettingsListValue["id"];
                                        if (idValue10 != null && idValue10.Type != JTokenType.Null)
                                        {
                                            string idInstance10 = ((string)idValue10);
                                            applicationGatewayBackendHttpSettingsJsonFormatInstance.Id = idInstance10;
                                        }
                                    }
                                }
                                
                                JToken httpListenersArray2 = propertiesValue10["httpListeners"];
                                if (httpListenersArray2 != null && httpListenersArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken httpListenersValue in ((JArray)httpListenersArray2))
                                    {
                                        ApplicationGatewayHttpListener applicationGatewayHttpListenerJsonFormatInstance = new ApplicationGatewayHttpListener();
                                        applicationGatewayInstance.HttpListeners.Add(applicationGatewayHttpListenerJsonFormatInstance);
                                        
                                        JToken propertiesValue17 = httpListenersValue["properties"];
                                        if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                                        {
                                            JToken frontendIpConfigurationValue2 = propertiesValue17["frontendIpConfiguration"];
                                            if (frontendIpConfigurationValue2 != null && frontendIpConfigurationValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId frontendIpConfigurationInstance = new ResourceId();
                                                applicationGatewayHttpListenerJsonFormatInstance.FrontendIpConfiguration = frontendIpConfigurationInstance;
                                                
                                                JToken idValue11 = frontendIpConfigurationValue2["id"];
                                                if (idValue11 != null && idValue11.Type != JTokenType.Null)
                                                {
                                                    string idInstance11 = ((string)idValue11);
                                                    frontendIpConfigurationInstance.Id = idInstance11;
                                                }
                                            }
                                            
                                            JToken frontendPortValue2 = propertiesValue17["frontendPort"];
                                            if (frontendPortValue2 != null && frontendPortValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId frontendPortInstance = new ResourceId();
                                                applicationGatewayHttpListenerJsonFormatInstance.FrontendPort = frontendPortInstance;
                                                
                                                JToken idValue12 = frontendPortValue2["id"];
                                                if (idValue12 != null && idValue12.Type != JTokenType.Null)
                                                {
                                                    string idInstance12 = ((string)idValue12);
                                                    frontendPortInstance.Id = idInstance12;
                                                }
                                            }
                                            
                                            JToken protocolValue2 = propertiesValue17["protocol"];
                                            if (protocolValue2 != null && protocolValue2.Type != JTokenType.Null)
                                            {
                                                string protocolInstance2 = ((string)protocolValue2);
                                                applicationGatewayHttpListenerJsonFormatInstance.Protocol = protocolInstance2;
                                            }
                                            
                                            JToken sslCertificateValue2 = propertiesValue17["sslCertificate"];
                                            if (sslCertificateValue2 != null && sslCertificateValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId sslCertificateInstance = new ResourceId();
                                                applicationGatewayHttpListenerJsonFormatInstance.SslCertificate = sslCertificateInstance;
                                                
                                                JToken idValue13 = sslCertificateValue2["id"];
                                                if (idValue13 != null && idValue13.Type != JTokenType.Null)
                                                {
                                                    string idInstance13 = ((string)idValue13);
                                                    sslCertificateInstance.Id = idInstance13;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue7 = propertiesValue17["provisioningState"];
                                            if (provisioningStateValue7 != null && provisioningStateValue7.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue8 = httpListenersValue["name"];
                                        if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                        {
                                            string nameInstance8 = ((string)nameValue8);
                                            applicationGatewayHttpListenerJsonFormatInstance.Name = nameInstance8;
                                        }
                                        
                                        JToken etagValue8 = httpListenersValue["etag"];
                                        if (etagValue8 != null && etagValue8.Type != JTokenType.Null)
                                        {
                                            string etagInstance8 = ((string)etagValue8);
                                            applicationGatewayHttpListenerJsonFormatInstance.Etag = etagInstance8;
                                        }
                                        
                                        JToken idValue14 = httpListenersValue["id"];
                                        if (idValue14 != null && idValue14.Type != JTokenType.Null)
                                        {
                                            string idInstance14 = ((string)idValue14);
                                            applicationGatewayHttpListenerJsonFormatInstance.Id = idInstance14;
                                        }
                                    }
                                }
                                
                                JToken requestRoutingRulesArray2 = propertiesValue10["requestRoutingRules"];
                                if (requestRoutingRulesArray2 != null && requestRoutingRulesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken requestRoutingRulesValue in ((JArray)requestRoutingRulesArray2))
                                    {
                                        ApplicationGatewayRequestRoutingRule applicationGatewayRequestRoutingRuleJsonFormatInstance = new ApplicationGatewayRequestRoutingRule();
                                        applicationGatewayInstance.RequestRoutingRules.Add(applicationGatewayRequestRoutingRuleJsonFormatInstance);
                                        
                                        JToken propertiesValue18 = requestRoutingRulesValue["properties"];
                                        if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                        {
                                            JToken typeValue = propertiesValue18["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                applicationGatewayRequestRoutingRuleJsonFormatInstance.Type = typeInstance;
                                            }
                                            
                                            JToken backendAddressPoolValue2 = propertiesValue18["backendAddressPool"];
                                            if (backendAddressPoolValue2 != null && backendAddressPoolValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId backendAddressPoolInstance = new ResourceId();
                                                applicationGatewayRequestRoutingRuleJsonFormatInstance.BackendAddressPool = backendAddressPoolInstance;
                                                
                                                JToken idValue15 = backendAddressPoolValue2["id"];
                                                if (idValue15 != null && idValue15.Type != JTokenType.Null)
                                                {
                                                    string idInstance15 = ((string)idValue15);
                                                    backendAddressPoolInstance.Id = idInstance15;
                                                }
                                            }
                                            
                                            JToken backendHttpSettingsValue2 = propertiesValue18["backendHttpSettings"];
                                            if (backendHttpSettingsValue2 != null && backendHttpSettingsValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId backendHttpSettingsInstance = new ResourceId();
                                                applicationGatewayRequestRoutingRuleJsonFormatInstance.BackendHttpSettings = backendHttpSettingsInstance;
                                                
                                                JToken idValue16 = backendHttpSettingsValue2["id"];
                                                if (idValue16 != null && idValue16.Type != JTokenType.Null)
                                                {
                                                    string idInstance16 = ((string)idValue16);
                                                    backendHttpSettingsInstance.Id = idInstance16;
                                                }
                                            }
                                            
                                            JToken httpListenerValue2 = propertiesValue18["httpListener"];
                                            if (httpListenerValue2 != null && httpListenerValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId httpListenerInstance = new ResourceId();
                                                applicationGatewayRequestRoutingRuleJsonFormatInstance.HttpListener = httpListenerInstance;
                                                
                                                JToken idValue17 = httpListenerValue2["id"];
                                                if (idValue17 != null && idValue17.Type != JTokenType.Null)
                                                {
                                                    string idInstance17 = ((string)idValue17);
                                                    httpListenerInstance.Id = idInstance17;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue8 = propertiesValue18["provisioningState"];
                                            if (provisioningStateValue8 != null && provisioningStateValue8.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue9 = requestRoutingRulesValue["name"];
                                        if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                        {
                                            string nameInstance9 = ((string)nameValue9);
                                            applicationGatewayRequestRoutingRuleJsonFormatInstance.Name = nameInstance9;
                                        }
                                        
                                        JToken etagValue9 = requestRoutingRulesValue["etag"];
                                        if (etagValue9 != null && etagValue9.Type != JTokenType.Null)
                                        {
                                            string etagInstance9 = ((string)etagValue9);
                                            applicationGatewayRequestRoutingRuleJsonFormatInstance.Etag = etagInstance9;
                                        }
                                        
                                        JToken idValue18 = requestRoutingRulesValue["id"];
                                        if (idValue18 != null && idValue18.Type != JTokenType.Null)
                                        {
                                            string idInstance18 = ((string)idValue18);
                                            applicationGatewayRequestRoutingRuleJsonFormatInstance.Id = idInstance18;
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue9 = propertiesValue10["provisioningState"];
                                if (provisioningStateValue9 != null && provisioningStateValue9.Type != JTokenType.Null)
                                {
                                }
                            }
                            
                            JToken etagValue10 = responseDoc["etag"];
                            if (etagValue10 != null && etagValue10.Type != JTokenType.Null)
                            {
                                string etagInstance10 = ((string)etagValue10);
                                applicationGatewayInstance.Etag = etagInstance10;
                            }
                            
                            JToken idValue19 = responseDoc["id"];
                            if (idValue19 != null && idValue19.Type != JTokenType.Null)
                            {
                                string idInstance19 = ((string)idValue19);
                                applicationGatewayInstance.Id = idInstance19;
                            }
                            
                            JToken nameValue10 = responseDoc["name"];
                            if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                            {
                                string nameInstance10 = ((string)nameValue10);
                                applicationGatewayInstance.Name = nameInstance10;
                            }
                            
                            JToken typeValue2 = responseDoc["type"];
                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                            {
                                string typeInstance2 = ((string)typeValue2);
                                applicationGatewayInstance.Type = typeInstance2;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                applicationGatewayInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    applicationGatewayInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                Error errorInstance = new Error();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken targetValue = errorValue["target"];
                                if (targetValue != null && targetValue.Type != JTokenType.Null)
                                {
                                    string targetInstance = ((string)targetValue);
                                    errorInstance.Target = targetInstance;
                                }
                                
                                JToken detailsArray = errorValue["details"];
                                if (detailsArray != null && detailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken detailsValue in ((JArray)detailsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        errorInstance.Details.Add(errorDetailsInstance);
                                        
                                        JToken codeValue2 = detailsValue["code"];
                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                        {
                                            string codeInstance2 = ((string)codeValue2);
                                            errorDetailsInstance.Code = codeInstance2;
                                        }
                                        
                                        JToken targetValue2 = detailsValue["target"];
                                        if (targetValue2 != null && targetValue2.Type != JTokenType.Null)
                                        {
                                            string targetInstance2 = ((string)targetValue2);
                                            errorDetailsInstance.Target = targetInstance2;
                                        }
                                        
                                        JToken messageValue2 = detailsValue["message"];
                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                        {
                                            string messageInstance2 = ((string)messageValue2);
                                            errorDetailsInstance.Message = messageInstance2;
                                        }
                                    }
                                }
                                
                                JToken innerErrorValue = errorValue["innerError"];
                                if (innerErrorValue != null && innerErrorValue.Type != JTokenType.Null)
                                {
                                    string innerErrorInstance = ((string)innerErrorValue);
                                    errorInstance.InnerError = innerErrorInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The delete applicationgateway operation deletes the specified
        /// applicationgateway.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='applicationGatewayName'>
        /// Required. The name of the applicationgateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// If the resource provide needs to return an error to any operation,
        /// it should return the appropriate HTTP error code and a message
        /// body as can be seen below.The message should be localized per the
        /// Accept-Language header specified in the original request such
        /// thatit could be directly be exposed to users
        /// </returns>
        public async Task<UpdateOperationResponse> BeginDeletingAsync(string resourceGroupName, string applicationGatewayName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (applicationGatewayName == null)
            {
                throw new ArgumentNullException("applicationGatewayName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("applicationGatewayName", applicationGatewayName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/applicationGateways/";
            url = url + Uri.EscapeDataString(applicationGatewayName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UpdateOperationResponse result = null;
                    // Deserialize Response
                    result = new UpdateOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Put ApplicationGateway operation creates/updates a
        /// ApplicationGateway
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='applicationGatewayName'>
        /// Required. The name of the ApplicationGateway.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create/update
        /// ApplicationGateway operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> CreateOrUpdateAsync(string resourceGroupName, string applicationGatewayName, ApplicationGateway parameters, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("applicationGatewayName", applicationGatewayName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ApplicationGatewayPutResponse response = await client.ApplicationGateways.BeginCreateOrUpdatingAsync(resourceGroupName, applicationGatewayName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Network.Models.OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='applicationGatewayName'>
        /// Required. The name of the applicationgateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string applicationGatewayName, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("applicationGatewayName", applicationGatewayName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            UpdateOperationResponse response = await client.ApplicationGateways.BeginDeletingAsync(resourceGroupName, applicationGatewayName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Network.Models.OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The Get applicationgateway operation retreives information about
        /// the specified applicationgateway.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='applicationGatewayName'>
        /// Required. The name of the applicationgateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of a GET ApplicationGateway operation
        /// </returns>
        public async Task<ApplicationGatewayGetResponse> GetAsync(string resourceGroupName, string applicationGatewayName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (applicationGatewayName == null)
            {
                throw new ArgumentNullException("applicationGatewayName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("applicationGatewayName", applicationGatewayName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/applicationGateways/";
            url = url + Uri.EscapeDataString(applicationGatewayName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationGatewayGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ApplicationGateway applicationGatewayInstance = new ApplicationGateway();
                            result.ApplicationGateway = applicationGatewayInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken instanceCountValue = propertiesValue["instanceCount"];
                                if (instanceCountValue != null && instanceCountValue.Type != JTokenType.Null)
                                {
                                    uint instanceCountInstance = ((uint)instanceCountValue);
                                    applicationGatewayInstance.InstanceCount = instanceCountInstance;
                                }
                                
                                JToken applicationGatewaySizeValue = propertiesValue["applicationGatewaySize"];
                                if (applicationGatewaySizeValue != null && applicationGatewaySizeValue.Type != JTokenType.Null)
                                {
                                    string applicationGatewaySizeInstance = ((string)applicationGatewaySizeValue);
                                    applicationGatewayInstance.Size = applicationGatewaySizeInstance;
                                }
                                
                                JToken gatewayIpConfigurationsArray = propertiesValue["gatewayIpConfigurations"];
                                if (gatewayIpConfigurationsArray != null && gatewayIpConfigurationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken gatewayIpConfigurationsValue in ((JArray)gatewayIpConfigurationsArray))
                                    {
                                        ApplicationGatewayIpConfiguration applicationGatewayIpConfigurationJsonFormatInstance = new ApplicationGatewayIpConfiguration();
                                        applicationGatewayInstance.GatewayIpConfigurations.Add(applicationGatewayIpConfigurationJsonFormatInstance);
                                        
                                        JToken propertiesValue2 = gatewayIpConfigurationsValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            JToken subnetValue = propertiesValue2["subnet"];
                                            if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                            {
                                                ResourceId subnetInstance = new ResourceId();
                                                applicationGatewayIpConfigurationJsonFormatInstance.Subnet = subnetInstance;
                                                
                                                JToken idValue = subnetValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    subnetInstance.Id = idInstance;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue = gatewayIpConfigurationsValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            applicationGatewayIpConfigurationJsonFormatInstance.Name = nameInstance;
                                        }
                                        
                                        JToken etagValue = gatewayIpConfigurationsValue["etag"];
                                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                                        {
                                            string etagInstance = ((string)etagValue);
                                            applicationGatewayIpConfigurationJsonFormatInstance.Etag = etagInstance;
                                        }
                                        
                                        JToken idValue2 = gatewayIpConfigurationsValue["id"];
                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                        {
                                            string idInstance2 = ((string)idValue2);
                                            applicationGatewayIpConfigurationJsonFormatInstance.Id = idInstance2;
                                        }
                                    }
                                }
                                
                                JToken sslCertificatesArray = propertiesValue["sslCertificates"];
                                if (sslCertificatesArray != null && sslCertificatesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken sslCertificatesValue in ((JArray)sslCertificatesArray))
                                    {
                                        ApplicationGatewaySslCertificate applicationGatewaySslCertificateJsonFormatInstance = new ApplicationGatewaySslCertificate();
                                        applicationGatewayInstance.SslCertificates.Add(applicationGatewaySslCertificateJsonFormatInstance);
                                        
                                        JToken propertiesValue3 = sslCertificatesValue["properties"];
                                        if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                        {
                                            JToken dataValue = propertiesValue3["data"];
                                            if (dataValue != null && dataValue.Type != JTokenType.Null)
                                            {
                                                string dataInstance = ((string)dataValue);
                                                applicationGatewaySslCertificateJsonFormatInstance.Data = dataInstance;
                                            }
                                            
                                            JToken passwordValue = propertiesValue3["password"];
                                            if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                            {
                                                string passwordInstance = ((string)passwordValue);
                                                applicationGatewaySslCertificateJsonFormatInstance.Password = passwordInstance;
                                            }
                                            
                                            JToken publicCertDataValue = propertiesValue3["publicCertData"];
                                            if (publicCertDataValue != null && publicCertDataValue.Type != JTokenType.Null)
                                            {
                                                string publicCertDataInstance = ((string)publicCertDataValue);
                                                applicationGatewaySslCertificateJsonFormatInstance.PublicCertData = publicCertDataInstance;
                                            }
                                            
                                            JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                            if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue2 = sslCertificatesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            applicationGatewaySslCertificateJsonFormatInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken etagValue2 = sslCertificatesValue["etag"];
                                        if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                        {
                                            string etagInstance2 = ((string)etagValue2);
                                            applicationGatewaySslCertificateJsonFormatInstance.Etag = etagInstance2;
                                        }
                                        
                                        JToken idValue3 = sslCertificatesValue["id"];
                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                        {
                                            string idInstance3 = ((string)idValue3);
                                            applicationGatewaySslCertificateJsonFormatInstance.Id = idInstance3;
                                        }
                                    }
                                }
                                
                                JToken frontendIPConfigurationsArray = propertiesValue["frontendIPConfigurations"];
                                if (frontendIPConfigurationsArray != null && frontendIPConfigurationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken frontendIPConfigurationsValue in ((JArray)frontendIPConfigurationsArray))
                                    {
                                        ApplicationGatewayFrontendIpConfiguration applicationGatewayFrontendIpConfigurationJsonFormatInstance = new ApplicationGatewayFrontendIpConfiguration();
                                        applicationGatewayInstance.FrontendIpConfigurations.Add(applicationGatewayFrontendIpConfigurationJsonFormatInstance);
                                        
                                        JToken propertiesValue4 = frontendIPConfigurationsValue["properties"];
                                        if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                        {
                                            JToken privateIPAddressValue = propertiesValue4["privateIPAddress"];
                                            if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                applicationGatewayFrontendIpConfigurationJsonFormatInstance.PrivateIpAddress = privateIPAddressInstance;
                                            }
                                            
                                            JToken privateIPAllocationMethodValue = propertiesValue4["privateIPAllocationMethod"];
                                            if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                applicationGatewayFrontendIpConfigurationJsonFormatInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                            }
                                            
                                            JToken subnetValue2 = propertiesValue4["subnet"];
                                            if (subnetValue2 != null && subnetValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId subnetInstance2 = new ResourceId();
                                                applicationGatewayFrontendIpConfigurationJsonFormatInstance.Subnet = subnetInstance2;
                                                
                                                JToken idValue4 = subnetValue2["id"];
                                                if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                {
                                                    string idInstance4 = ((string)idValue4);
                                                    subnetInstance2.Id = idInstance4;
                                                }
                                            }
                                            
                                            JToken publicIPAddressValue = propertiesValue4["publicIPAddress"];
                                            if (publicIPAddressValue != null && publicIPAddressValue.Type != JTokenType.Null)
                                            {
                                                ResourceId publicIPAddressInstance = new ResourceId();
                                                applicationGatewayFrontendIpConfigurationJsonFormatInstance.PublicIpAddress = publicIPAddressInstance;
                                                
                                                JToken idValue5 = publicIPAddressValue["id"];
                                                if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                {
                                                    string idInstance5 = ((string)idValue5);
                                                    publicIPAddressInstance.Id = idInstance5;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue3 = propertiesValue4["provisioningState"];
                                            if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue3);
                                                applicationGatewayFrontendIpConfigurationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                        }
                                        
                                        JToken nameValue3 = frontendIPConfigurationsValue["name"];
                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                        {
                                            string nameInstance3 = ((string)nameValue3);
                                            applicationGatewayFrontendIpConfigurationJsonFormatInstance.Name = nameInstance3;
                                        }
                                        
                                        JToken etagValue3 = frontendIPConfigurationsValue["etag"];
                                        if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                        {
                                            string etagInstance3 = ((string)etagValue3);
                                            applicationGatewayFrontendIpConfigurationJsonFormatInstance.Etag = etagInstance3;
                                        }
                                        
                                        JToken idValue6 = frontendIPConfigurationsValue["id"];
                                        if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                        {
                                            string idInstance6 = ((string)idValue6);
                                            applicationGatewayFrontendIpConfigurationJsonFormatInstance.Id = idInstance6;
                                        }
                                    }
                                }
                                
                                JToken frontendPortsArray = propertiesValue["frontendPorts"];
                                if (frontendPortsArray != null && frontendPortsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken frontendPortsValue in ((JArray)frontendPortsArray))
                                    {
                                        ApplicationGatewayFrontendPort applicationGatewayFrontendPortJsonFormatInstance = new ApplicationGatewayFrontendPort();
                                        applicationGatewayInstance.FrontendPorts.Add(applicationGatewayFrontendPortJsonFormatInstance);
                                        
                                        JToken propertiesValue5 = frontendPortsValue["properties"];
                                        if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                        {
                                            JToken portValue = propertiesValue5["port"];
                                            if (portValue != null && portValue.Type != JTokenType.Null)
                                            {
                                                uint portInstance = ((uint)portValue);
                                                applicationGatewayFrontendPortJsonFormatInstance.Port = portInstance;
                                            }
                                            
                                            JToken provisioningStateValue4 = propertiesValue5["provisioningState"];
                                            if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue4 = frontendPortsValue["name"];
                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                        {
                                            string nameInstance4 = ((string)nameValue4);
                                            applicationGatewayFrontendPortJsonFormatInstance.Name = nameInstance4;
                                        }
                                        
                                        JToken etagValue4 = frontendPortsValue["etag"];
                                        if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                        {
                                            string etagInstance4 = ((string)etagValue4);
                                            applicationGatewayFrontendPortJsonFormatInstance.Etag = etagInstance4;
                                        }
                                        
                                        JToken idValue7 = frontendPortsValue["id"];
                                        if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                        {
                                            string idInstance7 = ((string)idValue7);
                                            applicationGatewayFrontendPortJsonFormatInstance.Id = idInstance7;
                                        }
                                    }
                                }
                                
                                JToken backendAddressPoolsArray = propertiesValue["backendAddressPools"];
                                if (backendAddressPoolsArray != null && backendAddressPoolsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken backendAddressPoolsValue in ((JArray)backendAddressPoolsArray))
                                    {
                                        ApplicationGatewayBackendAddressPool applicationGatewayBackendAddressPoolJsonFormatInstance = new ApplicationGatewayBackendAddressPool();
                                        applicationGatewayInstance.BackendAddressPools.Add(applicationGatewayBackendAddressPoolJsonFormatInstance);
                                        
                                        JToken propertiesValue6 = backendAddressPoolsValue["properties"];
                                        if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                        {
                                            JToken backendAddressesArray = propertiesValue6["backendAddresses"];
                                            if (backendAddressesArray != null && backendAddressesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken backendAddressesValue in ((JArray)backendAddressesArray))
                                                {
                                                    ApplicationGatewayBackendAddress applicationGatewayBackendAddressInstance = new ApplicationGatewayBackendAddress();
                                                    applicationGatewayBackendAddressPoolJsonFormatInstance.BackendAddresses.Add(applicationGatewayBackendAddressInstance);
                                                    
                                                    JToken dnsNameValue = backendAddressesValue["dnsName"];
                                                    if (dnsNameValue != null && dnsNameValue.Type != JTokenType.Null)
                                                    {
                                                        string dnsNameInstance = ((string)dnsNameValue);
                                                        applicationGatewayBackendAddressInstance.DnsName = dnsNameInstance;
                                                    }
                                                    
                                                    JToken ipAddressValue = backendAddressesValue["ipAddress"];
                                                    if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                                    {
                                                        string ipAddressInstance = ((string)ipAddressValue);
                                                        applicationGatewayBackendAddressInstance.IpAddress = ipAddressInstance;
                                                    }
                                                    
                                                    JToken nameValue5 = backendAddressesValue["name"];
                                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance5 = ((string)nameValue5);
                                                        applicationGatewayBackendAddressInstance.Name = nameInstance5;
                                                    }
                                                    
                                                    JToken etagValue5 = backendAddressesValue["etag"];
                                                    if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                                    {
                                                        string etagInstance5 = ((string)etagValue5);
                                                        applicationGatewayBackendAddressInstance.Etag = etagInstance5;
                                                    }
                                                    
                                                    JToken idValue8 = backendAddressesValue["id"];
                                                    if (idValue8 != null && idValue8.Type != JTokenType.Null)
                                                    {
                                                        string idInstance8 = ((string)idValue8);
                                                        applicationGatewayBackendAddressInstance.Id = idInstance8;
                                                    }
                                                }
                                            }
                                            
                                            JToken provisioningStateValue5 = propertiesValue6["provisioningState"];
                                            if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue6 = backendAddressPoolsValue["name"];
                                        if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                        {
                                            string nameInstance6 = ((string)nameValue6);
                                            applicationGatewayBackendAddressPoolJsonFormatInstance.Name = nameInstance6;
                                        }
                                        
                                        JToken etagValue6 = backendAddressPoolsValue["etag"];
                                        if (etagValue6 != null && etagValue6.Type != JTokenType.Null)
                                        {
                                            string etagInstance6 = ((string)etagValue6);
                                            applicationGatewayBackendAddressPoolJsonFormatInstance.Etag = etagInstance6;
                                        }
                                        
                                        JToken idValue9 = backendAddressPoolsValue["id"];
                                        if (idValue9 != null && idValue9.Type != JTokenType.Null)
                                        {
                                            string idInstance9 = ((string)idValue9);
                                            applicationGatewayBackendAddressPoolJsonFormatInstance.Id = idInstance9;
                                        }
                                    }
                                }
                                
                                JToken backendHttpSettingsListArray = propertiesValue["backendHttpSettingsList"];
                                if (backendHttpSettingsListArray != null && backendHttpSettingsListArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken backendHttpSettingsListValue in ((JArray)backendHttpSettingsListArray))
                                    {
                                        ApplicationGatewayBackendHttpSettings applicationGatewayBackendHttpSettingsJsonFormatInstance = new ApplicationGatewayBackendHttpSettings();
                                        applicationGatewayInstance.BackendHttpSettingsList.Add(applicationGatewayBackendHttpSettingsJsonFormatInstance);
                                        
                                        JToken propertiesValue7 = backendHttpSettingsListValue["properties"];
                                        if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                        {
                                            JToken portValue2 = propertiesValue7["port"];
                                            if (portValue2 != null && portValue2.Type != JTokenType.Null)
                                            {
                                                uint portInstance2 = ((uint)portValue2);
                                                applicationGatewayBackendHttpSettingsJsonFormatInstance.Port = portInstance2;
                                            }
                                            
                                            JToken protocolValue = propertiesValue7["protocol"];
                                            if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                            {
                                                string protocolInstance = ((string)protocolValue);
                                                applicationGatewayBackendHttpSettingsJsonFormatInstance.Protocol = protocolInstance;
                                            }
                                            
                                            JToken cookieBasedAffinityValue = propertiesValue7["cookieBasedAffinity"];
                                            if (cookieBasedAffinityValue != null && cookieBasedAffinityValue.Type != JTokenType.Null)
                                            {
                                                string cookieBasedAffinityInstance = ((string)cookieBasedAffinityValue);
                                                applicationGatewayBackendHttpSettingsJsonFormatInstance.CookieBasedAffinity = cookieBasedAffinityInstance;
                                            }
                                            
                                            JToken provisioningStateValue6 = propertiesValue7["provisioningState"];
                                            if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue7 = backendHttpSettingsListValue["name"];
                                        if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                        {
                                            string nameInstance7 = ((string)nameValue7);
                                            applicationGatewayBackendHttpSettingsJsonFormatInstance.Name = nameInstance7;
                                        }
                                        
                                        JToken etagValue7 = backendHttpSettingsListValue["etag"];
                                        if (etagValue7 != null && etagValue7.Type != JTokenType.Null)
                                        {
                                            string etagInstance7 = ((string)etagValue7);
                                            applicationGatewayBackendHttpSettingsJsonFormatInstance.Etag = etagInstance7;
                                        }
                                        
                                        JToken idValue10 = backendHttpSettingsListValue["id"];
                                        if (idValue10 != null && idValue10.Type != JTokenType.Null)
                                        {
                                            string idInstance10 = ((string)idValue10);
                                            applicationGatewayBackendHttpSettingsJsonFormatInstance.Id = idInstance10;
                                        }
                                    }
                                }
                                
                                JToken httpListenersArray = propertiesValue["httpListeners"];
                                if (httpListenersArray != null && httpListenersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken httpListenersValue in ((JArray)httpListenersArray))
                                    {
                                        ApplicationGatewayHttpListener applicationGatewayHttpListenerJsonFormatInstance = new ApplicationGatewayHttpListener();
                                        applicationGatewayInstance.HttpListeners.Add(applicationGatewayHttpListenerJsonFormatInstance);
                                        
                                        JToken propertiesValue8 = httpListenersValue["properties"];
                                        if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                        {
                                            JToken frontendIpConfigurationValue = propertiesValue8["frontendIpConfiguration"];
                                            if (frontendIpConfigurationValue != null && frontendIpConfigurationValue.Type != JTokenType.Null)
                                            {
                                                ResourceId frontendIpConfigurationInstance = new ResourceId();
                                                applicationGatewayHttpListenerJsonFormatInstance.FrontendIpConfiguration = frontendIpConfigurationInstance;
                                                
                                                JToken idValue11 = frontendIpConfigurationValue["id"];
                                                if (idValue11 != null && idValue11.Type != JTokenType.Null)
                                                {
                                                    string idInstance11 = ((string)idValue11);
                                                    frontendIpConfigurationInstance.Id = idInstance11;
                                                }
                                            }
                                            
                                            JToken frontendPortValue = propertiesValue8["frontendPort"];
                                            if (frontendPortValue != null && frontendPortValue.Type != JTokenType.Null)
                                            {
                                                ResourceId frontendPortInstance = new ResourceId();
                                                applicationGatewayHttpListenerJsonFormatInstance.FrontendPort = frontendPortInstance;
                                                
                                                JToken idValue12 = frontendPortValue["id"];
                                                if (idValue12 != null && idValue12.Type != JTokenType.Null)
                                                {
                                                    string idInstance12 = ((string)idValue12);
                                                    frontendPortInstance.Id = idInstance12;
                                                }
                                            }
                                            
                                            JToken protocolValue2 = propertiesValue8["protocol"];
                                            if (protocolValue2 != null && protocolValue2.Type != JTokenType.Null)
                                            {
                                                string protocolInstance2 = ((string)protocolValue2);
                                                applicationGatewayHttpListenerJsonFormatInstance.Protocol = protocolInstance2;
                                            }
                                            
                                            JToken sslCertificateValue = propertiesValue8["sslCertificate"];
                                            if (sslCertificateValue != null && sslCertificateValue.Type != JTokenType.Null)
                                            {
                                                ResourceId sslCertificateInstance = new ResourceId();
                                                applicationGatewayHttpListenerJsonFormatInstance.SslCertificate = sslCertificateInstance;
                                                
                                                JToken idValue13 = sslCertificateValue["id"];
                                                if (idValue13 != null && idValue13.Type != JTokenType.Null)
                                                {
                                                    string idInstance13 = ((string)idValue13);
                                                    sslCertificateInstance.Id = idInstance13;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue7 = propertiesValue8["provisioningState"];
                                            if (provisioningStateValue7 != null && provisioningStateValue7.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue8 = httpListenersValue["name"];
                                        if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                        {
                                            string nameInstance8 = ((string)nameValue8);
                                            applicationGatewayHttpListenerJsonFormatInstance.Name = nameInstance8;
                                        }
                                        
                                        JToken etagValue8 = httpListenersValue["etag"];
                                        if (etagValue8 != null && etagValue8.Type != JTokenType.Null)
                                        {
                                            string etagInstance8 = ((string)etagValue8);
                                            applicationGatewayHttpListenerJsonFormatInstance.Etag = etagInstance8;
                                        }
                                        
                                        JToken idValue14 = httpListenersValue["id"];
                                        if (idValue14 != null && idValue14.Type != JTokenType.Null)
                                        {
                                            string idInstance14 = ((string)idValue14);
                                            applicationGatewayHttpListenerJsonFormatInstance.Id = idInstance14;
                                        }
                                    }
                                }
                                
                                JToken requestRoutingRulesArray = propertiesValue["requestRoutingRules"];
                                if (requestRoutingRulesArray != null && requestRoutingRulesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken requestRoutingRulesValue in ((JArray)requestRoutingRulesArray))
                                    {
                                        ApplicationGatewayRequestRoutingRule applicationGatewayRequestRoutingRuleJsonFormatInstance = new ApplicationGatewayRequestRoutingRule();
                                        applicationGatewayInstance.RequestRoutingRules.Add(applicationGatewayRequestRoutingRuleJsonFormatInstance);
                                        
                                        JToken propertiesValue9 = requestRoutingRulesValue["properties"];
                                        if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                        {
                                            JToken typeValue = propertiesValue9["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                applicationGatewayRequestRoutingRuleJsonFormatInstance.Type = typeInstance;
                                            }
                                            
                                            JToken backendAddressPoolValue = propertiesValue9["backendAddressPool"];
                                            if (backendAddressPoolValue != null && backendAddressPoolValue.Type != JTokenType.Null)
                                            {
                                                ResourceId backendAddressPoolInstance = new ResourceId();
                                                applicationGatewayRequestRoutingRuleJsonFormatInstance.BackendAddressPool = backendAddressPoolInstance;
                                                
                                                JToken idValue15 = backendAddressPoolValue["id"];
                                                if (idValue15 != null && idValue15.Type != JTokenType.Null)
                                                {
                                                    string idInstance15 = ((string)idValue15);
                                                    backendAddressPoolInstance.Id = idInstance15;
                                                }
                                            }
                                            
                                            JToken backendHttpSettingsValue = propertiesValue9["backendHttpSettings"];
                                            if (backendHttpSettingsValue != null && backendHttpSettingsValue.Type != JTokenType.Null)
                                            {
                                                ResourceId backendHttpSettingsInstance = new ResourceId();
                                                applicationGatewayRequestRoutingRuleJsonFormatInstance.BackendHttpSettings = backendHttpSettingsInstance;
                                                
                                                JToken idValue16 = backendHttpSettingsValue["id"];
                                                if (idValue16 != null && idValue16.Type != JTokenType.Null)
                                                {
                                                    string idInstance16 = ((string)idValue16);
                                                    backendHttpSettingsInstance.Id = idInstance16;
                                                }
                                            }
                                            
                                            JToken httpListenerValue = propertiesValue9["httpListener"];
                                            if (httpListenerValue != null && httpListenerValue.Type != JTokenType.Null)
                                            {
                                                ResourceId httpListenerInstance = new ResourceId();
                                                applicationGatewayRequestRoutingRuleJsonFormatInstance.HttpListener = httpListenerInstance;
                                                
                                                JToken idValue17 = httpListenerValue["id"];
                                                if (idValue17 != null && idValue17.Type != JTokenType.Null)
                                                {
                                                    string idInstance17 = ((string)idValue17);
                                                    httpListenerInstance.Id = idInstance17;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue8 = propertiesValue9["provisioningState"];
                                            if (provisioningStateValue8 != null && provisioningStateValue8.Type != JTokenType.Null)
                                            {
                                            }
                                        }
                                        
                                        JToken nameValue9 = requestRoutingRulesValue["name"];
                                        if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                        {
                                            string nameInstance9 = ((string)nameValue9);
                                            applicationGatewayRequestRoutingRuleJsonFormatInstance.Name = nameInstance9;
                                        }
                                        
                                        JToken etagValue9 = requestRoutingRulesValue["etag"];
                                        if (etagValue9 != null && etagValue9.Type != JTokenType.Null)
                                        {
                                            string etagInstance9 = ((string)etagValue9);
                                            applicationGatewayRequestRoutingRuleJsonFormatInstance.Etag = etagInstance9;
                                        }
                                        
                                        JToken idValue18 = requestRoutingRulesValue["id"];
                                        if (idValue18 != null && idValue18.Type != JTokenType.Null)
                                        {
                                            string idInstance18 = ((string)idValue18);
                                            applicationGatewayRequestRoutingRuleJsonFormatInstance.Id = idInstance18;
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue9 = propertiesValue["provisioningState"];
                                if (provisioningStateValue9 != null && provisioningStateValue9.Type != JTokenType.Null)
                                {
                                }
                            }
                            
                            JToken etagValue10 = responseDoc["etag"];
                            if (etagValue10 != null && etagValue10.Type != JTokenType.Null)
                            {
                                string etagInstance10 = ((string)etagValue10);
                                applicationGatewayInstance.Etag = etagInstance10;
                            }
                            
                            JToken idValue19 = responseDoc["id"];
                            if (idValue19 != null && idValue19.Type != JTokenType.Null)
                            {
                                string idInstance19 = ((string)idValue19);
                                applicationGatewayInstance.Id = idInstance19;
                            }
                            
                            JToken nameValue10 = responseDoc["name"];
                            if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                            {
                                string nameInstance10 = ((string)nameValue10);
                                applicationGatewayInstance.Name = nameInstance10;
                            }
                            
                            JToken typeValue2 = responseDoc["type"];
                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                            {
                                string typeInstance2 = ((string)typeValue2);
                                applicationGatewayInstance.Type = typeInstance2;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                applicationGatewayInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    applicationGatewayInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List ApplicationGateway opertion retrieves all the
        /// applicationgateways in a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListLoadBalancers Api service call
        /// </returns>
        public async Task<ApplicationGatewayListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/applicationGateways";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationGatewayListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List applicationgateway opertion retrieves all the
        /// applicationgateways in a subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListLoadBalancers Api service call
        /// </returns>
        public async Task<ApplicationGatewayListResponse> ListAllAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/applicationGateways";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationGatewayListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
