// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Commerce.UsageAggregates;
using Microsoft.Commerce.UsageAggregates.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Commerce.UsageAggregates.Models
{
    public enum AggregationGranularity
    {
        Daily = 0,
        
        Hourly = 1,
    }
    
    /// <summary>
    /// Key-value pairs of instance details in the legacy format.
    /// </summary>
    public partial class InfoField
    {
        private string _project;
        
        /// <summary>
        /// Optional. Identifies the name of the instance provisioned by the
        /// user.
        /// </summary>
        public string Project
        {
            get { return this._project; }
            set { this._project = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the InfoField class.
        /// </summary>
        public InfoField()
        {
        }
    }
    
    /// <summary>
    /// Describes the usageAggregation.
    /// </summary>
    public partial class UsageAggregation
    {
        private string _id;
        
        /// <summary>
        /// Optional. Unique Id for the usage aggregate.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Name of the usage aggregate.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private UsageSample _properties;
        
        /// <summary>
        /// Optional. Usage data.
        /// </summary>
        public UsageSample Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the UsageAggregation class.
        /// </summary>
        public UsageAggregation()
        {
        }
    }
    
    /// <summary>
    /// The Get UsageAggregates operation response.
    /// </summary>
    public partial class UsageAggregationGetResponse : AzureOperationResponse
    {
        private string _nextLink;
        
        /// <summary>
        /// Optional. Gets or sets the link to the next set of results.
        /// </summary>
        public string NextLink
        {
            get { return this._nextLink; }
            set { this._nextLink = value; }
        }
        
        private IList<UsageAggregation> _usageAggregations;
        
        /// <summary>
        /// Optional. Gets or sets details for the requested aggregation.
        /// </summary>
        public IList<UsageAggregation> UsageAggregations
        {
            get { return this._usageAggregations; }
            set { this._usageAggregations = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the UsageAggregationGetResponse class.
        /// </summary>
        public UsageAggregationGetResponse()
        {
            this.UsageAggregations = new LazyList<UsageAggregation>();
        }
    }
    
    /// <summary>
    /// Key-value pairs of instance details.
    /// </summary>
    public partial class UsageInstanceData
    {
        private string _additionalInfo;
        
        /// <summary>
        /// Optional. More details about the resource being consumed. For
        /// example, OS version, Image Type.
        /// </summary>
        public string AdditionalInfo
        {
            get { return this._additionalInfo; }
            set { this._additionalInfo = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. The region in which this service was run.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _orderNumber;
        
        /// <summary>
        /// Optional. Unique ID that represents the 3rd party order identifier.
        /// Presence of an orderNumber states that this usage record was
        /// incurred on a resource owned by a 3rd party and not Microsoft.
        /// </summary>
        public string OrderNumber
        {
            get { return this._orderNumber; }
            set { this._orderNumber = value; }
        }
        
        private string _partNumber;
        
        /// <summary>
        /// Optional. Unique namespace used to identify the resource for Azure
        /// Marketplace 3rd party usage
        /// </summary>
        public string PartNumber
        {
            get { return this._partNumber; }
            set { this._partNumber = value; }
        }
        
        private Uri _resourceUri;
        
        /// <summary>
        /// Optional. This is the fully qualified resource ID, which includes
        /// the resource groups and the instance name.
        /// </summary>
        public Uri ResourceUri
        {
            get { return this._resourceUri; }
            set { this._resourceUri = value; }
        }
        
        private string _tags;
        
        /// <summary>
        /// Optional. Contains the resource tags specified by the user.
        /// </summary>
        public string Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the UsageInstanceData class.
        /// </summary>
        public UsageInstanceData()
        {
        }
    }
    
    /// <summary>
    /// Describes a sample of the usageAggregation.
    /// </summary>
    public partial class UsageSample
    {
        private InfoField _infoFields;
        
        /// <summary>
        /// Optional. Key-value pairs of instance details (legacy format).
        /// </summary>
        public InfoField InfoFields
        {
            get { return this._infoFields; }
            set { this._infoFields = value; }
        }
        
        private UsageInstanceData _instanceData;
        
        /// <summary>
        /// Optional. Key-value pairs of instance details.
        /// </summary>
        public UsageInstanceData InstanceData
        {
            get { return this._instanceData; }
            set { this._instanceData = value; }
        }
        
        private string _meterCategory;
        
        /// <summary>
        /// Optional. Category of the consumed resource.
        /// </summary>
        public string MeterCategory
        {
            get { return this._meterCategory; }
            set { this._meterCategory = value; }
        }
        
        private Guid _meterId;
        
        /// <summary>
        /// Optional. Unique ID for the resource that was consumed (aka
        /// ResourceID).
        /// </summary>
        public Guid MeterId
        {
            get { return this._meterId; }
            set { this._meterId = value; }
        }
        
        private string _meterName;
        
        /// <summary>
        /// Optional. Friendly name of the resource being consumed.
        /// </summary>
        public string MeterName
        {
            get { return this._meterName; }
            set { this._meterName = value; }
        }
        
        private string _meterRegion;
        
        /// <summary>
        /// Optional. Region of the meterId used for billing purposes
        /// </summary>
        public string MeterRegion
        {
            get { return this._meterRegion; }
            set { this._meterRegion = value; }
        }
        
        private string _meterSubCategory;
        
        /// <summary>
        /// Optional. Sub-category of the consumed resource.
        /// </summary>
        public string MeterSubCategory
        {
            get { return this._meterSubCategory; }
            set { this._meterSubCategory = value; }
        }
        
        private decimal _quantity;
        
        /// <summary>
        /// Optional. The amount of the resource consumption that occurred in
        /// this time frame.
        /// </summary>
        public decimal Quantity
        {
            get { return this._quantity; }
            set { this._quantity = value; }
        }
        
        private string _unit;
        
        /// <summary>
        /// Optional. The unit in which the usage for this resource is being
        /// counted, e.g. Hours, GB.
        /// </summary>
        public string Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }
        
        private DateTime _usageEndTime;
        
        /// <summary>
        /// Optional. UTC end time for the usage bucket to which this usage
        /// aggregate belongs.
        /// </summary>
        public DateTime UsageEndTime
        {
            get { return this._usageEndTime; }
            set { this._usageEndTime = value; }
        }
        
        private DateTime _usageStartTime;
        
        /// <summary>
        /// Optional. UTC start time for the usage bucket to which this usage
        /// aggregate belongs.
        /// </summary>
        public DateTime UsageStartTime
        {
            get { return this._usageStartTime; }
            set { this._usageStartTime = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the UsageSample class.
        /// </summary>
        public UsageSample()
        {
        }
    }
}

namespace Microsoft.Commerce.UsageAggregates
{
    public static partial class UsageAggregationManagementClientExtensions
    {
    }
    
    public partial interface IUsageAggregationManagementClient : IDisposable
    {
        /// <summary>
        /// Gets the API version.
        /// </summary>
        string ApiVersion
        {
            get; 
        }
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationInitialTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationRetryTimeout
        {
            get; set; 
        }
        
        IUsageAggregationOperations UsageAggregates
        {
            get; 
        }
    }
    
    public partial class UsageAggregationManagementClient : ServiceClient<UsageAggregationManagementClient>, IUsageAggregationManagementClient
    {
        private string _apiVersion;
        
        /// <summary>
        /// Gets the API version.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
        }
        
        private Uri _baseUri;
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private int _longRunningOperationInitialTimeout;
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationInitialTimeout
        {
            get { return this._longRunningOperationInitialTimeout; }
            set { this._longRunningOperationInitialTimeout = value; }
        }
        
        private int _longRunningOperationRetryTimeout;
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationRetryTimeout
        {
            get { return this._longRunningOperationRetryTimeout; }
            set { this._longRunningOperationRetryTimeout = value; }
        }
        
        private IUsageAggregationOperations _usageAggregates;
        
        public virtual IUsageAggregationOperations UsageAggregates
        {
            get { return this._usageAggregates; }
        }
        
        /// <summary>
        /// Initializes a new instance of the UsageAggregationManagementClient
        /// class.
        /// </summary>
        public UsageAggregationManagementClient()
            : base()
        {
            this._usageAggregates = new UsageAggregationOperations(this);
            this._apiVersion = "2015-06-01-preview";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the UsageAggregationManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        public UsageAggregationManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the UsageAggregationManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        public UsageAggregationManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the UsageAggregationManagementClient
        /// class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public UsageAggregationManagementClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._usageAggregates = new UsageAggregationOperations(this);
            this._apiVersion = "2015-06-01-preview";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the UsageAggregationManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public UsageAggregationManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the UsageAggregationManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public UsageAggregationManagementClient(SubscriptionCloudCredentials credentials, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Clones properties from current instance to another
        /// UsageAggregationManagementClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of UsageAggregationManagementClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<UsageAggregationManagementClient> client)
        {
            base.Clone(client);
            
            if (client is UsageAggregationManagementClient)
            {
                UsageAggregationManagementClient clonedClient = ((UsageAggregationManagementClient)client);
                
                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;
                clonedClient._apiVersion = this._apiVersion;
                clonedClient._longRunningOperationInitialTimeout = this._longRunningOperationInitialTimeout;
                clonedClient._longRunningOperationRetryTimeout = this._longRunningOperationRetryTimeout;
                
                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }
        
        /// <summary>
        /// Parse enum values for type AggregationGranularity.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static AggregationGranularity ParseAggregationGranularity(string value)
        {
            if ("Daily".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return AggregationGranularity.Daily;
            }
            if ("Hourly".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return AggregationGranularity.Hourly;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type AggregationGranularity to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string AggregationGranularityToString(AggregationGranularity value)
        {
            if (value == AggregationGranularity.Daily)
            {
                return "Daily";
            }
            if (value == AggregationGranularity.Hourly)
            {
                return "Hourly";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
    
    public static partial class UsageAggregationOperationsExtensions
    {
        /// <summary>
        /// Query aggregate Azure subscription consumption data.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Commerce.UsageAggregates.IUsageAggregationOperations.
        /// </param>
        /// <param name='reportedStartTime'>
        /// Required. The start of the time range to retrieve data for.
        /// </param>
        /// <param name='reportedEndTime'>
        /// Required. The end of the time range to retrieve data for.
        /// </param>
        /// <param name='aggregationGranularity'>
        /// Required. Value is either daily (default) or hourly to tell the API
        /// how to return the results grouped by day or hour.
        /// </param>
        /// <param name='showDetails'>
        /// Required. When set to true (default), the aggregates are broken
        /// down into the instance metadata which is more granular.
        /// </param>
        /// <param name='continuationToken'>
        /// Optional. Retrieved from previous calls, this is the bookmakr used
        /// for progress when the responses are paged.
        /// </param>
        /// <returns>
        /// The Get UsageAggregates operation response.
        /// </returns>
        public static UsageAggregationGetResponse Get(this IUsageAggregationOperations operations, string reportedStartTime, string reportedEndTime, AggregationGranularity aggregationGranularity, bool showDetails, string continuationToken)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUsageAggregationOperations)s).GetAsync(reportedStartTime, reportedEndTime, aggregationGranularity, showDetails, continuationToken);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Query aggregate Azure subscription consumption data.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Commerce.UsageAggregates.IUsageAggregationOperations.
        /// </param>
        /// <param name='reportedStartTime'>
        /// Required. The start of the time range to retrieve data for.
        /// </param>
        /// <param name='reportedEndTime'>
        /// Required. The end of the time range to retrieve data for.
        /// </param>
        /// <param name='aggregationGranularity'>
        /// Required. Value is either daily (default) or hourly to tell the API
        /// how to return the results grouped by day or hour.
        /// </param>
        /// <param name='showDetails'>
        /// Required. When set to true (default), the aggregates are broken
        /// down into the instance metadata which is more granular.
        /// </param>
        /// <param name='continuationToken'>
        /// Optional. Retrieved from previous calls, this is the bookmakr used
        /// for progress when the responses are paged.
        /// </param>
        /// <returns>
        /// The Get UsageAggregates operation response.
        /// </returns>
        public static Task<UsageAggregationGetResponse> GetAsync(this IUsageAggregationOperations operations, string reportedStartTime, string reportedEndTime, AggregationGranularity aggregationGranularity, bool showDetails, string continuationToken)
        {
            return operations.GetAsync(reportedStartTime, reportedEndTime, aggregationGranularity, showDetails, continuationToken, CancellationToken.None);
        }
    }
    
    public partial interface IUsageAggregationOperations
    {
        /// <summary>
        /// Query aggregate Azure subscription consumption data.
        /// </summary>
        /// <param name='reportedStartTime'>
        /// The start of the time range to retrieve data for.
        /// </param>
        /// <param name='reportedEndTime'>
        /// The end of the time range to retrieve data for.
        /// </param>
        /// <param name='aggregationGranularity'>
        /// Value is either daily (default) or hourly to tell the API how to
        /// return the results grouped by day or hour.
        /// </param>
        /// <param name='showDetails'>
        /// When set to true (default), the aggregates are broken down into the
        /// instance metadata which is more granular.
        /// </param>
        /// <param name='continuationToken'>
        /// Retrieved from previous calls, this is the bookmakr used for
        /// progress when the responses are paged.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get UsageAggregates operation response.
        /// </returns>
        Task<UsageAggregationGetResponse> GetAsync(string reportedStartTime, string reportedEndTime, AggregationGranularity aggregationGranularity, bool showDetails, string continuationToken, CancellationToken cancellationToken);
    }
    
    internal partial class UsageAggregationOperations : IServiceOperations<UsageAggregationManagementClient>, IUsageAggregationOperations
    {
        /// <summary>
        /// Initializes a new instance of the UsageAggregationOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal UsageAggregationOperations(UsageAggregationManagementClient client)
        {
            this._client = client;
        }
        
        private UsageAggregationManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Commerce.UsageAggregates.UsageAggregationManagementClient.
        /// </summary>
        public UsageAggregationManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Query aggregate Azure subscription consumption data.
        /// </summary>
        /// <param name='reportedStartTime'>
        /// Required. The start of the time range to retrieve data for.
        /// </param>
        /// <param name='reportedEndTime'>
        /// Required. The end of the time range to retrieve data for.
        /// </param>
        /// <param name='aggregationGranularity'>
        /// Required. Value is either daily (default) or hourly to tell the API
        /// how to return the results grouped by day or hour.
        /// </param>
        /// <param name='showDetails'>
        /// Required. When set to true (default), the aggregates are broken
        /// down into the instance metadata which is more granular.
        /// </param>
        /// <param name='continuationToken'>
        /// Optional. Retrieved from previous calls, this is the bookmakr used
        /// for progress when the responses are paged.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get UsageAggregates operation response.
        /// </returns>
        public async Task<UsageAggregationGetResponse> GetAsync(string reportedStartTime, string reportedEndTime, AggregationGranularity aggregationGranularity, bool showDetails, string continuationToken, CancellationToken cancellationToken)
        {
            // Validate
            if (reportedStartTime == null)
            {
                throw new ArgumentNullException("reportedStartTime");
            }
            if (reportedEndTime == null)
            {
                throw new ArgumentNullException("reportedEndTime");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("reportedStartTime", reportedStartTime);
                tracingParameters.Add("reportedEndTime", reportedEndTime);
                tracingParameters.Add("aggregationGranularity", aggregationGranularity);
                tracingParameters.Add("showDetails", showDetails);
                tracingParameters.Add("continuationToken", continuationToken);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/Microsoft.Commerce/UsageAggregates";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-06-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UsageAggregationGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new UsageAggregationGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    UsageAggregation usageAggregationInstance = new UsageAggregation();
                                    result.UsageAggregations.Add(usageAggregationInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        usageAggregationInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        usageAggregationInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        UsageSample propertiesInstance = new UsageSample();
                                        usageAggregationInstance.Properties = propertiesInstance;
                                        
                                        JToken meterIdValue = propertiesValue["meterId"];
                                        if (meterIdValue != null && meterIdValue.Type != JTokenType.Null)
                                        {
                                            Guid meterIdInstance = Guid.Parse(((string)meterIdValue));
                                            propertiesInstance.MeterId = meterIdInstance;
                                        }
                                        
                                        JToken usageStartTimeValue = propertiesValue["usageStartTime"];
                                        if (usageStartTimeValue != null && usageStartTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime usageStartTimeInstance = ((DateTime)usageStartTimeValue);
                                            propertiesInstance.UsageStartTime = usageStartTimeInstance;
                                        }
                                        
                                        JToken usageEndTimeValue = propertiesValue["usageEndTime"];
                                        if (usageEndTimeValue != null && usageEndTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime usageEndTimeInstance = ((DateTime)usageEndTimeValue);
                                            propertiesInstance.UsageEndTime = usageEndTimeInstance;
                                        }
                                        
                                        JToken quantityValue = propertiesValue["quantity"];
                                        if (quantityValue != null && quantityValue.Type != JTokenType.Null)
                                        {
                                            decimal quantityInstance = ((decimal)quantityValue);
                                            propertiesInstance.Quantity = quantityInstance;
                                        }
                                        
                                        JToken unitValue = propertiesValue["unit"];
                                        if (unitValue != null && unitValue.Type != JTokenType.Null)
                                        {
                                            string unitInstance = ((string)unitValue);
                                            propertiesInstance.Unit = unitInstance;
                                        }
                                        
                                        JToken meterNameValue = propertiesValue["meterName"];
                                        if (meterNameValue != null && meterNameValue.Type != JTokenType.Null)
                                        {
                                            string meterNameInstance = ((string)meterNameValue);
                                            propertiesInstance.MeterName = meterNameInstance;
                                        }
                                        
                                        JToken meterCategoryValue = propertiesValue["meterCategory"];
                                        if (meterCategoryValue != null && meterCategoryValue.Type != JTokenType.Null)
                                        {
                                            string meterCategoryInstance = ((string)meterCategoryValue);
                                            propertiesInstance.MeterCategory = meterCategoryInstance;
                                        }
                                        
                                        JToken meterSubCategoryValue = propertiesValue["meterSubCategory"];
                                        if (meterSubCategoryValue != null && meterSubCategoryValue.Type != JTokenType.Null)
                                        {
                                            string meterSubCategoryInstance = ((string)meterSubCategoryValue);
                                            propertiesInstance.MeterSubCategory = meterSubCategoryInstance;
                                        }
                                        
                                        JToken meterRegionValue = propertiesValue["meterRegion"];
                                        if (meterRegionValue != null && meterRegionValue.Type != JTokenType.Null)
                                        {
                                            string meterRegionInstance = ((string)meterRegionValue);
                                            propertiesInstance.MeterRegion = meterRegionInstance;
                                        }
                                        
                                        JToken infoFieldsValue = propertiesValue["infoFields"];
                                        if (infoFieldsValue != null && infoFieldsValue.Type != JTokenType.Null)
                                        {
                                            InfoField infoFieldsInstance = new InfoField();
                                            propertiesInstance.InfoFields = infoFieldsInstance;
                                            
                                            JToken projectValue = infoFieldsValue["project"];
                                            if (projectValue != null && projectValue.Type != JTokenType.Null)
                                            {
                                                string projectInstance = ((string)projectValue);
                                                infoFieldsInstance.Project = projectInstance;
                                            }
                                        }
                                        
                                        JToken instanceDataValue = propertiesValue["instanceData"];
                                        if (instanceDataValue != null && instanceDataValue.Type != JTokenType.Null)
                                        {
                                            UsageInstanceData instanceDataInstance = new UsageInstanceData();
                                            propertiesInstance.InstanceData = instanceDataInstance;
                                            
                                            JToken resourceUriValue = instanceDataValue["resourceUri"];
                                            if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                            {
                                                Uri resourceUriInstance = TypeConversion.TryParseUri(((string)resourceUriValue));
                                                instanceDataInstance.ResourceUri = resourceUriInstance;
                                            }
                                            
                                            JToken tagsValue = instanceDataValue["tags"];
                                            if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                                            {
                                                string tagsInstance = ((string)tagsValue);
                                                instanceDataInstance.Tags = tagsInstance;
                                            }
                                            
                                            JToken locationValue = instanceDataValue["location"];
                                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                                            {
                                                string locationInstance = ((string)locationValue);
                                                instanceDataInstance.Location = locationInstance;
                                            }
                                            
                                            JToken additionalInfoValue = instanceDataValue["additionalInfo"];
                                            if (additionalInfoValue != null && additionalInfoValue.Type != JTokenType.Null)
                                            {
                                                string additionalInfoInstance = ((string)additionalInfoValue);
                                                instanceDataInstance.AdditionalInfo = additionalInfoInstance;
                                            }
                                            
                                            JToken partNumberValue = instanceDataValue["partNumber"];
                                            if (partNumberValue != null && partNumberValue.Type != JTokenType.Null)
                                            {
                                                string partNumberInstance = ((string)partNumberValue);
                                                instanceDataInstance.PartNumber = partNumberInstance;
                                            }
                                            
                                            JToken orderNumberValue = instanceDataValue["orderNumber"];
                                            if (orderNumberValue != null && orderNumberValue.Type != JTokenType.Null)
                                            {
                                                string orderNumberInstance = ((string)orderNumberValue);
                                                instanceDataInstance.OrderNumber = orderNumberInstance;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
