// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.WebSites;
using Microsoft.Azure.Management.WebSites.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.WebSites
{
    /// <summary>
    /// Operations for managing the server farm in a resource group.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    /// more information)
    /// </summary>
    internal partial class ServerFarmOperations : IServiceOperations<WebSiteManagementClient>, IServerFarmOperations
    {
        /// <summary>
        /// Initializes a new instance of the ServerFarmOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ServerFarmOperations(WebSiteManagementClient client)
        {
            this._client = client;
        }
        
        private WebSiteManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.WebSites.WebSiteManagementClient.
        /// </summary>
        public WebSiteManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace's Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Server Farm operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Server Farm operation response.
        /// </returns>
        public async Task<ServerFarmCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, ServerFarmCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ServerFarm == null)
            {
                throw new ArgumentNullException("parameters.ServerFarm");
            }
            if (parameters.ServerFarm.Location == null)
            {
                throw new ArgumentNullException("parameters.ServerFarm.Location");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/serverFarms/" + parameters.ServerFarm.Name.Trim() + "?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject serverFarmCreateOrUpdateParametersValue = new JObject();
                requestDoc = serverFarmCreateOrUpdateParametersValue;
                
                if (parameters.ServerFarm.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    serverFarmCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.ServerFarm.Properties.CurrentNumberOfWorkers != null)
                    {
                        propertiesValue["currentNumberOfWorkers"] = parameters.ServerFarm.Properties.CurrentNumberOfWorkers;
                    }
                    
                    if (parameters.ServerFarm.Properties.CurrentWorkerSize != null)
                    {
                        propertiesValue["currentWorkerSize"] = parameters.ServerFarm.Properties.CurrentWorkerSize.ToString();
                    }
                    
                    propertiesValue["numberOfWorkers"] = parameters.ServerFarm.Properties.NumberOfWorkers;
                    
                    if (parameters.ServerFarm.Properties.Sku != null)
                    {
                        propertiesValue["sku"] = parameters.ServerFarm.Properties.Sku;
                    }
                    
                    propertiesValue["workerSize"] = parameters.ServerFarm.Properties.WorkerSize.ToString();
                    
                    propertiesValue["status"] = parameters.ServerFarm.Properties.Status.ToString();
                    
                    if (parameters.ServerFarm.Properties.ProvisioningState != null)
                    {
                        propertiesValue["provisioningState"] = parameters.ServerFarm.Properties.ProvisioningState;
                    }
                }
                
                if (parameters.ServerFarm.Id != null)
                {
                    serverFarmCreateOrUpdateParametersValue["id"] = parameters.ServerFarm.Id;
                }
                
                if (parameters.ServerFarm.Name != null)
                {
                    serverFarmCreateOrUpdateParametersValue["name"] = parameters.ServerFarm.Name;
                }
                
                serverFarmCreateOrUpdateParametersValue["location"] = parameters.ServerFarm.Location;
                
                JObject tagsDictionary = new JObject();
                if (parameters.ServerFarm.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.ServerFarm.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                serverFarmCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                httpRequest.Content.Headers.ContentType.CharSet = "utf-8";
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServerFarmCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ServerFarmCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    JToken serverFarmValue = responseDoc["ServerFarm"];
                    if (serverFarmValue != null && serverFarmValue.Type != JTokenType.Null)
                    {
                        ServerFarmCreateOrUpdateResponse serverFarmInstance = new ServerFarmCreateOrUpdateResponse();
                        
                        ServerFarm serverFarmInstance2 = new ServerFarm();
                        result.ServerFarm = serverFarmInstance2;
                        
                        JToken propertiesValue2 = serverFarmValue["properties"];
                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                        {
                            ServerFarmProperties propertiesInstance = new ServerFarmProperties();
                            serverFarmInstance2.Properties = propertiesInstance;
                            
                            JToken currentNumberOfWorkersValue = propertiesValue2["currentNumberOfWorkers"];
                            if (currentNumberOfWorkersValue != null && currentNumberOfWorkersValue.Type != JTokenType.Null)
                            {
                                int currentNumberOfWorkersInstance = ((int)currentNumberOfWorkersValue);
                                propertiesInstance.CurrentNumberOfWorkers = currentNumberOfWorkersInstance;
                            }
                            
                            JToken currentWorkerSizeValue = propertiesValue2["currentWorkerSize"];
                            if (currentWorkerSizeValue != null && currentWorkerSizeValue.Type != JTokenType.Null)
                            {
                                ServerFarmWorkerSize currentWorkerSizeInstance = ((ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), ((string)currentWorkerSizeValue), true));
                                propertiesInstance.CurrentWorkerSize = currentWorkerSizeInstance;
                            }
                            
                            JToken numberOfWorkersValue = propertiesValue2["numberOfWorkers"];
                            if (numberOfWorkersValue != null && numberOfWorkersValue.Type != JTokenType.Null)
                            {
                                int numberOfWorkersInstance = ((int)numberOfWorkersValue);
                                propertiesInstance.NumberOfWorkers = numberOfWorkersInstance;
                            }
                            
                            JToken skuValue = propertiesValue2["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                string skuInstance = ((string)skuValue);
                                propertiesInstance.Sku = skuInstance;
                            }
                            
                            JToken workerSizeValue = propertiesValue2["workerSize"];
                            if (workerSizeValue != null && workerSizeValue.Type != JTokenType.Null)
                            {
                                ServerFarmWorkerSize workerSizeInstance = ((ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), ((string)workerSizeValue), true));
                                propertiesInstance.WorkerSize = workerSizeInstance;
                            }
                            
                            JToken statusValue = propertiesValue2["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                ServerFarmStatus statusInstance = ((ServerFarmStatus)Enum.Parse(typeof(ServerFarmStatus), ((string)statusValue), true));
                                propertiesInstance.Status = statusInstance;
                            }
                            
                            JToken provisioningStateValue = propertiesValue2["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                        }
                        
                        JToken idValue = serverFarmValue["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            serverFarmInstance2.Id = idInstance;
                        }
                        
                        JToken nameValue = serverFarmValue["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            serverFarmInstance2.Name = nameInstance;
                        }
                        
                        JToken locationValue = serverFarmValue["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            serverFarmInstance2.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)serverFarmValue["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                serverFarmInstance2.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serverFarmName'>
        /// Required. The name of the server farm.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string resourceGroupName, string serverFarmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverFarmName == null)
            {
                throw new ArgumentNullException("serverFarmName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverFarmName", serverFarmName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/serverFarms/" + serverFarmName.Trim() + "?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace's Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='serverFarmName'>
        /// Required. The name of the server farm.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Server Farm operation response.
        /// </returns>
        public async Task<ServerFarmGetResponse> GetAsync(string resourceGroupName, string serverFarmName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverFarmName == null)
            {
                throw new ArgumentNullException("serverFarmName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverFarmName", serverFarmName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/serverFarms/" + serverFarmName.Trim() + "?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServerFarmGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ServerFarmGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        ServerFarm serverFarmInstance = new ServerFarm();
                        result.ServerFarm = serverFarmInstance;
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            ServerFarmProperties propertiesInstance = new ServerFarmProperties();
                            serverFarmInstance.Properties = propertiesInstance;
                            
                            JToken currentNumberOfWorkersValue = propertiesValue["currentNumberOfWorkers"];
                            if (currentNumberOfWorkersValue != null && currentNumberOfWorkersValue.Type != JTokenType.Null)
                            {
                                int currentNumberOfWorkersInstance = ((int)currentNumberOfWorkersValue);
                                propertiesInstance.CurrentNumberOfWorkers = currentNumberOfWorkersInstance;
                            }
                            
                            JToken currentWorkerSizeValue = propertiesValue["currentWorkerSize"];
                            if (currentWorkerSizeValue != null && currentWorkerSizeValue.Type != JTokenType.Null)
                            {
                                ServerFarmWorkerSize currentWorkerSizeInstance = ((ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), ((string)currentWorkerSizeValue), true));
                                propertiesInstance.CurrentWorkerSize = currentWorkerSizeInstance;
                            }
                            
                            JToken numberOfWorkersValue = propertiesValue["numberOfWorkers"];
                            if (numberOfWorkersValue != null && numberOfWorkersValue.Type != JTokenType.Null)
                            {
                                int numberOfWorkersInstance = ((int)numberOfWorkersValue);
                                propertiesInstance.NumberOfWorkers = numberOfWorkersInstance;
                            }
                            
                            JToken skuValue = propertiesValue["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                string skuInstance = ((string)skuValue);
                                propertiesInstance.Sku = skuInstance;
                            }
                            
                            JToken workerSizeValue = propertiesValue["workerSize"];
                            if (workerSizeValue != null && workerSizeValue.Type != JTokenType.Null)
                            {
                                ServerFarmWorkerSize workerSizeInstance = ((ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), ((string)workerSizeValue), true));
                                propertiesInstance.WorkerSize = workerSizeInstance;
                            }
                            
                            JToken statusValue = propertiesValue["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                ServerFarmStatus statusInstance = ((ServerFarmStatus)Enum.Parse(typeof(ServerFarmStatus), ((string)statusValue), true));
                                propertiesInstance.Status = statusInstance;
                            }
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            serverFarmInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            serverFarmInstance.Name = nameInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            serverFarmInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                serverFarmInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace's Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Server Farm operation response.
        /// </returns>
        public async Task<ServerFarmListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/serverFarms?";
            url = url + "api-version=2014-04-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServerFarmListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ServerFarmListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken serverFarmsArray = responseDoc;
                        if (serverFarmsArray != null && serverFarmsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken serverFarmsValue in ((JArray)serverFarmsArray))
                            {
                                ServerFarm serverFarmInstance = new ServerFarm();
                                result.ServerFarms.Add(serverFarmInstance);
                                
                                JToken propertiesValue = serverFarmsValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    ServerFarmProperties propertiesInstance = new ServerFarmProperties();
                                    serverFarmInstance.Properties = propertiesInstance;
                                    
                                    JToken currentNumberOfWorkersValue = propertiesValue["currentNumberOfWorkers"];
                                    if (currentNumberOfWorkersValue != null && currentNumberOfWorkersValue.Type != JTokenType.Null)
                                    {
                                        int currentNumberOfWorkersInstance = ((int)currentNumberOfWorkersValue);
                                        propertiesInstance.CurrentNumberOfWorkers = currentNumberOfWorkersInstance;
                                    }
                                    
                                    JToken currentWorkerSizeValue = propertiesValue["currentWorkerSize"];
                                    if (currentWorkerSizeValue != null && currentWorkerSizeValue.Type != JTokenType.Null)
                                    {
                                        ServerFarmWorkerSize currentWorkerSizeInstance = ((ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), ((string)currentWorkerSizeValue), true));
                                        propertiesInstance.CurrentWorkerSize = currentWorkerSizeInstance;
                                    }
                                    
                                    JToken numberOfWorkersValue = propertiesValue["numberOfWorkers"];
                                    if (numberOfWorkersValue != null && numberOfWorkersValue.Type != JTokenType.Null)
                                    {
                                        int numberOfWorkersInstance = ((int)numberOfWorkersValue);
                                        propertiesInstance.NumberOfWorkers = numberOfWorkersInstance;
                                    }
                                    
                                    JToken skuValue = propertiesValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        string skuInstance = ((string)skuValue);
                                        propertiesInstance.Sku = skuInstance;
                                    }
                                    
                                    JToken workerSizeValue = propertiesValue["workerSize"];
                                    if (workerSizeValue != null && workerSizeValue.Type != JTokenType.Null)
                                    {
                                        ServerFarmWorkerSize workerSizeInstance = ((ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), ((string)workerSizeValue), true));
                                        propertiesInstance.WorkerSize = workerSizeInstance;
                                    }
                                    
                                    JToken statusValue = propertiesValue["status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        ServerFarmStatus statusInstance = ((ServerFarmStatus)Enum.Parse(typeof(ServerFarmStatus), ((string)statusValue), true));
                                        propertiesInstance.Status = statusInstance;
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                }
                                
                                JToken idValue = serverFarmsValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    serverFarmInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = serverFarmsValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    serverFarmInstance.Name = nameInstance;
                                }
                                
                                JToken locationValue = serverFarmsValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    serverFarmInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)serverFarmsValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        serverFarmInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
