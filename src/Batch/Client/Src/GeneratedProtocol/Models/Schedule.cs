// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System.Linq;

    /// <summary>
    /// The schedule according to which jobs will be created
    /// </summary>
    public partial class Schedule
    {
        /// <summary>
        /// Initializes a new instance of the Schedule class.
        /// </summary>
        public Schedule() { }

        /// <summary>
        /// Initializes a new instance of the Schedule class.
        /// </summary>
        /// <param name="doNotRunUntil">The earliest time at which any job may
        /// be created under this job schedule.</param>
        /// <param name="doNotRunAfter">A time after which no job will be
        /// created under this job schedule. The schedule will move to the
        /// completed state as soon as this deadline is past and there is no
        /// active job under this job schedule.</param>
        /// <param name="startWindow">The time interval, starting from the
        /// time at which the schedule indicates a job should be created,
        /// within which a job must be created.</param>
        /// <param name="recurrenceInterval">The time interval between the
        /// start times of two successive jobs under the job schedule. A job
        /// schedule can have at most one active job under it at any given
        /// time.</param>
        public Schedule(System.DateTime? doNotRunUntil = default(System.DateTime?), System.DateTime? doNotRunAfter = default(System.DateTime?), System.TimeSpan? startWindow = default(System.TimeSpan?), System.TimeSpan? recurrenceInterval = default(System.TimeSpan?))
        {
            DoNotRunUntil = doNotRunUntil;
            DoNotRunAfter = doNotRunAfter;
            StartWindow = startWindow;
            RecurrenceInterval = recurrenceInterval;
        }

        /// <summary>
        /// Gets or sets the earliest time at which any job may be created
        /// under this job schedule.
        /// </summary>
        /// <remarks>
        /// If you do not specify a doNotRunUntil time, the schedule becomes
        /// ready to create jobs immediately.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "doNotRunUntil")]
        public System.DateTime? DoNotRunUntil { get; set; }

        /// <summary>
        /// Gets or sets a time after which no job will be created under this
        /// job schedule. The schedule will move to the completed state as
        /// soon as this deadline is past and there is no active job under
        /// this job schedule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "doNotRunAfter")]
        public System.DateTime? DoNotRunAfter { get; set; }

        /// <summary>
        /// Gets or sets the time interval, starting from the time at which
        /// the schedule indicates a job should be created, within which a
        /// job must be created.
        /// </summary>
        /// <remarks>
        /// If a job is not created within the startWindow interval, then the
        /// 'opportunity' is lost; no job will be created until the next
        /// recurrence of the schedule.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startWindow")]
        public System.TimeSpan? StartWindow { get; set; }

        /// <summary>
        /// Gets or sets the time interval between the start times of two
        /// successive jobs under the job schedule. A job schedule can have
        /// at most one active job under it at any given time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recurrenceInterval")]
        public System.TimeSpan? RecurrenceInterval { get; set; }

    }
}
