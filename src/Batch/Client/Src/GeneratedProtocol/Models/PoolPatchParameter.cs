// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters for a CloudPoolOperations.Patch request.
    /// </summary>
    public partial class PoolPatchParameter
    {
        /// <summary>
        /// Initializes a new instance of the PoolPatchParameter class.
        /// </summary>
        public PoolPatchParameter() { }

        /// <summary>
        /// Initializes a new instance of the PoolPatchParameter class.
        /// </summary>
        /// <param name="startTask">A task to run on each compute node as it
        /// joins the pool.</param>
        /// <param name="certificateReferences">A list of certificates to be
        /// installed on each compute node in the pool.</param>
        /// <param name="applicationPackageReferences">A list of application
        /// packages to be installed on each compute node in the pool.</param>
        /// <param name="metadata">A list of name-value pairs associated with
        /// the pool as metadata.</param>
        public PoolPatchParameter(StartTask startTask = default(StartTask), System.Collections.Generic.IList<CertificateReference> certificateReferences = default(System.Collections.Generic.IList<CertificateReference>), System.Collections.Generic.IList<ApplicationPackageReference> applicationPackageReferences = default(System.Collections.Generic.IList<ApplicationPackageReference>), System.Collections.Generic.IList<MetadataItem> metadata = default(System.Collections.Generic.IList<MetadataItem>))
        {
            StartTask = startTask;
            CertificateReferences = certificateReferences;
            ApplicationPackageReferences = applicationPackageReferences;
            Metadata = metadata;
        }

        /// <summary>
        /// Gets or sets a task to run on each compute node as it joins the
        /// pool.
        /// </summary>
        /// <remarks>
        /// If omitted, any existing start task is left unchanged.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTask")]
        public StartTask StartTask { get; set; }

        /// <summary>
        /// Gets or sets a list of certificates to be installed on each
        /// compute node in the pool.
        /// </summary>
        /// <remarks>
        /// If omitted, any existing certificate references are left unchanged.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificateReferences")]
        public System.Collections.Generic.IList<CertificateReference> CertificateReferences { get; set; }

        /// <summary>
        /// Gets or sets a list of application packages to be installed on
        /// each compute node in the pool.
        /// </summary>
        /// <remarks>
        /// If omitted, any existing application package references are left
        /// unchanged.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationPackageReferences")]
        public System.Collections.Generic.IList<ApplicationPackageReference> ApplicationPackageReferences { get; set; }

        /// <summary>
        /// Gets or sets a list of name-value pairs associated with the pool
        /// as metadata.
        /// </summary>
        /// <remarks>
        /// If omitted, any existing metadata is left unchanged.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata")]
        public System.Collections.Generic.IList<MetadataItem> Metadata { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.StartTask != null)
            {
                this.StartTask.Validate();
            }
            if (this.CertificateReferences != null)
            {
                foreach (var element in this.CertificateReferences)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ApplicationPackageReferences != null)
            {
                foreach (var element1 in this.ApplicationPackageReferences)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.Metadata != null)
            {
                foreach (var element2 in this.Metadata)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
