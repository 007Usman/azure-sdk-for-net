// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.DataFactories;
using Microsoft.Azure.Management.DataFactories.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataFactories
{
    /// <summary>
    /// Operations for managing data factory linkedServices.
    /// </summary>
    internal partial class LinkedServiceOperations : IServiceOperations<DataPipelineManagementClient>, ILinkedServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the LinkedServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal LinkedServiceOperations(DataPipelineManagementClient client)
        {
            this._client = client;
        }
        
        private DataPipelineManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataFactories.DataPipelineManagementClient.
        /// </summary>
        public DataPipelineManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create or update a data factory linkedService.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a data
        /// factory linkedService.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update data factory linkedService operation response.
        /// </returns>
        public async Task<LinkedServiceCreateOrUpdateResponse> BeginCreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, LinkedServiceCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginCreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/linkedservices/" + (parameters.LinkedService.Name != null ? parameters.LinkedService.Name.Trim() : "") + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject linkedServiceCreateOrUpdateParametersValue = new JObject();
                requestDoc = linkedServiceCreateOrUpdateParametersValue;
                
                if (parameters.LinkedService != null)
                {
                    if (parameters.LinkedService.Name != null)
                    {
                        linkedServiceCreateOrUpdateParametersValue["name"] = parameters.LinkedService.Name;
                    }
                    
                    if (parameters.LinkedService.Properties != null)
                    {
                        JObject propertiesValue = new JObject();
                        linkedServiceCreateOrUpdateParametersValue["properties"] = propertiesValue;
                        if (parameters.LinkedService.Properties is AzureSqlLinkedService)
                        {
                            propertiesValue["type"] = "AzureSqlLinkedService";
                            AzureSqlLinkedService derived = ((AzureSqlLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["connectionString"] = derived.ConnectionString;
                            
                            if (derived.Description != null)
                            {
                                propertiesValue["description"] = derived.Description;
                            }
                            
                            if (derived.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived.ProvisioningState;
                            }
                            
                            if (derived.HubName != null)
                            {
                                propertiesValue["hubName"] = derived.HubName;
                            }
                            
                            if (derived.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is AzureStorageLinkedService)
                        {
                            propertiesValue["type"] = "AzureStorageLinkedService";
                            AzureStorageLinkedService derived2 = ((AzureStorageLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["connectionString"] = derived2.ConnectionString;
                            
                            if (derived2.Description != null)
                            {
                                propertiesValue["description"] = derived2.Description;
                            }
                            
                            if (derived2.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived2.ProvisioningState;
                            }
                            
                            if (derived2.HubName != null)
                            {
                                propertiesValue["hubName"] = derived2.HubName;
                            }
                            
                            if (derived2.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived2.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is CustomLinkedService)
                        {
                            propertiesValue["type"] = "CustomLinkedService";
                            CustomLinkedService derived3 = ((CustomLinkedService)parameters.LinkedService.Properties);
                            
                            if (derived3.ExtendedProperties != null)
                            {
                                if (derived3.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)derived3.ExtendedProperties).IsInitialized)
                                {
                                    JObject extendedPropertiesDictionary = new JObject();
                                    foreach (KeyValuePair<string, string> pair in derived3.ExtendedProperties)
                                    {
                                        string extendedPropertiesKey = pair.Key;
                                        string extendedPropertiesValue = pair.Value;
                                        extendedPropertiesDictionary[extendedPropertiesKey] = extendedPropertiesValue;
                                    }
                                    propertiesValue["extendedProperties"] = extendedPropertiesDictionary;
                                }
                            }
                            
                            if (derived3.Description != null)
                            {
                                propertiesValue["description"] = derived3.Description;
                            }
                            
                            if (derived3.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived3.ProvisioningState;
                            }
                            
                            if (derived3.HubName != null)
                            {
                                propertiesValue["hubName"] = derived3.HubName;
                            }
                            
                            if (derived3.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived3.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is HDInsightBYOCLinkedService)
                        {
                            propertiesValue["type"] = "HDInsightBYOCLinkedService";
                            HDInsightBYOCLinkedService derived4 = ((HDInsightBYOCLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["clusterUri"] = derived4.ClusterUri;
                            
                            propertiesValue["userName"] = derived4.UserName;
                            
                            propertiesValue["password"] = derived4.Password;
                            
                            if (derived4.LinkedServiceName != null)
                            {
                                propertiesValue["linkedServiceName"] = derived4.LinkedServiceName;
                            }
                            
                            if (derived4.Description != null)
                            {
                                propertiesValue["description"] = derived4.Description;
                            }
                            
                            if (derived4.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived4.ProvisioningState;
                            }
                            
                            if (derived4.HubName != null)
                            {
                                propertiesValue["hubName"] = derived4.HubName;
                            }
                            
                            if (derived4.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived4.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is HDInsightOnDemandLinkedService)
                        {
                            propertiesValue["type"] = "HDInsightOnDemandLinkedService";
                            HDInsightOnDemandLinkedService derived5 = ((HDInsightOnDemandLinkedService)parameters.LinkedService.Properties);
                            
                            if (derived5.Version != null)
                            {
                                propertiesValue["version"] = derived5.Version;
                            }
                            
                            propertiesValue["clusterSize"] = derived5.ClusterSize;
                            
                            propertiesValue["timeToLive"] = derived5.TimeToLive.ToString();
                            
                            propertiesValue["linkedServiceName"] = derived5.LinkedServiceName;
                            
                            propertiesValue["jobsContainer"] = derived5.JobsContainer;
                            
                            if (derived5.HiveCustomLibrariesContainer != null)
                            {
                                propertiesValue["hiveCustomLibrariesContainer"] = derived5.HiveCustomLibrariesContainer;
                            }
                            
                            if (derived5.Description != null)
                            {
                                propertiesValue["description"] = derived5.Description;
                            }
                            
                            if (derived5.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived5.ProvisioningState;
                            }
                            
                            if (derived5.HubName != null)
                            {
                                propertiesValue["hubName"] = derived5.HubName;
                            }
                            
                            if (derived5.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived5.ErrorMessage;
                            }
                        }
                        if (parameters.LinkedService.Properties is OnPremisesSqlLinkedService)
                        {
                            propertiesValue["type"] = "OnPremisesSqlLinkedService";
                            OnPremisesSqlLinkedService derived6 = ((OnPremisesSqlLinkedService)parameters.LinkedService.Properties);
                            
                            propertiesValue["connectionString"] = derived6.ConnectionString;
                            
                            propertiesValue["gatewayName"] = derived6.GatewayName;
                            
                            propertiesValue["gatewayLocation"] = derived6.GatewayLocation;
                            
                            if (derived6.UserName != null)
                            {
                                propertiesValue["userName"] = derived6.UserName;
                            }
                            
                            if (derived6.Password != null)
                            {
                                propertiesValue["password"] = derived6.Password;
                            }
                            
                            if (derived6.Description != null)
                            {
                                propertiesValue["description"] = derived6.Description;
                            }
                            
                            if (derived6.ProvisioningState != null)
                            {
                                propertiesValue["provisioningState"] = derived6.ProvisioningState;
                            }
                            
                            if (derived6.HubName != null)
                            {
                                propertiesValue["hubName"] = derived6.HubName;
                            }
                            
                            if (derived6.ErrorMessage != null)
                            {
                                propertiesValue["errorMessage"] = derived6.ErrorMessage;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LinkedServiceCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new LinkedServiceCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        LinkedService linkedServiceInstance = new LinkedService();
                        result.LinkedService = linkedServiceInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            linkedServiceInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue2 = responseDoc["properties"];
                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                        {
                            string typeName = ((string)propertiesValue2["type"]);
                            if (typeName == "AzureSqlLinkedService")
                            {
                                AzureSqlLinkedService azureSqlLinkedServiceInstance = new AzureSqlLinkedService();
                                
                                JToken connectionStringValue = propertiesValue2["connectionString"];
                                if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance = ((string)connectionStringValue);
                                    azureSqlLinkedServiceInstance.ConnectionString = connectionStringInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue2["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    azureSqlLinkedServiceInstance.Description = descriptionInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    azureSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken hubNameValue = propertiesValue2["hubName"];
                                if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                {
                                    string hubNameInstance = ((string)hubNameValue);
                                    azureSqlLinkedServiceInstance.HubName = hubNameInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue2["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    azureSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance;
                                }
                                linkedServiceInstance.Properties = azureSqlLinkedServiceInstance;
                            }
                            if (typeName == "AzureStorageLinkedService")
                            {
                                AzureStorageLinkedService azureStorageLinkedServiceInstance = new AzureStorageLinkedService();
                                
                                JToken connectionStringValue2 = propertiesValue2["connectionString"];
                                if (connectionStringValue2 != null && connectionStringValue2.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance2 = ((string)connectionStringValue2);
                                    azureStorageLinkedServiceInstance.ConnectionString = connectionStringInstance2;
                                }
                                
                                JToken descriptionValue2 = propertiesValue2["description"];
                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                {
                                    string descriptionInstance2 = ((string)descriptionValue2);
                                    azureStorageLinkedServiceInstance.Description = descriptionInstance2;
                                }
                                
                                JToken provisioningStateValue2 = propertiesValue2["provisioningState"];
                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                    azureStorageLinkedServiceInstance.ProvisioningState = provisioningStateInstance2;
                                }
                                
                                JToken hubNameValue2 = propertiesValue2["hubName"];
                                if (hubNameValue2 != null && hubNameValue2.Type != JTokenType.Null)
                                {
                                    string hubNameInstance2 = ((string)hubNameValue2);
                                    azureStorageLinkedServiceInstance.HubName = hubNameInstance2;
                                }
                                
                                JToken errorMessageValue2 = propertiesValue2["errorMessage"];
                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                    azureStorageLinkedServiceInstance.ErrorMessage = errorMessageInstance2;
                                }
                                linkedServiceInstance.Properties = azureStorageLinkedServiceInstance;
                            }
                            if (typeName == "CustomLinkedService")
                            {
                                CustomLinkedService customLinkedServiceInstance = new CustomLinkedService();
                                
                                JToken extendedPropertiesSequenceElement = ((JToken)propertiesValue2["extendedProperties"]);
                                if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in extendedPropertiesSequenceElement)
                                    {
                                        string extendedPropertiesKey2 = ((string)property.Name);
                                        string extendedPropertiesValue2 = ((string)property.Value);
                                        customLinkedServiceInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                    }
                                }
                                
                                JToken descriptionValue3 = propertiesValue2["description"];
                                if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                {
                                    string descriptionInstance3 = ((string)descriptionValue3);
                                    customLinkedServiceInstance.Description = descriptionInstance3;
                                }
                                
                                JToken provisioningStateValue3 = propertiesValue2["provisioningState"];
                                if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                    customLinkedServiceInstance.ProvisioningState = provisioningStateInstance3;
                                }
                                
                                JToken hubNameValue3 = propertiesValue2["hubName"];
                                if (hubNameValue3 != null && hubNameValue3.Type != JTokenType.Null)
                                {
                                    string hubNameInstance3 = ((string)hubNameValue3);
                                    customLinkedServiceInstance.HubName = hubNameInstance3;
                                }
                                
                                JToken errorMessageValue3 = propertiesValue2["errorMessage"];
                                if (errorMessageValue3 != null && errorMessageValue3.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance3 = ((string)errorMessageValue3);
                                    customLinkedServiceInstance.ErrorMessage = errorMessageInstance3;
                                }
                                linkedServiceInstance.Properties = customLinkedServiceInstance;
                            }
                            if (typeName == "HDInsightBYOCLinkedService")
                            {
                                HDInsightBYOCLinkedService hDInsightBYOCLinkedServiceInstance = new HDInsightBYOCLinkedService();
                                
                                JToken clusterUriValue = propertiesValue2["clusterUri"];
                                if (clusterUriValue != null && clusterUriValue.Type != JTokenType.Null)
                                {
                                    string clusterUriInstance = ((string)clusterUriValue);
                                    hDInsightBYOCLinkedServiceInstance.ClusterUri = clusterUriInstance;
                                }
                                
                                JToken userNameValue = propertiesValue2["userName"];
                                if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                {
                                    string userNameInstance = ((string)userNameValue);
                                    hDInsightBYOCLinkedServiceInstance.UserName = userNameInstance;
                                }
                                
                                JToken passwordValue = propertiesValue2["password"];
                                if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                {
                                    string passwordInstance = ((string)passwordValue);
                                    hDInsightBYOCLinkedServiceInstance.Password = passwordInstance;
                                }
                                
                                JToken linkedServiceNameValue = propertiesValue2["linkedServiceName"];
                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                {
                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                    hDInsightBYOCLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance;
                                }
                                
                                JToken descriptionValue4 = propertiesValue2["description"];
                                if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                {
                                    string descriptionInstance4 = ((string)descriptionValue4);
                                    hDInsightBYOCLinkedServiceInstance.Description = descriptionInstance4;
                                }
                                
                                JToken provisioningStateValue4 = propertiesValue2["provisioningState"];
                                if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                    hDInsightBYOCLinkedServiceInstance.ProvisioningState = provisioningStateInstance4;
                                }
                                
                                JToken hubNameValue4 = propertiesValue2["hubName"];
                                if (hubNameValue4 != null && hubNameValue4.Type != JTokenType.Null)
                                {
                                    string hubNameInstance4 = ((string)hubNameValue4);
                                    hDInsightBYOCLinkedServiceInstance.HubName = hubNameInstance4;
                                }
                                
                                JToken errorMessageValue4 = propertiesValue2["errorMessage"];
                                if (errorMessageValue4 != null && errorMessageValue4.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance4 = ((string)errorMessageValue4);
                                    hDInsightBYOCLinkedServiceInstance.ErrorMessage = errorMessageInstance4;
                                }
                                linkedServiceInstance.Properties = hDInsightBYOCLinkedServiceInstance;
                            }
                            if (typeName == "HDInsightOnDemandLinkedService")
                            {
                                HDInsightOnDemandLinkedService hDInsightOnDemandLinkedServiceInstance = new HDInsightOnDemandLinkedService();
                                
                                JToken versionValue = propertiesValue2["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    hDInsightOnDemandLinkedServiceInstance.Version = versionInstance;
                                }
                                
                                JToken clusterSizeValue = propertiesValue2["clusterSize"];
                                if (clusterSizeValue != null && clusterSizeValue.Type != JTokenType.Null)
                                {
                                    int clusterSizeInstance = ((int)clusterSizeValue);
                                    hDInsightOnDemandLinkedServiceInstance.ClusterSize = clusterSizeInstance;
                                }
                                
                                JToken timeToLiveValue = propertiesValue2["timeToLive"];
                                if (timeToLiveValue != null && timeToLiveValue.Type != JTokenType.Null)
                                {
                                    TimeSpan timeToLiveInstance = TimeSpan.Parse(((string)timeToLiveValue), CultureInfo.InvariantCulture);
                                    hDInsightOnDemandLinkedServiceInstance.TimeToLive = timeToLiveInstance;
                                }
                                
                                JToken linkedServiceNameValue2 = propertiesValue2["linkedServiceName"];
                                if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                {
                                    string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                    hDInsightOnDemandLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance2;
                                }
                                
                                JToken jobsContainerValue = propertiesValue2["jobsContainer"];
                                if (jobsContainerValue != null && jobsContainerValue.Type != JTokenType.Null)
                                {
                                    string jobsContainerInstance = ((string)jobsContainerValue);
                                    hDInsightOnDemandLinkedServiceInstance.JobsContainer = jobsContainerInstance;
                                }
                                
                                JToken hiveCustomLibrariesContainerValue = propertiesValue2["hiveCustomLibrariesContainer"];
                                if (hiveCustomLibrariesContainerValue != null && hiveCustomLibrariesContainerValue.Type != JTokenType.Null)
                                {
                                    string hiveCustomLibrariesContainerInstance = ((string)hiveCustomLibrariesContainerValue);
                                    hDInsightOnDemandLinkedServiceInstance.HiveCustomLibrariesContainer = hiveCustomLibrariesContainerInstance;
                                }
                                
                                JToken descriptionValue5 = propertiesValue2["description"];
                                if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                {
                                    string descriptionInstance5 = ((string)descriptionValue5);
                                    hDInsightOnDemandLinkedServiceInstance.Description = descriptionInstance5;
                                }
                                
                                JToken provisioningStateValue5 = propertiesValue2["provisioningState"];
                                if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                    hDInsightOnDemandLinkedServiceInstance.ProvisioningState = provisioningStateInstance5;
                                }
                                
                                JToken hubNameValue5 = propertiesValue2["hubName"];
                                if (hubNameValue5 != null && hubNameValue5.Type != JTokenType.Null)
                                {
                                    string hubNameInstance5 = ((string)hubNameValue5);
                                    hDInsightOnDemandLinkedServiceInstance.HubName = hubNameInstance5;
                                }
                                
                                JToken errorMessageValue5 = propertiesValue2["errorMessage"];
                                if (errorMessageValue5 != null && errorMessageValue5.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance5 = ((string)errorMessageValue5);
                                    hDInsightOnDemandLinkedServiceInstance.ErrorMessage = errorMessageInstance5;
                                }
                                linkedServiceInstance.Properties = hDInsightOnDemandLinkedServiceInstance;
                            }
                            if (typeName == "OnPremisesSqlLinkedService")
                            {
                                OnPremisesSqlLinkedService onPremisesSqlLinkedServiceInstance = new OnPremisesSqlLinkedService();
                                
                                JToken connectionStringValue3 = propertiesValue2["connectionString"];
                                if (connectionStringValue3 != null && connectionStringValue3.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance3 = ((string)connectionStringValue3);
                                    onPremisesSqlLinkedServiceInstance.ConnectionString = connectionStringInstance3;
                                }
                                
                                JToken gatewayNameValue = propertiesValue2["gatewayName"];
                                if (gatewayNameValue != null && gatewayNameValue.Type != JTokenType.Null)
                                {
                                    string gatewayNameInstance = ((string)gatewayNameValue);
                                    onPremisesSqlLinkedServiceInstance.GatewayName = gatewayNameInstance;
                                }
                                
                                JToken gatewayLocationValue = propertiesValue2["gatewayLocation"];
                                if (gatewayLocationValue != null && gatewayLocationValue.Type != JTokenType.Null)
                                {
                                    string gatewayLocationInstance = ((string)gatewayLocationValue);
                                    onPremisesSqlLinkedServiceInstance.GatewayLocation = gatewayLocationInstance;
                                }
                                
                                JToken userNameValue2 = propertiesValue2["userName"];
                                if (userNameValue2 != null && userNameValue2.Type != JTokenType.Null)
                                {
                                    string userNameInstance2 = ((string)userNameValue2);
                                    onPremisesSqlLinkedServiceInstance.UserName = userNameInstance2;
                                }
                                
                                JToken passwordValue2 = propertiesValue2["password"];
                                if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                {
                                    string passwordInstance2 = ((string)passwordValue2);
                                    onPremisesSqlLinkedServiceInstance.Password = passwordInstance2;
                                }
                                
                                JToken descriptionValue6 = propertiesValue2["description"];
                                if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                {
                                    string descriptionInstance6 = ((string)descriptionValue6);
                                    onPremisesSqlLinkedServiceInstance.Description = descriptionInstance6;
                                }
                                
                                JToken provisioningStateValue6 = propertiesValue2["provisioningState"];
                                if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                    onPremisesSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance6;
                                }
                                
                                JToken hubNameValue6 = propertiesValue2["hubName"];
                                if (hubNameValue6 != null && hubNameValue6.Type != JTokenType.Null)
                                {
                                    string hubNameInstance6 = ((string)hubNameValue6);
                                    onPremisesSqlLinkedServiceInstance.HubName = hubNameInstance6;
                                }
                                
                                JToken errorMessageValue6 = propertiesValue2["errorMessage"];
                                if (errorMessageValue6 != null && errorMessageValue6.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance6 = ((string)errorMessageValue6);
                                    onPremisesSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance6;
                                }
                                linkedServiceInstance.Properties = onPremisesSqlLinkedServiceInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a data factory linkedService with raw json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='linkedServiceName'>
        /// Required. The name of the data factory table to be created or
        /// updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a data
        /// factory linkedService.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update data factory linkedService operation response.
        /// </returns>
        public async Task<LinkedServiceCreateOrUpdateResponse> BeginCreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string linkedServiceName, LinkedServiceCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (linkedServiceName == null)
            {
                throw new ArgumentNullException("linkedServiceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("linkedServiceName", linkedServiceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginCreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/linkedservices/" + linkedServiceName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LinkedServiceCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new LinkedServiceCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        LinkedService linkedServiceInstance = new LinkedService();
                        result.LinkedService = linkedServiceInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            linkedServiceInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            string typeName = ((string)propertiesValue["type"]);
                            if (typeName == "AzureSqlLinkedService")
                            {
                                AzureSqlLinkedService azureSqlLinkedServiceInstance = new AzureSqlLinkedService();
                                
                                JToken connectionStringValue = propertiesValue["connectionString"];
                                if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance = ((string)connectionStringValue);
                                    azureSqlLinkedServiceInstance.ConnectionString = connectionStringInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    azureSqlLinkedServiceInstance.Description = descriptionInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    azureSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken hubNameValue = propertiesValue["hubName"];
                                if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                {
                                    string hubNameInstance = ((string)hubNameValue);
                                    azureSqlLinkedServiceInstance.HubName = hubNameInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    azureSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance;
                                }
                                linkedServiceInstance.Properties = azureSqlLinkedServiceInstance;
                            }
                            if (typeName == "AzureStorageLinkedService")
                            {
                                AzureStorageLinkedService azureStorageLinkedServiceInstance = new AzureStorageLinkedService();
                                
                                JToken connectionStringValue2 = propertiesValue["connectionString"];
                                if (connectionStringValue2 != null && connectionStringValue2.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance2 = ((string)connectionStringValue2);
                                    azureStorageLinkedServiceInstance.ConnectionString = connectionStringInstance2;
                                }
                                
                                JToken descriptionValue2 = propertiesValue["description"];
                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                {
                                    string descriptionInstance2 = ((string)descriptionValue2);
                                    azureStorageLinkedServiceInstance.Description = descriptionInstance2;
                                }
                                
                                JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                    azureStorageLinkedServiceInstance.ProvisioningState = provisioningStateInstance2;
                                }
                                
                                JToken hubNameValue2 = propertiesValue["hubName"];
                                if (hubNameValue2 != null && hubNameValue2.Type != JTokenType.Null)
                                {
                                    string hubNameInstance2 = ((string)hubNameValue2);
                                    azureStorageLinkedServiceInstance.HubName = hubNameInstance2;
                                }
                                
                                JToken errorMessageValue2 = propertiesValue["errorMessage"];
                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                    azureStorageLinkedServiceInstance.ErrorMessage = errorMessageInstance2;
                                }
                                linkedServiceInstance.Properties = azureStorageLinkedServiceInstance;
                            }
                            if (typeName == "CustomLinkedService")
                            {
                                CustomLinkedService customLinkedServiceInstance = new CustomLinkedService();
                                
                                JToken extendedPropertiesSequenceElement = ((JToken)propertiesValue["extendedProperties"]);
                                if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in extendedPropertiesSequenceElement)
                                    {
                                        string extendedPropertiesKey = ((string)property.Name);
                                        string extendedPropertiesValue = ((string)property.Value);
                                        customLinkedServiceInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                    }
                                }
                                
                                JToken descriptionValue3 = propertiesValue["description"];
                                if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                {
                                    string descriptionInstance3 = ((string)descriptionValue3);
                                    customLinkedServiceInstance.Description = descriptionInstance3;
                                }
                                
                                JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                    customLinkedServiceInstance.ProvisioningState = provisioningStateInstance3;
                                }
                                
                                JToken hubNameValue3 = propertiesValue["hubName"];
                                if (hubNameValue3 != null && hubNameValue3.Type != JTokenType.Null)
                                {
                                    string hubNameInstance3 = ((string)hubNameValue3);
                                    customLinkedServiceInstance.HubName = hubNameInstance3;
                                }
                                
                                JToken errorMessageValue3 = propertiesValue["errorMessage"];
                                if (errorMessageValue3 != null && errorMessageValue3.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance3 = ((string)errorMessageValue3);
                                    customLinkedServiceInstance.ErrorMessage = errorMessageInstance3;
                                }
                                linkedServiceInstance.Properties = customLinkedServiceInstance;
                            }
                            if (typeName == "HDInsightBYOCLinkedService")
                            {
                                HDInsightBYOCLinkedService hDInsightBYOCLinkedServiceInstance = new HDInsightBYOCLinkedService();
                                
                                JToken clusterUriValue = propertiesValue["clusterUri"];
                                if (clusterUriValue != null && clusterUriValue.Type != JTokenType.Null)
                                {
                                    string clusterUriInstance = ((string)clusterUriValue);
                                    hDInsightBYOCLinkedServiceInstance.ClusterUri = clusterUriInstance;
                                }
                                
                                JToken userNameValue = propertiesValue["userName"];
                                if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                {
                                    string userNameInstance = ((string)userNameValue);
                                    hDInsightBYOCLinkedServiceInstance.UserName = userNameInstance;
                                }
                                
                                JToken passwordValue = propertiesValue["password"];
                                if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                {
                                    string passwordInstance = ((string)passwordValue);
                                    hDInsightBYOCLinkedServiceInstance.Password = passwordInstance;
                                }
                                
                                JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                {
                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                    hDInsightBYOCLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance;
                                }
                                
                                JToken descriptionValue4 = propertiesValue["description"];
                                if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                {
                                    string descriptionInstance4 = ((string)descriptionValue4);
                                    hDInsightBYOCLinkedServiceInstance.Description = descriptionInstance4;
                                }
                                
                                JToken provisioningStateValue4 = propertiesValue["provisioningState"];
                                if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                    hDInsightBYOCLinkedServiceInstance.ProvisioningState = provisioningStateInstance4;
                                }
                                
                                JToken hubNameValue4 = propertiesValue["hubName"];
                                if (hubNameValue4 != null && hubNameValue4.Type != JTokenType.Null)
                                {
                                    string hubNameInstance4 = ((string)hubNameValue4);
                                    hDInsightBYOCLinkedServiceInstance.HubName = hubNameInstance4;
                                }
                                
                                JToken errorMessageValue4 = propertiesValue["errorMessage"];
                                if (errorMessageValue4 != null && errorMessageValue4.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance4 = ((string)errorMessageValue4);
                                    hDInsightBYOCLinkedServiceInstance.ErrorMessage = errorMessageInstance4;
                                }
                                linkedServiceInstance.Properties = hDInsightBYOCLinkedServiceInstance;
                            }
                            if (typeName == "HDInsightOnDemandLinkedService")
                            {
                                HDInsightOnDemandLinkedService hDInsightOnDemandLinkedServiceInstance = new HDInsightOnDemandLinkedService();
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    hDInsightOnDemandLinkedServiceInstance.Version = versionInstance;
                                }
                                
                                JToken clusterSizeValue = propertiesValue["clusterSize"];
                                if (clusterSizeValue != null && clusterSizeValue.Type != JTokenType.Null)
                                {
                                    int clusterSizeInstance = ((int)clusterSizeValue);
                                    hDInsightOnDemandLinkedServiceInstance.ClusterSize = clusterSizeInstance;
                                }
                                
                                JToken timeToLiveValue = propertiesValue["timeToLive"];
                                if (timeToLiveValue != null && timeToLiveValue.Type != JTokenType.Null)
                                {
                                    TimeSpan timeToLiveInstance = TimeSpan.Parse(((string)timeToLiveValue), CultureInfo.InvariantCulture);
                                    hDInsightOnDemandLinkedServiceInstance.TimeToLive = timeToLiveInstance;
                                }
                                
                                JToken linkedServiceNameValue2 = propertiesValue["linkedServiceName"];
                                if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                {
                                    string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                    hDInsightOnDemandLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance2;
                                }
                                
                                JToken jobsContainerValue = propertiesValue["jobsContainer"];
                                if (jobsContainerValue != null && jobsContainerValue.Type != JTokenType.Null)
                                {
                                    string jobsContainerInstance = ((string)jobsContainerValue);
                                    hDInsightOnDemandLinkedServiceInstance.JobsContainer = jobsContainerInstance;
                                }
                                
                                JToken hiveCustomLibrariesContainerValue = propertiesValue["hiveCustomLibrariesContainer"];
                                if (hiveCustomLibrariesContainerValue != null && hiveCustomLibrariesContainerValue.Type != JTokenType.Null)
                                {
                                    string hiveCustomLibrariesContainerInstance = ((string)hiveCustomLibrariesContainerValue);
                                    hDInsightOnDemandLinkedServiceInstance.HiveCustomLibrariesContainer = hiveCustomLibrariesContainerInstance;
                                }
                                
                                JToken descriptionValue5 = propertiesValue["description"];
                                if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                {
                                    string descriptionInstance5 = ((string)descriptionValue5);
                                    hDInsightOnDemandLinkedServiceInstance.Description = descriptionInstance5;
                                }
                                
                                JToken provisioningStateValue5 = propertiesValue["provisioningState"];
                                if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                    hDInsightOnDemandLinkedServiceInstance.ProvisioningState = provisioningStateInstance5;
                                }
                                
                                JToken hubNameValue5 = propertiesValue["hubName"];
                                if (hubNameValue5 != null && hubNameValue5.Type != JTokenType.Null)
                                {
                                    string hubNameInstance5 = ((string)hubNameValue5);
                                    hDInsightOnDemandLinkedServiceInstance.HubName = hubNameInstance5;
                                }
                                
                                JToken errorMessageValue5 = propertiesValue["errorMessage"];
                                if (errorMessageValue5 != null && errorMessageValue5.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance5 = ((string)errorMessageValue5);
                                    hDInsightOnDemandLinkedServiceInstance.ErrorMessage = errorMessageInstance5;
                                }
                                linkedServiceInstance.Properties = hDInsightOnDemandLinkedServiceInstance;
                            }
                            if (typeName == "OnPremisesSqlLinkedService")
                            {
                                OnPremisesSqlLinkedService onPremisesSqlLinkedServiceInstance = new OnPremisesSqlLinkedService();
                                
                                JToken connectionStringValue3 = propertiesValue["connectionString"];
                                if (connectionStringValue3 != null && connectionStringValue3.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance3 = ((string)connectionStringValue3);
                                    onPremisesSqlLinkedServiceInstance.ConnectionString = connectionStringInstance3;
                                }
                                
                                JToken gatewayNameValue = propertiesValue["gatewayName"];
                                if (gatewayNameValue != null && gatewayNameValue.Type != JTokenType.Null)
                                {
                                    string gatewayNameInstance = ((string)gatewayNameValue);
                                    onPremisesSqlLinkedServiceInstance.GatewayName = gatewayNameInstance;
                                }
                                
                                JToken gatewayLocationValue = propertiesValue["gatewayLocation"];
                                if (gatewayLocationValue != null && gatewayLocationValue.Type != JTokenType.Null)
                                {
                                    string gatewayLocationInstance = ((string)gatewayLocationValue);
                                    onPremisesSqlLinkedServiceInstance.GatewayLocation = gatewayLocationInstance;
                                }
                                
                                JToken userNameValue2 = propertiesValue["userName"];
                                if (userNameValue2 != null && userNameValue2.Type != JTokenType.Null)
                                {
                                    string userNameInstance2 = ((string)userNameValue2);
                                    onPremisesSqlLinkedServiceInstance.UserName = userNameInstance2;
                                }
                                
                                JToken passwordValue2 = propertiesValue["password"];
                                if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                {
                                    string passwordInstance2 = ((string)passwordValue2);
                                    onPremisesSqlLinkedServiceInstance.Password = passwordInstance2;
                                }
                                
                                JToken descriptionValue6 = propertiesValue["description"];
                                if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                {
                                    string descriptionInstance6 = ((string)descriptionValue6);
                                    onPremisesSqlLinkedServiceInstance.Description = descriptionInstance6;
                                }
                                
                                JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                    onPremisesSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance6;
                                }
                                
                                JToken hubNameValue6 = propertiesValue["hubName"];
                                if (hubNameValue6 != null && hubNameValue6.Type != JTokenType.Null)
                                {
                                    string hubNameInstance6 = ((string)hubNameValue6);
                                    onPremisesSqlLinkedServiceInstance.HubName = hubNameInstance6;
                                }
                                
                                JToken errorMessageValue6 = propertiesValue["errorMessage"];
                                if (errorMessageValue6 != null && errorMessageValue6.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance6 = ((string)errorMessageValue6);
                                    onPremisesSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance6;
                                }
                                linkedServiceInstance.Properties = onPremisesSqlLinkedServiceInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a data factory linkedService instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='linkedServiceName'>
        /// Required. A unique data factory linkedService name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeleteAsync(string resourceGroupName, string dataFactoryName, string linkedServiceName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (linkedServiceName == null)
            {
                throw new ArgumentNullException("linkedServiceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("linkedServiceName", linkedServiceName);
                Tracing.Enter(invocationId, this, "BeginDeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/linkedservices/" + linkedServiceName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a data factory linkedService.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a data
        /// factory linkedService.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update data factory linkedService operation response.
        /// </returns>
        public async Task<LinkedServiceCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, LinkedServiceCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LinkedServiceCreateOrUpdateResponse response = await client.LinkedServices.BeginCreateOrUpdateAsync(resourceGroupName, dataFactoryName, parameters, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                LinkedServiceCreateOrUpdateResponse result = await client.LinkedServices.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 5;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.LinkedServices.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 5;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a data factory linkedService with raw json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. The name of the data factory.
        /// </param>
        /// <param name='linkedServiceName'>
        /// Required. The name of the data factory table to be created or
        /// updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a data
        /// factory linkedService.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update data factory linkedService operation response.
        /// </returns>
        public async Task<LinkedServiceCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string linkedServiceName, LinkedServiceCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("linkedServiceName", linkedServiceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LinkedServiceCreateOrUpdateResponse response = await client.LinkedServices.BeginCreateOrUpdateWithRawJsonContentAsync(resourceGroupName, dataFactoryName, linkedServiceName, parameters, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                LinkedServiceCreateOrUpdateResponse result = await client.LinkedServices.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 5;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.LinkedServices.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 5;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a data factory linkedService instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='linkedServiceName'>
        /// Required. A unique data factory linkedService name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string resourceGroupName, string dataFactoryName, string linkedServiceName, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("linkedServiceName", linkedServiceName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.LinkedServices.BeginDeleteAsync(resourceGroupName, dataFactoryName, linkedServiceName, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 30;
                }
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 15;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a data factory linkedService instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='linkedServiceName'>
        /// Required. A unique data factory linkedService name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get data factory linkedService operation response.
        /// </returns>
        public async Task<LinkedServiceGetResponse> GetAsync(string resourceGroupName, string dataFactoryName, string linkedServiceName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (linkedServiceName == null)
            {
                throw new ArgumentNullException("linkedServiceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("linkedServiceName", linkedServiceName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/linkedservices/" + linkedServiceName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LinkedServiceGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new LinkedServiceGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        LinkedService linkedServiceInstance = new LinkedService();
                        result.LinkedService = linkedServiceInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            linkedServiceInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            string typeName = ((string)propertiesValue["type"]);
                            if (typeName == "AzureSqlLinkedService")
                            {
                                AzureSqlLinkedService azureSqlLinkedServiceInstance = new AzureSqlLinkedService();
                                
                                JToken connectionStringValue = propertiesValue["connectionString"];
                                if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance = ((string)connectionStringValue);
                                    azureSqlLinkedServiceInstance.ConnectionString = connectionStringInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    azureSqlLinkedServiceInstance.Description = descriptionInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    azureSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken hubNameValue = propertiesValue["hubName"];
                                if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                {
                                    string hubNameInstance = ((string)hubNameValue);
                                    azureSqlLinkedServiceInstance.HubName = hubNameInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    azureSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance;
                                }
                                linkedServiceInstance.Properties = azureSqlLinkedServiceInstance;
                            }
                            if (typeName == "AzureStorageLinkedService")
                            {
                                AzureStorageLinkedService azureStorageLinkedServiceInstance = new AzureStorageLinkedService();
                                
                                JToken connectionStringValue2 = propertiesValue["connectionString"];
                                if (connectionStringValue2 != null && connectionStringValue2.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance2 = ((string)connectionStringValue2);
                                    azureStorageLinkedServiceInstance.ConnectionString = connectionStringInstance2;
                                }
                                
                                JToken descriptionValue2 = propertiesValue["description"];
                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                {
                                    string descriptionInstance2 = ((string)descriptionValue2);
                                    azureStorageLinkedServiceInstance.Description = descriptionInstance2;
                                }
                                
                                JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                    azureStorageLinkedServiceInstance.ProvisioningState = provisioningStateInstance2;
                                }
                                
                                JToken hubNameValue2 = propertiesValue["hubName"];
                                if (hubNameValue2 != null && hubNameValue2.Type != JTokenType.Null)
                                {
                                    string hubNameInstance2 = ((string)hubNameValue2);
                                    azureStorageLinkedServiceInstance.HubName = hubNameInstance2;
                                }
                                
                                JToken errorMessageValue2 = propertiesValue["errorMessage"];
                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                    azureStorageLinkedServiceInstance.ErrorMessage = errorMessageInstance2;
                                }
                                linkedServiceInstance.Properties = azureStorageLinkedServiceInstance;
                            }
                            if (typeName == "CustomLinkedService")
                            {
                                CustomLinkedService customLinkedServiceInstance = new CustomLinkedService();
                                
                                JToken extendedPropertiesSequenceElement = ((JToken)propertiesValue["extendedProperties"]);
                                if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in extendedPropertiesSequenceElement)
                                    {
                                        string extendedPropertiesKey = ((string)property.Name);
                                        string extendedPropertiesValue = ((string)property.Value);
                                        customLinkedServiceInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                    }
                                }
                                
                                JToken descriptionValue3 = propertiesValue["description"];
                                if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                {
                                    string descriptionInstance3 = ((string)descriptionValue3);
                                    customLinkedServiceInstance.Description = descriptionInstance3;
                                }
                                
                                JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                    customLinkedServiceInstance.ProvisioningState = provisioningStateInstance3;
                                }
                                
                                JToken hubNameValue3 = propertiesValue["hubName"];
                                if (hubNameValue3 != null && hubNameValue3.Type != JTokenType.Null)
                                {
                                    string hubNameInstance3 = ((string)hubNameValue3);
                                    customLinkedServiceInstance.HubName = hubNameInstance3;
                                }
                                
                                JToken errorMessageValue3 = propertiesValue["errorMessage"];
                                if (errorMessageValue3 != null && errorMessageValue3.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance3 = ((string)errorMessageValue3);
                                    customLinkedServiceInstance.ErrorMessage = errorMessageInstance3;
                                }
                                linkedServiceInstance.Properties = customLinkedServiceInstance;
                            }
                            if (typeName == "HDInsightBYOCLinkedService")
                            {
                                HDInsightBYOCLinkedService hDInsightBYOCLinkedServiceInstance = new HDInsightBYOCLinkedService();
                                
                                JToken clusterUriValue = propertiesValue["clusterUri"];
                                if (clusterUriValue != null && clusterUriValue.Type != JTokenType.Null)
                                {
                                    string clusterUriInstance = ((string)clusterUriValue);
                                    hDInsightBYOCLinkedServiceInstance.ClusterUri = clusterUriInstance;
                                }
                                
                                JToken userNameValue = propertiesValue["userName"];
                                if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                {
                                    string userNameInstance = ((string)userNameValue);
                                    hDInsightBYOCLinkedServiceInstance.UserName = userNameInstance;
                                }
                                
                                JToken passwordValue = propertiesValue["password"];
                                if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                {
                                    string passwordInstance = ((string)passwordValue);
                                    hDInsightBYOCLinkedServiceInstance.Password = passwordInstance;
                                }
                                
                                JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                {
                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                    hDInsightBYOCLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance;
                                }
                                
                                JToken descriptionValue4 = propertiesValue["description"];
                                if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                {
                                    string descriptionInstance4 = ((string)descriptionValue4);
                                    hDInsightBYOCLinkedServiceInstance.Description = descriptionInstance4;
                                }
                                
                                JToken provisioningStateValue4 = propertiesValue["provisioningState"];
                                if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                    hDInsightBYOCLinkedServiceInstance.ProvisioningState = provisioningStateInstance4;
                                }
                                
                                JToken hubNameValue4 = propertiesValue["hubName"];
                                if (hubNameValue4 != null && hubNameValue4.Type != JTokenType.Null)
                                {
                                    string hubNameInstance4 = ((string)hubNameValue4);
                                    hDInsightBYOCLinkedServiceInstance.HubName = hubNameInstance4;
                                }
                                
                                JToken errorMessageValue4 = propertiesValue["errorMessage"];
                                if (errorMessageValue4 != null && errorMessageValue4.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance4 = ((string)errorMessageValue4);
                                    hDInsightBYOCLinkedServiceInstance.ErrorMessage = errorMessageInstance4;
                                }
                                linkedServiceInstance.Properties = hDInsightBYOCLinkedServiceInstance;
                            }
                            if (typeName == "HDInsightOnDemandLinkedService")
                            {
                                HDInsightOnDemandLinkedService hDInsightOnDemandLinkedServiceInstance = new HDInsightOnDemandLinkedService();
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    hDInsightOnDemandLinkedServiceInstance.Version = versionInstance;
                                }
                                
                                JToken clusterSizeValue = propertiesValue["clusterSize"];
                                if (clusterSizeValue != null && clusterSizeValue.Type != JTokenType.Null)
                                {
                                    int clusterSizeInstance = ((int)clusterSizeValue);
                                    hDInsightOnDemandLinkedServiceInstance.ClusterSize = clusterSizeInstance;
                                }
                                
                                JToken timeToLiveValue = propertiesValue["timeToLive"];
                                if (timeToLiveValue != null && timeToLiveValue.Type != JTokenType.Null)
                                {
                                    TimeSpan timeToLiveInstance = TimeSpan.Parse(((string)timeToLiveValue), CultureInfo.InvariantCulture);
                                    hDInsightOnDemandLinkedServiceInstance.TimeToLive = timeToLiveInstance;
                                }
                                
                                JToken linkedServiceNameValue2 = propertiesValue["linkedServiceName"];
                                if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                {
                                    string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                    hDInsightOnDemandLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance2;
                                }
                                
                                JToken jobsContainerValue = propertiesValue["jobsContainer"];
                                if (jobsContainerValue != null && jobsContainerValue.Type != JTokenType.Null)
                                {
                                    string jobsContainerInstance = ((string)jobsContainerValue);
                                    hDInsightOnDemandLinkedServiceInstance.JobsContainer = jobsContainerInstance;
                                }
                                
                                JToken hiveCustomLibrariesContainerValue = propertiesValue["hiveCustomLibrariesContainer"];
                                if (hiveCustomLibrariesContainerValue != null && hiveCustomLibrariesContainerValue.Type != JTokenType.Null)
                                {
                                    string hiveCustomLibrariesContainerInstance = ((string)hiveCustomLibrariesContainerValue);
                                    hDInsightOnDemandLinkedServiceInstance.HiveCustomLibrariesContainer = hiveCustomLibrariesContainerInstance;
                                }
                                
                                JToken descriptionValue5 = propertiesValue["description"];
                                if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                {
                                    string descriptionInstance5 = ((string)descriptionValue5);
                                    hDInsightOnDemandLinkedServiceInstance.Description = descriptionInstance5;
                                }
                                
                                JToken provisioningStateValue5 = propertiesValue["provisioningState"];
                                if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                    hDInsightOnDemandLinkedServiceInstance.ProvisioningState = provisioningStateInstance5;
                                }
                                
                                JToken hubNameValue5 = propertiesValue["hubName"];
                                if (hubNameValue5 != null && hubNameValue5.Type != JTokenType.Null)
                                {
                                    string hubNameInstance5 = ((string)hubNameValue5);
                                    hDInsightOnDemandLinkedServiceInstance.HubName = hubNameInstance5;
                                }
                                
                                JToken errorMessageValue5 = propertiesValue["errorMessage"];
                                if (errorMessageValue5 != null && errorMessageValue5.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance5 = ((string)errorMessageValue5);
                                    hDInsightOnDemandLinkedServiceInstance.ErrorMessage = errorMessageInstance5;
                                }
                                linkedServiceInstance.Properties = hDInsightOnDemandLinkedServiceInstance;
                            }
                            if (typeName == "OnPremisesSqlLinkedService")
                            {
                                OnPremisesSqlLinkedService onPremisesSqlLinkedServiceInstance = new OnPremisesSqlLinkedService();
                                
                                JToken connectionStringValue3 = propertiesValue["connectionString"];
                                if (connectionStringValue3 != null && connectionStringValue3.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance3 = ((string)connectionStringValue3);
                                    onPremisesSqlLinkedServiceInstance.ConnectionString = connectionStringInstance3;
                                }
                                
                                JToken gatewayNameValue = propertiesValue["gatewayName"];
                                if (gatewayNameValue != null && gatewayNameValue.Type != JTokenType.Null)
                                {
                                    string gatewayNameInstance = ((string)gatewayNameValue);
                                    onPremisesSqlLinkedServiceInstance.GatewayName = gatewayNameInstance;
                                }
                                
                                JToken gatewayLocationValue = propertiesValue["gatewayLocation"];
                                if (gatewayLocationValue != null && gatewayLocationValue.Type != JTokenType.Null)
                                {
                                    string gatewayLocationInstance = ((string)gatewayLocationValue);
                                    onPremisesSqlLinkedServiceInstance.GatewayLocation = gatewayLocationInstance;
                                }
                                
                                JToken userNameValue2 = propertiesValue["userName"];
                                if (userNameValue2 != null && userNameValue2.Type != JTokenType.Null)
                                {
                                    string userNameInstance2 = ((string)userNameValue2);
                                    onPremisesSqlLinkedServiceInstance.UserName = userNameInstance2;
                                }
                                
                                JToken passwordValue2 = propertiesValue["password"];
                                if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                {
                                    string passwordInstance2 = ((string)passwordValue2);
                                    onPremisesSqlLinkedServiceInstance.Password = passwordInstance2;
                                }
                                
                                JToken descriptionValue6 = propertiesValue["description"];
                                if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                {
                                    string descriptionInstance6 = ((string)descriptionValue6);
                                    onPremisesSqlLinkedServiceInstance.Description = descriptionInstance6;
                                }
                                
                                JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                    onPremisesSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance6;
                                }
                                
                                JToken hubNameValue6 = propertiesValue["hubName"];
                                if (hubNameValue6 != null && hubNameValue6.Type != JTokenType.Null)
                                {
                                    string hubNameInstance6 = ((string)hubNameValue6);
                                    onPremisesSqlLinkedServiceInstance.HubName = hubNameInstance6;
                                }
                                
                                JToken errorMessageValue6 = propertiesValue["errorMessage"];
                                if (errorMessageValue6 != null && errorMessageValue6.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance6 = ((string)errorMessageValue6);
                                    onPremisesSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance6;
                                }
                                linkedServiceInstance.Properties = onPremisesSqlLinkedServiceInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update data factory linkedService operation response.
        /// </returns>
        public async Task<LinkedServiceCreateOrUpdateResponse> GetCreateOrUpdateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                Tracing.Enter(invocationId, this, "GetCreateOrUpdateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = operationStatusLink.Trim();
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2014-10-01-preview");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LinkedServiceCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new LinkedServiceCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        LinkedService linkedServiceInstance = new LinkedService();
                        result.LinkedService = linkedServiceInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            linkedServiceInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            string typeName = ((string)propertiesValue["type"]);
                            if (typeName == "AzureSqlLinkedService")
                            {
                                AzureSqlLinkedService azureSqlLinkedServiceInstance = new AzureSqlLinkedService();
                                
                                JToken connectionStringValue = propertiesValue["connectionString"];
                                if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance = ((string)connectionStringValue);
                                    azureSqlLinkedServiceInstance.ConnectionString = connectionStringInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    azureSqlLinkedServiceInstance.Description = descriptionInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    azureSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken hubNameValue = propertiesValue["hubName"];
                                if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                {
                                    string hubNameInstance = ((string)hubNameValue);
                                    azureSqlLinkedServiceInstance.HubName = hubNameInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    azureSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance;
                                }
                                linkedServiceInstance.Properties = azureSqlLinkedServiceInstance;
                            }
                            if (typeName == "AzureStorageLinkedService")
                            {
                                AzureStorageLinkedService azureStorageLinkedServiceInstance = new AzureStorageLinkedService();
                                
                                JToken connectionStringValue2 = propertiesValue["connectionString"];
                                if (connectionStringValue2 != null && connectionStringValue2.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance2 = ((string)connectionStringValue2);
                                    azureStorageLinkedServiceInstance.ConnectionString = connectionStringInstance2;
                                }
                                
                                JToken descriptionValue2 = propertiesValue["description"];
                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                {
                                    string descriptionInstance2 = ((string)descriptionValue2);
                                    azureStorageLinkedServiceInstance.Description = descriptionInstance2;
                                }
                                
                                JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                    azureStorageLinkedServiceInstance.ProvisioningState = provisioningStateInstance2;
                                }
                                
                                JToken hubNameValue2 = propertiesValue["hubName"];
                                if (hubNameValue2 != null && hubNameValue2.Type != JTokenType.Null)
                                {
                                    string hubNameInstance2 = ((string)hubNameValue2);
                                    azureStorageLinkedServiceInstance.HubName = hubNameInstance2;
                                }
                                
                                JToken errorMessageValue2 = propertiesValue["errorMessage"];
                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                    azureStorageLinkedServiceInstance.ErrorMessage = errorMessageInstance2;
                                }
                                linkedServiceInstance.Properties = azureStorageLinkedServiceInstance;
                            }
                            if (typeName == "CustomLinkedService")
                            {
                                CustomLinkedService customLinkedServiceInstance = new CustomLinkedService();
                                
                                JToken extendedPropertiesSequenceElement = ((JToken)propertiesValue["extendedProperties"]);
                                if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in extendedPropertiesSequenceElement)
                                    {
                                        string extendedPropertiesKey = ((string)property.Name);
                                        string extendedPropertiesValue = ((string)property.Value);
                                        customLinkedServiceInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                    }
                                }
                                
                                JToken descriptionValue3 = propertiesValue["description"];
                                if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                {
                                    string descriptionInstance3 = ((string)descriptionValue3);
                                    customLinkedServiceInstance.Description = descriptionInstance3;
                                }
                                
                                JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                    customLinkedServiceInstance.ProvisioningState = provisioningStateInstance3;
                                }
                                
                                JToken hubNameValue3 = propertiesValue["hubName"];
                                if (hubNameValue3 != null && hubNameValue3.Type != JTokenType.Null)
                                {
                                    string hubNameInstance3 = ((string)hubNameValue3);
                                    customLinkedServiceInstance.HubName = hubNameInstance3;
                                }
                                
                                JToken errorMessageValue3 = propertiesValue["errorMessage"];
                                if (errorMessageValue3 != null && errorMessageValue3.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance3 = ((string)errorMessageValue3);
                                    customLinkedServiceInstance.ErrorMessage = errorMessageInstance3;
                                }
                                linkedServiceInstance.Properties = customLinkedServiceInstance;
                            }
                            if (typeName == "HDInsightBYOCLinkedService")
                            {
                                HDInsightBYOCLinkedService hDInsightBYOCLinkedServiceInstance = new HDInsightBYOCLinkedService();
                                
                                JToken clusterUriValue = propertiesValue["clusterUri"];
                                if (clusterUriValue != null && clusterUriValue.Type != JTokenType.Null)
                                {
                                    string clusterUriInstance = ((string)clusterUriValue);
                                    hDInsightBYOCLinkedServiceInstance.ClusterUri = clusterUriInstance;
                                }
                                
                                JToken userNameValue = propertiesValue["userName"];
                                if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                {
                                    string userNameInstance = ((string)userNameValue);
                                    hDInsightBYOCLinkedServiceInstance.UserName = userNameInstance;
                                }
                                
                                JToken passwordValue = propertiesValue["password"];
                                if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                {
                                    string passwordInstance = ((string)passwordValue);
                                    hDInsightBYOCLinkedServiceInstance.Password = passwordInstance;
                                }
                                
                                JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                {
                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                    hDInsightBYOCLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance;
                                }
                                
                                JToken descriptionValue4 = propertiesValue["description"];
                                if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                {
                                    string descriptionInstance4 = ((string)descriptionValue4);
                                    hDInsightBYOCLinkedServiceInstance.Description = descriptionInstance4;
                                }
                                
                                JToken provisioningStateValue4 = propertiesValue["provisioningState"];
                                if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                    hDInsightBYOCLinkedServiceInstance.ProvisioningState = provisioningStateInstance4;
                                }
                                
                                JToken hubNameValue4 = propertiesValue["hubName"];
                                if (hubNameValue4 != null && hubNameValue4.Type != JTokenType.Null)
                                {
                                    string hubNameInstance4 = ((string)hubNameValue4);
                                    hDInsightBYOCLinkedServiceInstance.HubName = hubNameInstance4;
                                }
                                
                                JToken errorMessageValue4 = propertiesValue["errorMessage"];
                                if (errorMessageValue4 != null && errorMessageValue4.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance4 = ((string)errorMessageValue4);
                                    hDInsightBYOCLinkedServiceInstance.ErrorMessage = errorMessageInstance4;
                                }
                                linkedServiceInstance.Properties = hDInsightBYOCLinkedServiceInstance;
                            }
                            if (typeName == "HDInsightOnDemandLinkedService")
                            {
                                HDInsightOnDemandLinkedService hDInsightOnDemandLinkedServiceInstance = new HDInsightOnDemandLinkedService();
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    hDInsightOnDemandLinkedServiceInstance.Version = versionInstance;
                                }
                                
                                JToken clusterSizeValue = propertiesValue["clusterSize"];
                                if (clusterSizeValue != null && clusterSizeValue.Type != JTokenType.Null)
                                {
                                    int clusterSizeInstance = ((int)clusterSizeValue);
                                    hDInsightOnDemandLinkedServiceInstance.ClusterSize = clusterSizeInstance;
                                }
                                
                                JToken timeToLiveValue = propertiesValue["timeToLive"];
                                if (timeToLiveValue != null && timeToLiveValue.Type != JTokenType.Null)
                                {
                                    TimeSpan timeToLiveInstance = TimeSpan.Parse(((string)timeToLiveValue), CultureInfo.InvariantCulture);
                                    hDInsightOnDemandLinkedServiceInstance.TimeToLive = timeToLiveInstance;
                                }
                                
                                JToken linkedServiceNameValue2 = propertiesValue["linkedServiceName"];
                                if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                {
                                    string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                    hDInsightOnDemandLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance2;
                                }
                                
                                JToken jobsContainerValue = propertiesValue["jobsContainer"];
                                if (jobsContainerValue != null && jobsContainerValue.Type != JTokenType.Null)
                                {
                                    string jobsContainerInstance = ((string)jobsContainerValue);
                                    hDInsightOnDemandLinkedServiceInstance.JobsContainer = jobsContainerInstance;
                                }
                                
                                JToken hiveCustomLibrariesContainerValue = propertiesValue["hiveCustomLibrariesContainer"];
                                if (hiveCustomLibrariesContainerValue != null && hiveCustomLibrariesContainerValue.Type != JTokenType.Null)
                                {
                                    string hiveCustomLibrariesContainerInstance = ((string)hiveCustomLibrariesContainerValue);
                                    hDInsightOnDemandLinkedServiceInstance.HiveCustomLibrariesContainer = hiveCustomLibrariesContainerInstance;
                                }
                                
                                JToken descriptionValue5 = propertiesValue["description"];
                                if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                {
                                    string descriptionInstance5 = ((string)descriptionValue5);
                                    hDInsightOnDemandLinkedServiceInstance.Description = descriptionInstance5;
                                }
                                
                                JToken provisioningStateValue5 = propertiesValue["provisioningState"];
                                if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                    hDInsightOnDemandLinkedServiceInstance.ProvisioningState = provisioningStateInstance5;
                                }
                                
                                JToken hubNameValue5 = propertiesValue["hubName"];
                                if (hubNameValue5 != null && hubNameValue5.Type != JTokenType.Null)
                                {
                                    string hubNameInstance5 = ((string)hubNameValue5);
                                    hDInsightOnDemandLinkedServiceInstance.HubName = hubNameInstance5;
                                }
                                
                                JToken errorMessageValue5 = propertiesValue["errorMessage"];
                                if (errorMessageValue5 != null && errorMessageValue5.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance5 = ((string)errorMessageValue5);
                                    hDInsightOnDemandLinkedServiceInstance.ErrorMessage = errorMessageInstance5;
                                }
                                linkedServiceInstance.Properties = hDInsightOnDemandLinkedServiceInstance;
                            }
                            if (typeName == "OnPremisesSqlLinkedService")
                            {
                                OnPremisesSqlLinkedService onPremisesSqlLinkedServiceInstance = new OnPremisesSqlLinkedService();
                                
                                JToken connectionStringValue3 = propertiesValue["connectionString"];
                                if (connectionStringValue3 != null && connectionStringValue3.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance3 = ((string)connectionStringValue3);
                                    onPremisesSqlLinkedServiceInstance.ConnectionString = connectionStringInstance3;
                                }
                                
                                JToken gatewayNameValue = propertiesValue["gatewayName"];
                                if (gatewayNameValue != null && gatewayNameValue.Type != JTokenType.Null)
                                {
                                    string gatewayNameInstance = ((string)gatewayNameValue);
                                    onPremisesSqlLinkedServiceInstance.GatewayName = gatewayNameInstance;
                                }
                                
                                JToken gatewayLocationValue = propertiesValue["gatewayLocation"];
                                if (gatewayLocationValue != null && gatewayLocationValue.Type != JTokenType.Null)
                                {
                                    string gatewayLocationInstance = ((string)gatewayLocationValue);
                                    onPremisesSqlLinkedServiceInstance.GatewayLocation = gatewayLocationInstance;
                                }
                                
                                JToken userNameValue2 = propertiesValue["userName"];
                                if (userNameValue2 != null && userNameValue2.Type != JTokenType.Null)
                                {
                                    string userNameInstance2 = ((string)userNameValue2);
                                    onPremisesSqlLinkedServiceInstance.UserName = userNameInstance2;
                                }
                                
                                JToken passwordValue2 = propertiesValue["password"];
                                if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                {
                                    string passwordInstance2 = ((string)passwordValue2);
                                    onPremisesSqlLinkedServiceInstance.Password = passwordInstance2;
                                }
                                
                                JToken descriptionValue6 = propertiesValue["description"];
                                if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                {
                                    string descriptionInstance6 = ((string)descriptionValue6);
                                    onPremisesSqlLinkedServiceInstance.Description = descriptionInstance6;
                                }
                                
                                JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                    onPremisesSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance6;
                                }
                                
                                JToken hubNameValue6 = propertiesValue["hubName"];
                                if (hubNameValue6 != null && hubNameValue6.Type != JTokenType.Null)
                                {
                                    string hubNameInstance6 = ((string)hubNameValue6);
                                    onPremisesSqlLinkedServiceInstance.HubName = hubNameInstance6;
                                }
                                
                                JToken errorMessageValue6 = propertiesValue["errorMessage"];
                                if (errorMessageValue6 != null && errorMessageValue6.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance6 = ((string)errorMessageValue6);
                                    onPremisesSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance6;
                                }
                                linkedServiceInstance.Properties = onPremisesSqlLinkedServiceInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    if (result.LinkedService.Properties.ProvisioningState == "Failed")
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (result.LinkedService.Properties.ProvisioningState == "Succeeded")
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of linked service instances with the link to
        /// the next page.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List data factory linkedServices operation response.
        /// </returns>
        public async Task<LinkedServiceListResponse> ListAsync(string resourceGroupName, string dataFactoryName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.DataFactory/datafactories/" + dataFactoryName.Trim() + "/linkedServices?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LinkedServiceListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new LinkedServiceListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                LinkedService linkedServiceInstance = new LinkedService();
                                result.LinkedServices.Add(linkedServiceInstance);
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    linkedServiceInstance.Name = nameInstance;
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)propertiesValue["type"]);
                                    if (typeName == "AzureSqlLinkedService")
                                    {
                                        AzureSqlLinkedService azureSqlLinkedServiceInstance = new AzureSqlLinkedService();
                                        
                                        JToken connectionStringValue = propertiesValue["connectionString"];
                                        if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                        {
                                            string connectionStringInstance = ((string)connectionStringValue);
                                            azureSqlLinkedServiceInstance.ConnectionString = connectionStringInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            azureSqlLinkedServiceInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            azureSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken hubNameValue = propertiesValue["hubName"];
                                        if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance = ((string)hubNameValue);
                                            azureSqlLinkedServiceInstance.HubName = hubNameInstance;
                                        }
                                        
                                        JToken errorMessageValue = propertiesValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            azureSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        linkedServiceInstance.Properties = azureSqlLinkedServiceInstance;
                                    }
                                    if (typeName == "AzureStorageLinkedService")
                                    {
                                        AzureStorageLinkedService azureStorageLinkedServiceInstance = new AzureStorageLinkedService();
                                        
                                        JToken connectionStringValue2 = propertiesValue["connectionString"];
                                        if (connectionStringValue2 != null && connectionStringValue2.Type != JTokenType.Null)
                                        {
                                            string connectionStringInstance2 = ((string)connectionStringValue2);
                                            azureStorageLinkedServiceInstance.ConnectionString = connectionStringInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = propertiesValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            azureStorageLinkedServiceInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            azureStorageLinkedServiceInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                        
                                        JToken hubNameValue2 = propertiesValue["hubName"];
                                        if (hubNameValue2 != null && hubNameValue2.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance2 = ((string)hubNameValue2);
                                            azureStorageLinkedServiceInstance.HubName = hubNameInstance2;
                                        }
                                        
                                        JToken errorMessageValue2 = propertiesValue["errorMessage"];
                                        if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance2 = ((string)errorMessageValue2);
                                            azureStorageLinkedServiceInstance.ErrorMessage = errorMessageInstance2;
                                        }
                                        linkedServiceInstance.Properties = azureStorageLinkedServiceInstance;
                                    }
                                    if (typeName == "CustomLinkedService")
                                    {
                                        CustomLinkedService customLinkedServiceInstance = new CustomLinkedService();
                                        
                                        JToken extendedPropertiesSequenceElement = ((JToken)propertiesValue["extendedProperties"]);
                                        if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in extendedPropertiesSequenceElement)
                                            {
                                                string extendedPropertiesKey = ((string)property.Name);
                                                string extendedPropertiesValue = ((string)property.Value);
                                                customLinkedServiceInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                            }
                                        }
                                        
                                        JToken descriptionValue3 = propertiesValue["description"];
                                        if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance3 = ((string)descriptionValue3);
                                            customLinkedServiceInstance.Description = descriptionInstance3;
                                        }
                                        
                                        JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                            customLinkedServiceInstance.ProvisioningState = provisioningStateInstance3;
                                        }
                                        
                                        JToken hubNameValue3 = propertiesValue["hubName"];
                                        if (hubNameValue3 != null && hubNameValue3.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance3 = ((string)hubNameValue3);
                                            customLinkedServiceInstance.HubName = hubNameInstance3;
                                        }
                                        
                                        JToken errorMessageValue3 = propertiesValue["errorMessage"];
                                        if (errorMessageValue3 != null && errorMessageValue3.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance3 = ((string)errorMessageValue3);
                                            customLinkedServiceInstance.ErrorMessage = errorMessageInstance3;
                                        }
                                        linkedServiceInstance.Properties = customLinkedServiceInstance;
                                    }
                                    if (typeName == "HDInsightBYOCLinkedService")
                                    {
                                        HDInsightBYOCLinkedService hDInsightBYOCLinkedServiceInstance = new HDInsightBYOCLinkedService();
                                        
                                        JToken clusterUriValue = propertiesValue["clusterUri"];
                                        if (clusterUriValue != null && clusterUriValue.Type != JTokenType.Null)
                                        {
                                            string clusterUriInstance = ((string)clusterUriValue);
                                            hDInsightBYOCLinkedServiceInstance.ClusterUri = clusterUriInstance;
                                        }
                                        
                                        JToken userNameValue = propertiesValue["userName"];
                                        if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                        {
                                            string userNameInstance = ((string)userNameValue);
                                            hDInsightBYOCLinkedServiceInstance.UserName = userNameInstance;
                                        }
                                        
                                        JToken passwordValue = propertiesValue["password"];
                                        if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                        {
                                            string passwordInstance = ((string)passwordValue);
                                            hDInsightBYOCLinkedServiceInstance.Password = passwordInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            hDInsightBYOCLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken descriptionValue4 = propertiesValue["description"];
                                        if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance4 = ((string)descriptionValue4);
                                            hDInsightBYOCLinkedServiceInstance.Description = descriptionInstance4;
                                        }
                                        
                                        JToken provisioningStateValue4 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                            hDInsightBYOCLinkedServiceInstance.ProvisioningState = provisioningStateInstance4;
                                        }
                                        
                                        JToken hubNameValue4 = propertiesValue["hubName"];
                                        if (hubNameValue4 != null && hubNameValue4.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance4 = ((string)hubNameValue4);
                                            hDInsightBYOCLinkedServiceInstance.HubName = hubNameInstance4;
                                        }
                                        
                                        JToken errorMessageValue4 = propertiesValue["errorMessage"];
                                        if (errorMessageValue4 != null && errorMessageValue4.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance4 = ((string)errorMessageValue4);
                                            hDInsightBYOCLinkedServiceInstance.ErrorMessage = errorMessageInstance4;
                                        }
                                        linkedServiceInstance.Properties = hDInsightBYOCLinkedServiceInstance;
                                    }
                                    if (typeName == "HDInsightOnDemandLinkedService")
                                    {
                                        HDInsightOnDemandLinkedService hDInsightOnDemandLinkedServiceInstance = new HDInsightOnDemandLinkedService();
                                        
                                        JToken versionValue = propertiesValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            hDInsightOnDemandLinkedServiceInstance.Version = versionInstance;
                                        }
                                        
                                        JToken clusterSizeValue = propertiesValue["clusterSize"];
                                        if (clusterSizeValue != null && clusterSizeValue.Type != JTokenType.Null)
                                        {
                                            int clusterSizeInstance = ((int)clusterSizeValue);
                                            hDInsightOnDemandLinkedServiceInstance.ClusterSize = clusterSizeInstance;
                                        }
                                        
                                        JToken timeToLiveValue = propertiesValue["timeToLive"];
                                        if (timeToLiveValue != null && timeToLiveValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan timeToLiveInstance = TimeSpan.Parse(((string)timeToLiveValue), CultureInfo.InvariantCulture);
                                            hDInsightOnDemandLinkedServiceInstance.TimeToLive = timeToLiveInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue2 = propertiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                            hDInsightOnDemandLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance2;
                                        }
                                        
                                        JToken jobsContainerValue = propertiesValue["jobsContainer"];
                                        if (jobsContainerValue != null && jobsContainerValue.Type != JTokenType.Null)
                                        {
                                            string jobsContainerInstance = ((string)jobsContainerValue);
                                            hDInsightOnDemandLinkedServiceInstance.JobsContainer = jobsContainerInstance;
                                        }
                                        
                                        JToken hiveCustomLibrariesContainerValue = propertiesValue["hiveCustomLibrariesContainer"];
                                        if (hiveCustomLibrariesContainerValue != null && hiveCustomLibrariesContainerValue.Type != JTokenType.Null)
                                        {
                                            string hiveCustomLibrariesContainerInstance = ((string)hiveCustomLibrariesContainerValue);
                                            hDInsightOnDemandLinkedServiceInstance.HiveCustomLibrariesContainer = hiveCustomLibrariesContainerInstance;
                                        }
                                        
                                        JToken descriptionValue5 = propertiesValue["description"];
                                        if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance5 = ((string)descriptionValue5);
                                            hDInsightOnDemandLinkedServiceInstance.Description = descriptionInstance5;
                                        }
                                        
                                        JToken provisioningStateValue5 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                            hDInsightOnDemandLinkedServiceInstance.ProvisioningState = provisioningStateInstance5;
                                        }
                                        
                                        JToken hubNameValue5 = propertiesValue["hubName"];
                                        if (hubNameValue5 != null && hubNameValue5.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance5 = ((string)hubNameValue5);
                                            hDInsightOnDemandLinkedServiceInstance.HubName = hubNameInstance5;
                                        }
                                        
                                        JToken errorMessageValue5 = propertiesValue["errorMessage"];
                                        if (errorMessageValue5 != null && errorMessageValue5.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance5 = ((string)errorMessageValue5);
                                            hDInsightOnDemandLinkedServiceInstance.ErrorMessage = errorMessageInstance5;
                                        }
                                        linkedServiceInstance.Properties = hDInsightOnDemandLinkedServiceInstance;
                                    }
                                    if (typeName == "OnPremisesSqlLinkedService")
                                    {
                                        OnPremisesSqlLinkedService onPremisesSqlLinkedServiceInstance = new OnPremisesSqlLinkedService();
                                        
                                        JToken connectionStringValue3 = propertiesValue["connectionString"];
                                        if (connectionStringValue3 != null && connectionStringValue3.Type != JTokenType.Null)
                                        {
                                            string connectionStringInstance3 = ((string)connectionStringValue3);
                                            onPremisesSqlLinkedServiceInstance.ConnectionString = connectionStringInstance3;
                                        }
                                        
                                        JToken gatewayNameValue = propertiesValue["gatewayName"];
                                        if (gatewayNameValue != null && gatewayNameValue.Type != JTokenType.Null)
                                        {
                                            string gatewayNameInstance = ((string)gatewayNameValue);
                                            onPremisesSqlLinkedServiceInstance.GatewayName = gatewayNameInstance;
                                        }
                                        
                                        JToken gatewayLocationValue = propertiesValue["gatewayLocation"];
                                        if (gatewayLocationValue != null && gatewayLocationValue.Type != JTokenType.Null)
                                        {
                                            string gatewayLocationInstance = ((string)gatewayLocationValue);
                                            onPremisesSqlLinkedServiceInstance.GatewayLocation = gatewayLocationInstance;
                                        }
                                        
                                        JToken userNameValue2 = propertiesValue["userName"];
                                        if (userNameValue2 != null && userNameValue2.Type != JTokenType.Null)
                                        {
                                            string userNameInstance2 = ((string)userNameValue2);
                                            onPremisesSqlLinkedServiceInstance.UserName = userNameInstance2;
                                        }
                                        
                                        JToken passwordValue2 = propertiesValue["password"];
                                        if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                        {
                                            string passwordInstance2 = ((string)passwordValue2);
                                            onPremisesSqlLinkedServiceInstance.Password = passwordInstance2;
                                        }
                                        
                                        JToken descriptionValue6 = propertiesValue["description"];
                                        if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance6 = ((string)descriptionValue6);
                                            onPremisesSqlLinkedServiceInstance.Description = descriptionInstance6;
                                        }
                                        
                                        JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                            onPremisesSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance6;
                                        }
                                        
                                        JToken hubNameValue6 = propertiesValue["hubName"];
                                        if (hubNameValue6 != null && hubNameValue6.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance6 = ((string)hubNameValue6);
                                            onPremisesSqlLinkedServiceInstance.HubName = hubNameInstance6;
                                        }
                                        
                                        JToken errorMessageValue6 = propertiesValue["errorMessage"];
                                        if (errorMessageValue6 != null && errorMessageValue6.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance6 = ((string)errorMessageValue6);
                                            onPremisesSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance6;
                                        }
                                        linkedServiceInstance.Properties = onPremisesSqlLinkedServiceInstance;
                                    }
                                }
                            }
                        }
                        
                        JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                        if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                        {
                            string odatanextLinkInstance = ((string)odatanextLinkValue);
                            result.NextLink = odatanextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of linked service instances with the link to the
        /// next page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next linked services page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List data factory linkedServices operation response.
        /// </returns>
        public async Task<LinkedServiceListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                Tracing.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = nextLink.Trim();
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LinkedServiceListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new LinkedServiceListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                LinkedService linkedServiceInstance = new LinkedService();
                                result.LinkedServices.Add(linkedServiceInstance);
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    linkedServiceInstance.Name = nameInstance;
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)propertiesValue["type"]);
                                    if (typeName == "AzureSqlLinkedService")
                                    {
                                        AzureSqlLinkedService azureSqlLinkedServiceInstance = new AzureSqlLinkedService();
                                        
                                        JToken connectionStringValue = propertiesValue["connectionString"];
                                        if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                        {
                                            string connectionStringInstance = ((string)connectionStringValue);
                                            azureSqlLinkedServiceInstance.ConnectionString = connectionStringInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            azureSqlLinkedServiceInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            azureSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken hubNameValue = propertiesValue["hubName"];
                                        if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance = ((string)hubNameValue);
                                            azureSqlLinkedServiceInstance.HubName = hubNameInstance;
                                        }
                                        
                                        JToken errorMessageValue = propertiesValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            azureSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        linkedServiceInstance.Properties = azureSqlLinkedServiceInstance;
                                    }
                                    if (typeName == "AzureStorageLinkedService")
                                    {
                                        AzureStorageLinkedService azureStorageLinkedServiceInstance = new AzureStorageLinkedService();
                                        
                                        JToken connectionStringValue2 = propertiesValue["connectionString"];
                                        if (connectionStringValue2 != null && connectionStringValue2.Type != JTokenType.Null)
                                        {
                                            string connectionStringInstance2 = ((string)connectionStringValue2);
                                            azureStorageLinkedServiceInstance.ConnectionString = connectionStringInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = propertiesValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            azureStorageLinkedServiceInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            azureStorageLinkedServiceInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                        
                                        JToken hubNameValue2 = propertiesValue["hubName"];
                                        if (hubNameValue2 != null && hubNameValue2.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance2 = ((string)hubNameValue2);
                                            azureStorageLinkedServiceInstance.HubName = hubNameInstance2;
                                        }
                                        
                                        JToken errorMessageValue2 = propertiesValue["errorMessage"];
                                        if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance2 = ((string)errorMessageValue2);
                                            azureStorageLinkedServiceInstance.ErrorMessage = errorMessageInstance2;
                                        }
                                        linkedServiceInstance.Properties = azureStorageLinkedServiceInstance;
                                    }
                                    if (typeName == "CustomLinkedService")
                                    {
                                        CustomLinkedService customLinkedServiceInstance = new CustomLinkedService();
                                        
                                        JToken extendedPropertiesSequenceElement = ((JToken)propertiesValue["extendedProperties"]);
                                        if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in extendedPropertiesSequenceElement)
                                            {
                                                string extendedPropertiesKey = ((string)property.Name);
                                                string extendedPropertiesValue = ((string)property.Value);
                                                customLinkedServiceInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                            }
                                        }
                                        
                                        JToken descriptionValue3 = propertiesValue["description"];
                                        if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance3 = ((string)descriptionValue3);
                                            customLinkedServiceInstance.Description = descriptionInstance3;
                                        }
                                        
                                        JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                            customLinkedServiceInstance.ProvisioningState = provisioningStateInstance3;
                                        }
                                        
                                        JToken hubNameValue3 = propertiesValue["hubName"];
                                        if (hubNameValue3 != null && hubNameValue3.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance3 = ((string)hubNameValue3);
                                            customLinkedServiceInstance.HubName = hubNameInstance3;
                                        }
                                        
                                        JToken errorMessageValue3 = propertiesValue["errorMessage"];
                                        if (errorMessageValue3 != null && errorMessageValue3.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance3 = ((string)errorMessageValue3);
                                            customLinkedServiceInstance.ErrorMessage = errorMessageInstance3;
                                        }
                                        linkedServiceInstance.Properties = customLinkedServiceInstance;
                                    }
                                    if (typeName == "HDInsightBYOCLinkedService")
                                    {
                                        HDInsightBYOCLinkedService hDInsightBYOCLinkedServiceInstance = new HDInsightBYOCLinkedService();
                                        
                                        JToken clusterUriValue = propertiesValue["clusterUri"];
                                        if (clusterUriValue != null && clusterUriValue.Type != JTokenType.Null)
                                        {
                                            string clusterUriInstance = ((string)clusterUriValue);
                                            hDInsightBYOCLinkedServiceInstance.ClusterUri = clusterUriInstance;
                                        }
                                        
                                        JToken userNameValue = propertiesValue["userName"];
                                        if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                        {
                                            string userNameInstance = ((string)userNameValue);
                                            hDInsightBYOCLinkedServiceInstance.UserName = userNameInstance;
                                        }
                                        
                                        JToken passwordValue = propertiesValue["password"];
                                        if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                        {
                                            string passwordInstance = ((string)passwordValue);
                                            hDInsightBYOCLinkedServiceInstance.Password = passwordInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue = propertiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            hDInsightBYOCLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        
                                        JToken descriptionValue4 = propertiesValue["description"];
                                        if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance4 = ((string)descriptionValue4);
                                            hDInsightBYOCLinkedServiceInstance.Description = descriptionInstance4;
                                        }
                                        
                                        JToken provisioningStateValue4 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                            hDInsightBYOCLinkedServiceInstance.ProvisioningState = provisioningStateInstance4;
                                        }
                                        
                                        JToken hubNameValue4 = propertiesValue["hubName"];
                                        if (hubNameValue4 != null && hubNameValue4.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance4 = ((string)hubNameValue4);
                                            hDInsightBYOCLinkedServiceInstance.HubName = hubNameInstance4;
                                        }
                                        
                                        JToken errorMessageValue4 = propertiesValue["errorMessage"];
                                        if (errorMessageValue4 != null && errorMessageValue4.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance4 = ((string)errorMessageValue4);
                                            hDInsightBYOCLinkedServiceInstance.ErrorMessage = errorMessageInstance4;
                                        }
                                        linkedServiceInstance.Properties = hDInsightBYOCLinkedServiceInstance;
                                    }
                                    if (typeName == "HDInsightOnDemandLinkedService")
                                    {
                                        HDInsightOnDemandLinkedService hDInsightOnDemandLinkedServiceInstance = new HDInsightOnDemandLinkedService();
                                        
                                        JToken versionValue = propertiesValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            hDInsightOnDemandLinkedServiceInstance.Version = versionInstance;
                                        }
                                        
                                        JToken clusterSizeValue = propertiesValue["clusterSize"];
                                        if (clusterSizeValue != null && clusterSizeValue.Type != JTokenType.Null)
                                        {
                                            int clusterSizeInstance = ((int)clusterSizeValue);
                                            hDInsightOnDemandLinkedServiceInstance.ClusterSize = clusterSizeInstance;
                                        }
                                        
                                        JToken timeToLiveValue = propertiesValue["timeToLive"];
                                        if (timeToLiveValue != null && timeToLiveValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan timeToLiveInstance = TimeSpan.Parse(((string)timeToLiveValue), CultureInfo.InvariantCulture);
                                            hDInsightOnDemandLinkedServiceInstance.TimeToLive = timeToLiveInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue2 = propertiesValue["linkedServiceName"];
                                        if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                            hDInsightOnDemandLinkedServiceInstance.LinkedServiceName = linkedServiceNameInstance2;
                                        }
                                        
                                        JToken jobsContainerValue = propertiesValue["jobsContainer"];
                                        if (jobsContainerValue != null && jobsContainerValue.Type != JTokenType.Null)
                                        {
                                            string jobsContainerInstance = ((string)jobsContainerValue);
                                            hDInsightOnDemandLinkedServiceInstance.JobsContainer = jobsContainerInstance;
                                        }
                                        
                                        JToken hiveCustomLibrariesContainerValue = propertiesValue["hiveCustomLibrariesContainer"];
                                        if (hiveCustomLibrariesContainerValue != null && hiveCustomLibrariesContainerValue.Type != JTokenType.Null)
                                        {
                                            string hiveCustomLibrariesContainerInstance = ((string)hiveCustomLibrariesContainerValue);
                                            hDInsightOnDemandLinkedServiceInstance.HiveCustomLibrariesContainer = hiveCustomLibrariesContainerInstance;
                                        }
                                        
                                        JToken descriptionValue5 = propertiesValue["description"];
                                        if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance5 = ((string)descriptionValue5);
                                            hDInsightOnDemandLinkedServiceInstance.Description = descriptionInstance5;
                                        }
                                        
                                        JToken provisioningStateValue5 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                            hDInsightOnDemandLinkedServiceInstance.ProvisioningState = provisioningStateInstance5;
                                        }
                                        
                                        JToken hubNameValue5 = propertiesValue["hubName"];
                                        if (hubNameValue5 != null && hubNameValue5.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance5 = ((string)hubNameValue5);
                                            hDInsightOnDemandLinkedServiceInstance.HubName = hubNameInstance5;
                                        }
                                        
                                        JToken errorMessageValue5 = propertiesValue["errorMessage"];
                                        if (errorMessageValue5 != null && errorMessageValue5.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance5 = ((string)errorMessageValue5);
                                            hDInsightOnDemandLinkedServiceInstance.ErrorMessage = errorMessageInstance5;
                                        }
                                        linkedServiceInstance.Properties = hDInsightOnDemandLinkedServiceInstance;
                                    }
                                    if (typeName == "OnPremisesSqlLinkedService")
                                    {
                                        OnPremisesSqlLinkedService onPremisesSqlLinkedServiceInstance = new OnPremisesSqlLinkedService();
                                        
                                        JToken connectionStringValue3 = propertiesValue["connectionString"];
                                        if (connectionStringValue3 != null && connectionStringValue3.Type != JTokenType.Null)
                                        {
                                            string connectionStringInstance3 = ((string)connectionStringValue3);
                                            onPremisesSqlLinkedServiceInstance.ConnectionString = connectionStringInstance3;
                                        }
                                        
                                        JToken gatewayNameValue = propertiesValue["gatewayName"];
                                        if (gatewayNameValue != null && gatewayNameValue.Type != JTokenType.Null)
                                        {
                                            string gatewayNameInstance = ((string)gatewayNameValue);
                                            onPremisesSqlLinkedServiceInstance.GatewayName = gatewayNameInstance;
                                        }
                                        
                                        JToken gatewayLocationValue = propertiesValue["gatewayLocation"];
                                        if (gatewayLocationValue != null && gatewayLocationValue.Type != JTokenType.Null)
                                        {
                                            string gatewayLocationInstance = ((string)gatewayLocationValue);
                                            onPremisesSqlLinkedServiceInstance.GatewayLocation = gatewayLocationInstance;
                                        }
                                        
                                        JToken userNameValue2 = propertiesValue["userName"];
                                        if (userNameValue2 != null && userNameValue2.Type != JTokenType.Null)
                                        {
                                            string userNameInstance2 = ((string)userNameValue2);
                                            onPremisesSqlLinkedServiceInstance.UserName = userNameInstance2;
                                        }
                                        
                                        JToken passwordValue2 = propertiesValue["password"];
                                        if (passwordValue2 != null && passwordValue2.Type != JTokenType.Null)
                                        {
                                            string passwordInstance2 = ((string)passwordValue2);
                                            onPremisesSqlLinkedServiceInstance.Password = passwordInstance2;
                                        }
                                        
                                        JToken descriptionValue6 = propertiesValue["description"];
                                        if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance6 = ((string)descriptionValue6);
                                            onPremisesSqlLinkedServiceInstance.Description = descriptionInstance6;
                                        }
                                        
                                        JToken provisioningStateValue6 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                            onPremisesSqlLinkedServiceInstance.ProvisioningState = provisioningStateInstance6;
                                        }
                                        
                                        JToken hubNameValue6 = propertiesValue["hubName"];
                                        if (hubNameValue6 != null && hubNameValue6.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance6 = ((string)hubNameValue6);
                                            onPremisesSqlLinkedServiceInstance.HubName = hubNameInstance6;
                                        }
                                        
                                        JToken errorMessageValue6 = propertiesValue["errorMessage"];
                                        if (errorMessageValue6 != null && errorMessageValue6.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance6 = ((string)errorMessageValue6);
                                            onPremisesSqlLinkedServiceInstance.ErrorMessage = errorMessageInstance6;
                                        }
                                        linkedServiceInstance.Properties = onPremisesSqlLinkedServiceInstance;
                                    }
                                }
                            }
                        }
                        
                        JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                        if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                        {
                            string odatanextLinkInstance = ((string)odatanextLinkValue);
                            result.NextLink = odatanextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
