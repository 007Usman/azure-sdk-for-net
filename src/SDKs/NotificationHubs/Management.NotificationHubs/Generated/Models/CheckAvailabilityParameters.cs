// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NotificationHubs.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Parameters supplied to the Check Name Availability for Namespace and
    /// NotificationHubs.
    /// </summary>
    public partial class CheckAvailabilityParameters
    {
        /// <summary>
        /// Initializes a new instance of the CheckAvailabilityParameters
        /// class.
        /// </summary>
        public CheckAvailabilityParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CheckAvailabilityParameters
        /// class.
        /// </summary>
        /// <param name="name">Gets or sets name</param>
        /// <param name="location">Gets or sets location.</param>
        /// <param name="tags">Gets or sets tags.</param>
        /// <param name="isAvailiable">Gets or sets true if the name is
        /// available and can be used to create new Namespace/NotificationHub.
        /// Otherwise false.</param>
        public CheckAvailabilityParameters(string name, string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), bool? isAvailiable = default(bool?))
        {
            Name = name;
            Location = location;
            Tags = tags;
            IsAvailiable = isAvailiable;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets location.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets true if the name is available and can be used to
        /// create new Namespace/NotificationHub. Otherwise false.
        /// </summary>
        [JsonProperty(PropertyName = "isAvailiable")]
        public bool? IsAvailiable { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
