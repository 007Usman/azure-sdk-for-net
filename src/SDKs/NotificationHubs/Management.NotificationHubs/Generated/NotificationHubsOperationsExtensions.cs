// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NotificationHubs
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NotificationhubsOperations.
    /// </summary>
    public static partial class NotificationhubsOperationsExtensions
    {
            /// <summary>
            /// Gets the notificationhubs within a namespace.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt639415.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='skip'>
            /// Skip is only used if a previous operation returned a partial result. If a
            /// previous response contains a nextLink element, the value of the nextLink
            /// element will include a skip parameter that specifies a starting point to
            /// use for subsequent calls.
            /// </param>
            /// <param name='top'>
            /// May be used to limit the number of results to the most recent N
            /// usageDetails.
            /// </param>
            public static IPage<NH> ListByNamespace(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, int? skip = default(int?), int? top = default(int?))
            {
                return operations.ListByNamespaceAsync(resourceGroupName, namespaceName, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the notificationhubs within a namespace.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt639415.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='skip'>
            /// Skip is only used if a previous operation returned a partial result. If a
            /// previous response contains a nextLink element, the value of the nextLink
            /// element will include a skip parameter that specifies a starting point to
            /// use for subsequent calls.
            /// </param>
            /// <param name='top'>
            /// May be used to limit the number of results to the most recent N
            /// usageDetails.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NH>> ListByNamespaceAsync(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByNamespaceWithHttpMessagesAsync(resourceGroupName, namespaceName, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Notification Hubs notificationhub. This operation is
            /// idempotent.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt639395.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create or update a notificationhub resource.
            /// </param>
            public static NH CreateOrUpdate(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, NH parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, namespaceName, notificationhubName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Notification Hubs notificationhub. This operation is
            /// idempotent.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt639395.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create or update a notificationhub resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NH> CreateOrUpdateAsync(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, NH parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, notificationhubName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a notificationhub from the specified namespace in a resource group.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt639411.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            public static void Delete(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName)
            {
                operations.DeleteAsync(resourceGroupName, namespaceName, notificationhubName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a notificationhub from the specified namespace in a resource group.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt639411.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, namespaceName, notificationhubName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a description for the specified notificationhub.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt639380.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            public static NH Get(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName)
            {
                return operations.GetAsync(resourceGroupName, namespaceName, notificationhubName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a description for the specified notificationhub.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt639380.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NH> GetAsync(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, namespaceName, notificationhubName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all authorization rules for a notificationhub.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt705607.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            public static IPage<NHAuthorizationRule> ListAuthorizationRules(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName)
            {
                return operations.ListAuthorizationRulesAsync(resourceGroupName, namespaceName, notificationhubName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all authorization rules for a notificationhub.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt705607.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NHAuthorizationRule>> ListAuthorizationRulesAsync(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAuthorizationRulesWithHttpMessagesAsync(resourceGroupName, namespaceName, notificationhubName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an authorization rule for a notificationhub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='authorizationRuleName'>
            /// The authorizationrule name.
            /// </param>
            /// <param name='parameters'>
            /// The shared access authorization rule.
            /// </param>
            public static NHAuthorizationRule CreateOrUpdateAuthorizationRule(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, string authorizationRuleName, NHAuthorizationRule parameters)
            {
                return operations.CreateOrUpdateAuthorizationRuleAsync(resourceGroupName, namespaceName, notificationhubName, authorizationRuleName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an authorization rule for a notificationhub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='authorizationRuleName'>
            /// The authorizationrule name.
            /// </param>
            /// <param name='parameters'>
            /// The shared access authorization rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NHAuthorizationRule> CreateOrUpdateAuthorizationRuleAsync(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, string authorizationRuleName, NHAuthorizationRule parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAuthorizationRuleWithHttpMessagesAsync(resourceGroupName, namespaceName, notificationhubName, authorizationRuleName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a notificationhub authorization rule.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt705609.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='authorizationRuleName'>
            /// The authorizationrule name.
            /// </param>
            public static void DeleteAuthorizationRule(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, string authorizationRuleName)
            {
                operations.DeleteAuthorizationRuleAsync(resourceGroupName, namespaceName, notificationhubName, authorizationRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a notificationhub authorization rule.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt705609.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='authorizationRuleName'>
            /// The authorizationrule name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAuthorizationRuleAsync(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, string authorizationRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAuthorizationRuleWithHttpMessagesAsync(resourceGroupName, namespaceName, notificationhubName, authorizationRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an authorization rule for a notificationhub by rule name.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt705611.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='authorizationRuleName'>
            /// The authorizationrule name.
            /// </param>
            public static NHAuthorizationRule GetAuthorizationRule(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, string authorizationRuleName)
            {
                return operations.GetAuthorizationRuleAsync(resourceGroupName, namespaceName, notificationhubName, authorizationRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an authorization rule for a notificationhub by rule name.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt705611.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='authorizationRuleName'>
            /// The authorizationrule name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NHAuthorizationRule> GetAuthorizationRuleAsync(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, string authorizationRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthorizationRuleWithHttpMessagesAsync(resourceGroupName, namespaceName, notificationhubName, authorizationRuleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Primary and secondary connection strings to the notificationhub.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt705608.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='authorizationRuleName'>
            /// The authorizationrule name.
            /// </param>
            public static AccessKeys ListKeys(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, string authorizationRuleName)
            {
                return operations.ListKeysAsync(resourceGroupName, namespaceName, notificationhubName, authorizationRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Primary and secondary connection strings to the notificationhub.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt705608.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='authorizationRuleName'>
            /// The authorizationrule name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessKeys> ListKeysAsync(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, string authorizationRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysWithHttpMessagesAsync(resourceGroupName, namespaceName, notificationhubName, authorizationRuleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerates the primary or secondary connection strings to the
            /// notificationhub.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt705606.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='authorizationRuleName'>
            /// The authorizationrule name.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to regenerate the authorization rule.
            /// </param>
            public static AccessKeys RegenerateKeys(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, string authorizationRuleName, RegenerateAccessKeyParameters parameters)
            {
                return operations.RegenerateKeysAsync(resourceGroupName, namespaceName, notificationhubName, authorizationRuleName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerates the primary or secondary connection strings to the
            /// notificationhub.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt705606.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name
            /// </param>
            /// <param name='notificationhubName'>
            /// The notificationhub name.
            /// </param>
            /// <param name='authorizationRuleName'>
            /// The authorizationrule name.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to regenerate the authorization rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessKeys> RegenerateKeysAsync(this INotificationhubsOperations operations, string resourceGroupName, string namespaceName, string notificationhubName, string authorizationRuleName, RegenerateAccessKeyParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateKeysWithHttpMessagesAsync(resourceGroupName, namespaceName, notificationhubName, authorizationRuleName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the notificationhubs within a namespace.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt639415.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NH> ListByNamespaceNext(this INotificationhubsOperations operations, string nextPageLink)
            {
                return operations.ListByNamespaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the notificationhubs within a namespace.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt639415.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NH>> ListByNamespaceNextAsync(this INotificationhubsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByNamespaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all authorization rules for a notificationhub.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt705607.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NHAuthorizationRule> ListAuthorizationRulesNext(this INotificationhubsOperations operations, string nextPageLink)
            {
                return operations.ListAuthorizationRulesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all authorization rules for a notificationhub.
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt705607.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NHAuthorizationRule>> ListAuthorizationRulesNextAsync(this INotificationhubsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAuthorizationRulesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
