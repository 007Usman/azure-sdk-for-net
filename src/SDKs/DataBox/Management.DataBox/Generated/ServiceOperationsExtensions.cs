// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBox
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServiceOperations.
    /// </summary>
    public static partial class ServiceOperationsExtensions
    {
            /// <summary>
            /// This method provides the list of available skus for the given subscription
            /// and location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='country'>
            /// ISO country code. Country for hardware shipment. For codes check:
            /// https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements
            /// </param>
            /// <param name='location1'>
            /// Location for data transfer. For locations check:
            /// https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01
            /// </param>
            public static IPage<SkuInformation> ListAvailableSkus(this IServiceOperations operations, string location, string country, string location1)
            {
                return operations.ListAvailableSkusAsync(location, country, location1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of available skus for the given subscription
            /// and location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='country'>
            /// ISO country code. Country for hardware shipment. For codes check:
            /// https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements
            /// </param>
            /// <param name='location1'>
            /// Location for data transfer. For locations check:
            /// https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInformation>> ListAvailableSkusAsync(this IServiceOperations operations, string location, string country, string location1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAvailableSkusWithHttpMessagesAsync(location, country, location1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method returns the health of partner services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            public static ServiceHealthResponseList GetServiceHealth(this IServiceOperations operations, string location)
            {
                return operations.GetServiceHealthAsync(location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method returns the health of partner services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceHealthResponseList> GetServiceHealthAsync(this IServiceOperations operations, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServiceHealthWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method validates the customer shipping address and provide alternate
            /// addresses if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='shippingAddress'>
            /// Shipping address of the customer.
            /// </param>
            /// <param name='deviceType'>
            /// Device type to be used for the job. Possible values include: 'Pod', 'Disk',
            /// 'Cabinet'
            /// </param>
            public static AddressValidationOutput ValidateAddressMethod(this IServiceOperations operations, string location, ShippingAddress shippingAddress = default(ShippingAddress), DeviceType? deviceType = default(DeviceType?))
            {
                return operations.ValidateAddressMethodAsync(location, shippingAddress, deviceType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method validates the customer shipping address and provide alternate
            /// addresses if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='shippingAddress'>
            /// Shipping address of the customer.
            /// </param>
            /// <param name='deviceType'>
            /// Device type to be used for the job. Possible values include: 'Pod', 'Disk',
            /// 'Cabinet'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressValidationOutput> ValidateAddressMethodAsync(this IServiceOperations operations, string location, ShippingAddress shippingAddress = default(ShippingAddress), DeviceType? deviceType = default(DeviceType?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateAddressMethodWithHttpMessagesAsync(location, shippingAddress, deviceType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of available skus for the given subscription
            /// and location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SkuInformation> ListAvailableSkusNext(this IServiceOperations operations, string nextPageLink)
            {
                return operations.ListAvailableSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of available skus for the given subscription
            /// and location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInformation>> ListAvailableSkusNextAsync(this IServiceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAvailableSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
