// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagementGroups
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EntitiesOperations.
    /// </summary>
    public static partial class EntitiesOperationsExtensions
    {
            /// <summary>
            /// List all entities (Management Groups, Subscriptions, etc.) for the
            /// authenticated user.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// A filter which allows the call to be filtered for a specific group.
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates that the request shouldn't utilize any caches.
            /// </param>
            public static IPage<EntityInfo> List(this IEntitiesOperations operations, string groupName = default(string), string cacheControl = "no-cache")
            {
                return operations.ListAsync(groupName, cacheControl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all entities (Management Groups, Subscriptions, etc.) for the
            /// authenticated user.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupName'>
            /// A filter which allows the call to be filtered for a specific group.
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates that the request shouldn't utilize any caches.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EntityInfo>> ListAsync(this IEntitiesOperations operations, string groupName = default(string), string cacheControl = "no-cache", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(groupName, cacheControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all entities (Management Groups, Subscriptions, etc.) for the
            /// authenticated user.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates that the request shouldn't utilize any caches.
            /// </param>
            public static IPage<EntityInfo> ListNext(this IEntitiesOperations operations, string nextPageLink, string cacheControl = "no-cache")
            {
                return operations.ListNextAsync(nextPageLink, cacheControl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all entities (Management Groups, Subscriptions, etc.) for the
            /// authenticated user.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates that the request shouldn't utilize any caches.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EntityInfo>> ListNextAsync(this IEntitiesOperations operations, string nextPageLink, string cacheControl = "no-cache", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, cacheControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
