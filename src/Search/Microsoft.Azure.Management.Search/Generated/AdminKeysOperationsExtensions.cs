// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Search
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for AdminKeysOperations.
    /// </summary>
    public static partial class AdminKeysOperationsExtensions
    {
            /// <summary>
            /// Returns the primary and secondary API keys for the given Azure Search
            /// service.
            /// <see href="https://msdn.microsoft.com/library/azure/dn832685.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the current subscription.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Search service for which to list admin keys.
            /// </param>
            public static AdminKeyResult List(this IAdminKeysOperations operations, string resourceGroupName, string serviceName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAdminKeysOperations)s).ListAsync(resourceGroupName, serviceName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the primary and secondary API keys for the given Azure Search
            /// service.
            /// <see href="https://msdn.microsoft.com/library/azure/dn832685.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the current subscription.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Search service for which to list admin keys.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AdminKeyResult> ListAsync(this IAdminKeysOperations operations, string resourceGroupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes and regenerates either the primary or secondary admin key. You can
            /// only regenerate one key at a time.
            /// <see href="https://msdn.microsoft.com/library/azure/dn832700.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the current subscription.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Search service for which to list admin keys.
            /// </param>
            /// <param name='keyKind'>
            /// Specifies which key to regenerate. Valid values include primary and
            /// secondary. Possible values include: 'primary', 'secondary'
            /// </param>
            public static AdminKeyResult Regenerate(this IAdminKeysOperations operations, string resourceGroupName, string serviceName, AdminKeyKind keyKind)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAdminKeysOperations)s).RegenerateAsync(resourceGroupName, serviceName, keyKind), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes and regenerates either the primary or secondary admin key. You can
            /// only regenerate one key at a time.
            /// <see href="https://msdn.microsoft.com/library/azure/dn832700.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the current subscription.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Search service for which to list admin keys.
            /// </param>
            /// <param name='keyKind'>
            /// Specifies which key to regenerate. Valid values include primary and
            /// secondary. Possible values include: 'primary', 'secondary'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AdminKeyResult> RegenerateAsync(this IAdminKeysOperations operations, string resourceGroupName, string serviceName, AdminKeyKind keyKind, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RegenerateWithHttpMessagesAsync(resourceGroupName, serviceName, keyKind, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
