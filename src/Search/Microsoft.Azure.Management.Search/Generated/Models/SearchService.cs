// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Search.Models
{
    using System.Linq;

    /// <summary>
    /// Describes an Azure Search service and its current state.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SearchService : Resource
    {
        /// <summary>
        /// Initializes a new instance of the SearchService class.
        /// </summary>
        public SearchService() { }

        /// <summary>
        /// Initializes a new instance of the SearchService class.
        /// </summary>
        /// <param name="location">The geographic location of the
        /// resource.</param>
        /// <param name="sku">The SKU of the Search Service, which determines
        /// price tier and capacity limits.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The resource type.</param>
        /// <param name="tags">Tags to help categorize the resource in the
        /// Azure Portal.</param>
        /// <param name="replicaCount">The number of replicas in the Search
        /// service. If specified, it must be a value between 1 and 12
        /// inclusive for standard SKUs or between 1 and 3 inclusive for
        /// basic SKU.</param>
        /// <param name="partitionCount">The number of partitions in the
        /// Search service; if specified, it can be 1, 2, 3, 4, 6, or 12.
        /// Valid only for SKUs that have more than one partition.</param>
        /// <param name="hostingMode">Applicable only for the standard3 SKU.
        /// You can set this property to enable a single, high density
        /// partition that allows up to 1000 indexes, which is much higher
        /// than the maximum indexes allowed for any other SKU. For the
        /// standard3 SKU, the value is either 'default' or 'highDensity'.
        /// For all other SKUs, this value must be 'default'. Possible values
        /// include: 'default', 'highDensity'</param>
        /// <param name="status">The status of the Search service at the time
        /// the operation was called. Possible values include: 'running',
        /// 'provisioning', 'deleting', 'degraded', 'disabled',
        /// 'error'</param>
        /// <param name="statusDetails">The details of the Search service
        /// status.</param>
        /// <param name="provisioningState">The state of the last provisioning
        /// operation performed on the Search service. Possible values
        /// include: 'succeeded', 'provisioning', 'failed'</param>
        public SearchService(string location, Sku sku, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), int? replicaCount = default(int?), int? partitionCount = default(int?), HostingMode? hostingMode = default(HostingMode?), SearchServiceStatus? status = default(SearchServiceStatus?), string statusDetails = default(string), ProvisioningState? provisioningState = default(ProvisioningState?))
            : base(location, id, name, type, tags)
        {
            ReplicaCount = replicaCount;
            PartitionCount = partitionCount;
            HostingMode = hostingMode;
            Status = status;
            StatusDetails = statusDetails;
            ProvisioningState = provisioningState;
            Sku = sku;
        }

        /// <summary>
        /// Gets or sets the number of replicas in the Search service. If
        /// specified, it must be a value between 1 and 12 inclusive for
        /// standard SKUs or between 1 and 3 inclusive for basic SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.replicaCount")]
        public int? ReplicaCount { get; set; }

        /// <summary>
        /// Gets or sets the number of partitions in the Search service; if
        /// specified, it can be 1, 2, 3, 4, 6, or 12. Valid only for SKUs
        /// that have more than one partition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.partitionCount")]
        public int? PartitionCount { get; set; }

        /// <summary>
        /// Gets or sets applicable only for the standard3 SKU. You can set
        /// this property to enable a single, high density partition that
        /// allows up to 1000 indexes, which is much higher than the maximum
        /// indexes allowed for any other SKU. For the standard3 SKU, the
        /// value is either 'default' or 'highDensity'. For all other SKUs,
        /// this value must be 'default'. Possible values include: 'default',
        /// 'highDensity'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostingMode")]
        public HostingMode? HostingMode { get; set; }

        /// <summary>
        /// Gets the status of the Search service at the time the operation
        /// was called. Possible values include: 'running', 'provisioning',
        /// 'deleting', 'degraded', 'disabled', 'error'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public SearchServiceStatus? Status { get; private set; }

        /// <summary>
        /// Gets the details of the Search service status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.statusDetails")]
        public string StatusDetails { get; private set; }

        /// <summary>
        /// Gets the state of the last provisioning operation performed on the
        /// Search service. Possible values include: 'succeeded',
        /// 'provisioning', 'failed'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the SKU of the Search Service, which determines price
        /// tier and capacity limits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Sku == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Sku");
            }
            if (this.ReplicaCount > 12)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "ReplicaCount", 12);
            }
            if (this.ReplicaCount < 1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ReplicaCount", 1);
            }
            if (this.PartitionCount > 12)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "PartitionCount", 12);
            }
            if (this.PartitionCount < 1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "PartitionCount", 1);
            }
        }
    }
}
