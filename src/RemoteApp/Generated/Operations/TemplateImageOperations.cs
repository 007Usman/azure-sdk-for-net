// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.RemoteApp.Models.Images;
using Microsoft.Azure.Management.RemoteApp.Operations;
using Microsoft.Azure.Management.RemoteApp.Responses.Common;
using Microsoft.Azure.Management.RemoteApp.Responses.Images;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RemoteApp.Operations
{
    /// <summary>
    /// Operations to create, modify, list, and delete template images.
    /// </summary>
    internal partial class TemplateImageOperations : IServiceOperations<RemoteAppManagementClient>, ITemplateImageOperations
    {
        /// <summary>
        /// Initializes a new instance of the TemplateImageOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal TemplateImageOperations(RemoteAppManagementClient client)
        {
            this._client = client;
        }
        
        private RemoteAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RemoteApp.Operations.RemoteAppManagementClient.
        /// </summary>
        public RemoteAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Deletes an existing template image.
        /// </summary>
        /// <param name='imageId'>
        /// Required. The template image id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string imageId, CancellationToken cancellationToken)
        {
            // Validate
            if (imageId == null)
            {
                throw new ArgumentNullException("imageId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageId", imageId);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/templateImages/" + Uri.EscapeDataString(imageId) + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Ensures storage is ready for the given region. Call this before
        /// uploading an image.
        /// </summary>
        /// <param name='region'>
        /// Required. Azure datacenter region.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public async Task<OperationResultWithTrackingId> EnsureStorageInRegionAsync(string region, CancellationToken cancellationToken)
        {
            // Validate
            if (region == null)
            {
                throw new ArgumentNullException("region");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("region", region);
                TracingAdapter.Enter(invocationId, this, "EnsureStorageInRegionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/storage/" + Uri.EscapeDataString(region) + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResultWithTrackingId result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new OperationResultWithTrackingId();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken trackingIdValue = responseDoc["TrackingId"];
                            if (trackingIdValue != null && trackingIdValue.Type != JTokenType.Null)
                            {
                                string trackingIdInstance = ((string)trackingIdValue);
                                result.TrackingId = trackingIdInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets details of a template image for the subscription.
        /// </summary>
        /// <param name='imageName'>
        /// Required. Name of the template image.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.Get.
        /// </returns>
        public async Task<TemplateImageResponse> GetAsync(string imageName, CancellationToken cancellationToken)
        {
            // Validate
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/templateImages/" + Uri.EscapeDataString(imageName) + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TemplateImageResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TemplateImageResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            TemplateImage templateImageInstance = new TemplateImage();
                            result.TemplateImage = templateImageInstance;
                            
                            JToken idValue = responseDoc["Id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                templateImageInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["Name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                templateImageInstance.Name = nameInstance;
                            }
                            
                            JToken pathOnClientValue = responseDoc["PathOnClient"];
                            if (pathOnClientValue != null && pathOnClientValue.Type != JTokenType.Null)
                            {
                                string pathOnClientInstance = ((string)pathOnClientValue);
                                templateImageInstance.PathOnClient = pathOnClientInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                TemplateImageStatus statusInstance = ((TemplateImageStatus)Enum.Parse(typeof(TemplateImageStatus), ((string)statusValue), true));
                                templateImageInstance.Status = statusInstance;
                            }
                            
                            JToken sizeValue = responseDoc["Size"];
                            if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                            {
                                long sizeInstance = ((long)sizeValue);
                                templateImageInstance.Size = sizeInstance;
                            }
                            
                            JToken geoValue = responseDoc["Geo"];
                            if (geoValue != null && geoValue.Type != JTokenType.Null)
                            {
                                string geoInstance = ((string)geoValue);
                                templateImageInstance.Geo = geoInstance;
                            }
                            
                            JToken uriValue = responseDoc["Uri"];
                            if (uriValue != null && uriValue.Type != JTokenType.Null)
                            {
                                string uriInstance = ((string)uriValue);
                                templateImageInstance.Uri = uriInstance;
                            }
                            
                            JToken sasValue = responseDoc["Sas"];
                            if (sasValue != null && sasValue.Type != JTokenType.Null)
                            {
                                string sasInstance = ((string)sasValue);
                                templateImageInstance.Sas = sasInstance;
                            }
                            
                            JToken sasExpiryValue = responseDoc["SasExpiry"];
                            if (sasExpiryValue != null && sasExpiryValue.Type != JTokenType.Null)
                            {
                                DateTime sasExpiryInstance = ((DateTime)sasExpiryValue);
                                templateImageInstance.SasExpiry = sasExpiryInstance;
                            }
                            
                            JToken uploadSetupTimeValue = responseDoc["UploadSetupTime"];
                            if (uploadSetupTimeValue != null && uploadSetupTimeValue.Type != JTokenType.Null)
                            {
                                DateTime uploadSetupTimeInstance = ((DateTime)uploadSetupTimeValue);
                                templateImageInstance.UploadSetupTime = uploadSetupTimeInstance;
                            }
                            
                            JToken uploadStartTimeValue = responseDoc["UploadStartTime"];
                            if (uploadStartTimeValue != null && uploadStartTimeValue.Type != JTokenType.Null)
                            {
                                DateTime uploadStartTimeInstance = ((DateTime)uploadStartTimeValue);
                                templateImageInstance.UploadStartTime = uploadStartTimeInstance;
                            }
                            
                            JToken uploadCompleteTimeValue = responseDoc["UploadCompleteTime"];
                            if (uploadCompleteTimeValue != null && uploadCompleteTimeValue.Type != JTokenType.Null)
                            {
                                DateTime uploadCompleteTimeInstance = ((DateTime)uploadCompleteTimeValue);
                                templateImageInstance.UploadCompleteTime = uploadCompleteTimeInstance;
                            }
                            
                            JToken subscriptionIdValue = responseDoc["SubscriptionId"];
                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                            {
                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                templateImageInstance.SubscriptionId = subscriptionIdInstance;
                            }
                            
                            JToken numberOfRemoteAppServicesUsingThisImageValue = responseDoc["NumberOfRemoteAppServicesUsingThisImage"];
                            if (numberOfRemoteAppServicesUsingThisImageValue != null && numberOfRemoteAppServicesUsingThisImageValue.Type != JTokenType.Null)
                            {
                                int numberOfRemoteAppServicesUsingThisImageInstance = ((int)numberOfRemoteAppServicesUsingThisImageValue);
                                templateImageInstance.NumberOfRemoteAppServicesUsingThisImage = numberOfRemoteAppServicesUsingThisImageInstance;
                            }
                            
                            JToken typeValue = responseDoc["Type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                TemplateImageType typeInstance = ((TemplateImageType)Enum.Parse(typeof(TemplateImageType), ((string)typeValue), true));
                                templateImageInstance.Type = typeInstance;
                            }
                            
                            JToken locationListArray = responseDoc["LocationList"];
                            if (locationListArray != null && locationListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken locationListValue in ((JArray)locationListArray))
                                {
                                    templateImageInstance.LocationList.Add(((string)locationListValue));
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the script for template image upload. Pass this script Uri and
        /// SAS obtianed from template image Set or Get operations.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetUploadScript operation.
        /// </returns>
        public async Task<GetUploadScriptResult> GetUploadScriptAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "GetUploadScriptAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/templateImages/uploadScript?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetUploadScriptResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetUploadScriptResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            string scriptInstance = ((string)responseDoc);
                            result.Script = scriptInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a list of template images for the subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        public async Task<ListTemplateImageResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/templateImages?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListTemplateImageResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListTemplateImageResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken remoteAppTemplateImageListArray = responseDoc;
                            if (remoteAppTemplateImageListArray != null && remoteAppTemplateImageListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken remoteAppTemplateImageListValue in ((JArray)remoteAppTemplateImageListArray))
                                {
                                    TemplateImage templateImageInstance = new TemplateImage();
                                    result.RemoteAppTemplateImageList.Add(templateImageInstance);
                                    
                                    JToken idValue = remoteAppTemplateImageListValue["Id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        templateImageInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = remoteAppTemplateImageListValue["Name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        templateImageInstance.Name = nameInstance;
                                    }
                                    
                                    JToken pathOnClientValue = remoteAppTemplateImageListValue["PathOnClient"];
                                    if (pathOnClientValue != null && pathOnClientValue.Type != JTokenType.Null)
                                    {
                                        string pathOnClientInstance = ((string)pathOnClientValue);
                                        templateImageInstance.PathOnClient = pathOnClientInstance;
                                    }
                                    
                                    JToken statusValue = remoteAppTemplateImageListValue["Status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        TemplateImageStatus statusInstance = ((TemplateImageStatus)Enum.Parse(typeof(TemplateImageStatus), ((string)statusValue), true));
                                        templateImageInstance.Status = statusInstance;
                                    }
                                    
                                    JToken sizeValue = remoteAppTemplateImageListValue["Size"];
                                    if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                                    {
                                        long sizeInstance = ((long)sizeValue);
                                        templateImageInstance.Size = sizeInstance;
                                    }
                                    
                                    JToken geoValue = remoteAppTemplateImageListValue["Geo"];
                                    if (geoValue != null && geoValue.Type != JTokenType.Null)
                                    {
                                        string geoInstance = ((string)geoValue);
                                        templateImageInstance.Geo = geoInstance;
                                    }
                                    
                                    JToken uriValue = remoteAppTemplateImageListValue["Uri"];
                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                    {
                                        string uriInstance = ((string)uriValue);
                                        templateImageInstance.Uri = uriInstance;
                                    }
                                    
                                    JToken sasValue = remoteAppTemplateImageListValue["Sas"];
                                    if (sasValue != null && sasValue.Type != JTokenType.Null)
                                    {
                                        string sasInstance = ((string)sasValue);
                                        templateImageInstance.Sas = sasInstance;
                                    }
                                    
                                    JToken sasExpiryValue = remoteAppTemplateImageListValue["SasExpiry"];
                                    if (sasExpiryValue != null && sasExpiryValue.Type != JTokenType.Null)
                                    {
                                        DateTime sasExpiryInstance = ((DateTime)sasExpiryValue);
                                        templateImageInstance.SasExpiry = sasExpiryInstance;
                                    }
                                    
                                    JToken uploadSetupTimeValue = remoteAppTemplateImageListValue["UploadSetupTime"];
                                    if (uploadSetupTimeValue != null && uploadSetupTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime uploadSetupTimeInstance = ((DateTime)uploadSetupTimeValue);
                                        templateImageInstance.UploadSetupTime = uploadSetupTimeInstance;
                                    }
                                    
                                    JToken uploadStartTimeValue = remoteAppTemplateImageListValue["UploadStartTime"];
                                    if (uploadStartTimeValue != null && uploadStartTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime uploadStartTimeInstance = ((DateTime)uploadStartTimeValue);
                                        templateImageInstance.UploadStartTime = uploadStartTimeInstance;
                                    }
                                    
                                    JToken uploadCompleteTimeValue = remoteAppTemplateImageListValue["UploadCompleteTime"];
                                    if (uploadCompleteTimeValue != null && uploadCompleteTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime uploadCompleteTimeInstance = ((DateTime)uploadCompleteTimeValue);
                                        templateImageInstance.UploadCompleteTime = uploadCompleteTimeInstance;
                                    }
                                    
                                    JToken subscriptionIdValue = remoteAppTemplateImageListValue["SubscriptionId"];
                                    if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                    {
                                        string subscriptionIdInstance = ((string)subscriptionIdValue);
                                        templateImageInstance.SubscriptionId = subscriptionIdInstance;
                                    }
                                    
                                    JToken numberOfRemoteAppServicesUsingThisImageValue = remoteAppTemplateImageListValue["NumberOfRemoteAppServicesUsingThisImage"];
                                    if (numberOfRemoteAppServicesUsingThisImageValue != null && numberOfRemoteAppServicesUsingThisImageValue.Type != JTokenType.Null)
                                    {
                                        int numberOfRemoteAppServicesUsingThisImageInstance = ((int)numberOfRemoteAppServicesUsingThisImageValue);
                                        templateImageInstance.NumberOfRemoteAppServicesUsingThisImage = numberOfRemoteAppServicesUsingThisImageInstance;
                                    }
                                    
                                    JToken typeValue = remoteAppTemplateImageListValue["Type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        TemplateImageType typeInstance = ((TemplateImageType)Enum.Parse(typeof(TemplateImageType), ((string)typeValue), true));
                                        templateImageInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationListArray = remoteAppTemplateImageListValue["LocationList"];
                                    if (locationListArray != null && locationListArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken locationListValue in ((JArray)locationListArray))
                                        {
                                            templateImageInstance.LocationList.Add(((string)locationListValue));
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Sets a template image details.  If the template image already
        /// exists, only the Name can be changed.
        /// </summary>
        /// <param name='imageDetails'>
        /// Required. Details for the template image to be created or updated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        public async Task<SetTemplateImageResponse> SetAsync(SetTemplateImageDetails imageDetails, CancellationToken cancellationToken)
        {
            // Validate
            if (imageDetails == null)
            {
                throw new ArgumentNullException("imageDetails");
            }
            if (imageDetails.Name == null)
            {
                throw new ArgumentNullException("imageDetails.Name");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageDetails", imageDetails);
                TracingAdapter.Enter(invocationId, this, "SetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/templateImages?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject setTemplateImageDetailsValue = new JObject();
                requestDoc = setTemplateImageDetailsValue;
                
                if (imageDetails.Id != null)
                {
                    setTemplateImageDetailsValue["Id"] = imageDetails.Id;
                }
                
                setTemplateImageDetailsValue["Name"] = imageDetails.Name;
                
                if (imageDetails.Region != null)
                {
                    setTemplateImageDetailsValue["Region"] = imageDetails.Region;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SetTemplateImageResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SetTemplateImageResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            TemplateImage remoteAppTemplateImageInstance = new TemplateImage();
                            result.RemoteAppTemplateImage = remoteAppTemplateImageInstance;
                            
                            JToken idValue = responseDoc["Id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                remoteAppTemplateImageInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["Name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                remoteAppTemplateImageInstance.Name = nameInstance;
                            }
                            
                            JToken pathOnClientValue = responseDoc["PathOnClient"];
                            if (pathOnClientValue != null && pathOnClientValue.Type != JTokenType.Null)
                            {
                                string pathOnClientInstance = ((string)pathOnClientValue);
                                remoteAppTemplateImageInstance.PathOnClient = pathOnClientInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                TemplateImageStatus statusInstance = ((TemplateImageStatus)Enum.Parse(typeof(TemplateImageStatus), ((string)statusValue), true));
                                remoteAppTemplateImageInstance.Status = statusInstance;
                            }
                            
                            JToken sizeValue = responseDoc["Size"];
                            if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                            {
                                long sizeInstance = ((long)sizeValue);
                                remoteAppTemplateImageInstance.Size = sizeInstance;
                            }
                            
                            JToken geoValue = responseDoc["Geo"];
                            if (geoValue != null && geoValue.Type != JTokenType.Null)
                            {
                                string geoInstance = ((string)geoValue);
                                remoteAppTemplateImageInstance.Geo = geoInstance;
                            }
                            
                            JToken uriValue = responseDoc["Uri"];
                            if (uriValue != null && uriValue.Type != JTokenType.Null)
                            {
                                string uriInstance = ((string)uriValue);
                                remoteAppTemplateImageInstance.Uri = uriInstance;
                            }
                            
                            JToken sasValue = responseDoc["Sas"];
                            if (sasValue != null && sasValue.Type != JTokenType.Null)
                            {
                                string sasInstance = ((string)sasValue);
                                remoteAppTemplateImageInstance.Sas = sasInstance;
                            }
                            
                            JToken sasExpiryValue = responseDoc["SasExpiry"];
                            if (sasExpiryValue != null && sasExpiryValue.Type != JTokenType.Null)
                            {
                                DateTime sasExpiryInstance = ((DateTime)sasExpiryValue);
                                remoteAppTemplateImageInstance.SasExpiry = sasExpiryInstance;
                            }
                            
                            JToken uploadSetupTimeValue = responseDoc["UploadSetupTime"];
                            if (uploadSetupTimeValue != null && uploadSetupTimeValue.Type != JTokenType.Null)
                            {
                                DateTime uploadSetupTimeInstance = ((DateTime)uploadSetupTimeValue);
                                remoteAppTemplateImageInstance.UploadSetupTime = uploadSetupTimeInstance;
                            }
                            
                            JToken uploadStartTimeValue = responseDoc["UploadStartTime"];
                            if (uploadStartTimeValue != null && uploadStartTimeValue.Type != JTokenType.Null)
                            {
                                DateTime uploadStartTimeInstance = ((DateTime)uploadStartTimeValue);
                                remoteAppTemplateImageInstance.UploadStartTime = uploadStartTimeInstance;
                            }
                            
                            JToken uploadCompleteTimeValue = responseDoc["UploadCompleteTime"];
                            if (uploadCompleteTimeValue != null && uploadCompleteTimeValue.Type != JTokenType.Null)
                            {
                                DateTime uploadCompleteTimeInstance = ((DateTime)uploadCompleteTimeValue);
                                remoteAppTemplateImageInstance.UploadCompleteTime = uploadCompleteTimeInstance;
                            }
                            
                            JToken subscriptionIdValue = responseDoc["SubscriptionId"];
                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                            {
                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                remoteAppTemplateImageInstance.SubscriptionId = subscriptionIdInstance;
                            }
                            
                            JToken numberOfRemoteAppServicesUsingThisImageValue = responseDoc["NumberOfRemoteAppServicesUsingThisImage"];
                            if (numberOfRemoteAppServicesUsingThisImageValue != null && numberOfRemoteAppServicesUsingThisImageValue.Type != JTokenType.Null)
                            {
                                int numberOfRemoteAppServicesUsingThisImageInstance = ((int)numberOfRemoteAppServicesUsingThisImageValue);
                                remoteAppTemplateImageInstance.NumberOfRemoteAppServicesUsingThisImage = numberOfRemoteAppServicesUsingThisImageInstance;
                            }
                            
                            JToken typeValue = responseDoc["Type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                TemplateImageType typeInstance = ((TemplateImageType)Enum.Parse(typeof(TemplateImageType), ((string)typeValue), true));
                                remoteAppTemplateImageInstance.Type = typeInstance;
                            }
                            
                            JToken locationListArray = responseDoc["LocationList"];
                            if (locationListArray != null && locationListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken locationListValue in ((JArray)locationListArray))
                                {
                                    remoteAppTemplateImageInstance.LocationList.Add(((string)locationListValue));
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
