// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure.Management.RemoteApp.Models.Applications;
using Microsoft.Azure.Management.RemoteApp.Models.Collections;
using Microsoft.Azure.Management.RemoteApp.Models.Principals;
using Microsoft.Azure.Management.RemoteApp.Operations;
using Microsoft.Azure.Management.RemoteApp.Responses.Collections;
using Microsoft.Azure.Management.RemoteApp.Responses.Common;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RemoteApp.Operations
{
    /// <summary>
    /// RemoteApp collection operations.
    /// </summary>
    internal partial class RemoteAppServiceOperations : IServiceOperations<RemoteAppManagementClient>, IRemoteAppServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the RemoteAppServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RemoteAppServiceOperations(RemoteAppManagementClient client)
        {
            this._client = client;
        }
        
        private RemoteAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RemoteApp.Operations.RemoteAppManagementClient.
        /// </summary>
        public RemoteAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a collection with the given details.
        /// </summary>
        /// <param name='populateOnly'>
        /// Required. A flag denoting if the request is to populate the
        /// creation details of the collection or update and deploy (true for
        /// populate only).
        /// </param>
        /// <param name='collectionDetails'>
        /// Required. Details for the collection to be created.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public async Task<OperationResultWithTrackingId> CreateAsync(bool populateOnly, ServiceCreationDetails collectionDetails, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionDetails == null)
            {
                throw new ArgumentNullException("collectionDetails");
            }
            if (collectionDetails.AllowedPrincipals != null)
            {
                foreach (SecurityPrincipal allowedPrincipalsParameterItem in collectionDetails.AllowedPrincipals)
                {
                    if (allowedPrincipalsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("collectionDetails.AllowedPrincipals.Name");
                    }
                }
            }
            if (collectionDetails.BillingPlanId == null)
            {
                throw new ArgumentNullException("collectionDetails.BillingPlanId");
            }
            if (collectionDetails.Name == null)
            {
                throw new ArgumentNullException("collectionDetails.Name");
            }
            if (collectionDetails.PublishedApplications != null)
            {
                foreach (PublishedApplicationDetails publishedApplicationsParameterItem in collectionDetails.PublishedApplications)
                {
                    if (publishedApplicationsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("collectionDetails.PublishedApplications.Name");
                    }
                    if (publishedApplicationsParameterItem.RemoteAppServiceId == null)
                    {
                        throw new ArgumentNullException("collectionDetails.PublishedApplications.RemoteAppServiceId");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("populateOnly", populateOnly);
                tracingParameters.Add("collectionDetails", collectionDetails);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/remoteappServices?";
            url = url + "PopulateOnly=" + Uri.EscapeDataString(populateOnly.ToString().ToLower());
            url = url + "&api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject serviceCreationDetailsValue = new JObject();
                requestDoc = serviceCreationDetailsValue;
                
                serviceCreationDetailsValue["Name"] = collectionDetails.Name;
                
                if (collectionDetails.Description != null)
                {
                    serviceCreationDetailsValue["Description"] = collectionDetails.Description;
                }
                
                if (collectionDetails.TemplateImageId != null)
                {
                    serviceCreationDetailsValue["TemplateImageId"] = collectionDetails.TemplateImageId;
                }
                
                if (collectionDetails.VnetName != null)
                {
                    serviceCreationDetailsValue["VnetName"] = collectionDetails.VnetName;
                }
                
                if (collectionDetails.ActiveDirectoryConfigId != null)
                {
                    serviceCreationDetailsValue["ActiveDirectoryConfigId"] = collectionDetails.ActiveDirectoryConfigId;
                }
                
                serviceCreationDetailsValue["BillingPlanId"] = collectionDetails.BillingPlanId;
                
                if (collectionDetails.CustomRdpProperty != null)
                {
                    serviceCreationDetailsValue["CustomRdpProperty"] = collectionDetails.CustomRdpProperty;
                }
                
                serviceCreationDetailsValue["OpenForPublishing"] = collectionDetails.OpenForPublishing;
                
                serviceCreationDetailsValue["ServiceMode"] = ((int)collectionDetails.Mode);
                
                serviceCreationDetailsValue["WaitBeforeShutdownInMinutes"] = collectionDetails.WaitBeforeShutdownInMinutes;
                
                if (collectionDetails.Location != null)
                {
                    serviceCreationDetailsValue["Location"] = collectionDetails.Location;
                }
                
                serviceCreationDetailsValue["ServiceType"] = ((int)collectionDetails.ServiceType);
                
                if (collectionDetails.PublishedApplications != null)
                {
                    if (collectionDetails.PublishedApplications is ILazyCollection == false || ((ILazyCollection)collectionDetails.PublishedApplications).IsInitialized)
                    {
                        JArray publishedApplicationsArray = new JArray();
                        foreach (PublishedApplicationDetails publishedApplicationsItem in collectionDetails.PublishedApplications)
                        {
                            requestDoc["AvailableToUsers"] = publishedApplicationsItem.AvailableToUsers;
                            
                            if (publishedApplicationsItem.Alias != null)
                            {
                                requestDoc["Alias"] = publishedApplicationsItem.Alias;
                            }
                            
                            if (publishedApplicationsItem.CommandLineArguments != null)
                            {
                                requestDoc["CommandLineArguments"] = publishedApplicationsItem.CommandLineArguments;
                            }
                            
                            if (publishedApplicationsItem.IconUri != null)
                            {
                                requestDoc["IconUri"] = publishedApplicationsItem.IconUri;
                            }
                            
                            requestDoc["Name"] = publishedApplicationsItem.Name;
                            
                            requestDoc["RemoteAppServiceId"] = publishedApplicationsItem.RemoteAppServiceId;
                            
                            requestDoc["Status"] = ((int)publishedApplicationsItem.Status);
                            
                            if (publishedApplicationsItem.SubscriptionId != null)
                            {
                                requestDoc["SubscriptionId"] = publishedApplicationsItem.SubscriptionId;
                            }
                            
                            if (publishedApplicationsItem.IconPngUris != null)
                            {
                                JObject iconPngUrisValue = new JObject();
                                requestDoc["IconPngUris"] = iconPngUrisValue;
                                
                                if (publishedApplicationsItem.IconPngUris.IconPngUris != null)
                                {
                                    if (publishedApplicationsItem.IconPngUris.IconPngUris is ILazyCollection == false || ((ILazyCollection)publishedApplicationsItem.IconPngUris.IconPngUris).IsInitialized)
                                    {
                                        JArray iconPngUrisDictionary = new JArray();
                                        foreach (KeyValuePair<int, string> pair in publishedApplicationsItem.IconPngUris.IconPngUris)
                                        {
                                            int iconPngUrisKey = pair.Key;
                                            string iconPngUrisValue2 = pair.Value;
                                            JObject iconPngUrisItemObject = new JObject();
                                            iconPngUrisItemObject["Key"] = iconPngUrisKey.ToString();
                                            iconPngUrisItemObject["Value"] = iconPngUrisValue2;
                                            iconPngUrisDictionary.Add(iconPngUrisItemObject);
                                        }
                                        iconPngUrisValue["IconPngUris"] = iconPngUrisDictionary;
                                    }
                                }
                            }
                            
                            if (publishedApplicationsItem.VirtualPath != null)
                            {
                                requestDoc["VirtualPath"] = publishedApplicationsItem.VirtualPath;
                            }
                        }
                        serviceCreationDetailsValue["PublishedApplications"] = publishedApplicationsArray;
                    }
                }
                
                if (collectionDetails.AllowedPrincipals != null)
                {
                    if (collectionDetails.AllowedPrincipals is ILazyCollection == false || ((ILazyCollection)collectionDetails.AllowedPrincipals).IsInitialized)
                    {
                        JArray allowedPrincipalsArray = new JArray();
                        foreach (SecurityPrincipal allowedPrincipalsItem in collectionDetails.AllowedPrincipals)
                        {
                            requestDoc["SecurityPrincipalType"] = ((int)allowedPrincipalsItem.SecurityPrincipalType);
                            
                            requestDoc["UserIdType"] = ((int)allowedPrincipalsItem.UserIdType);
                            
                            requestDoc["Name"] = allowedPrincipalsItem.Name;
                            
                            if (allowedPrincipalsItem.AadObjectId != null)
                            {
                                requestDoc["AadObjectId"] = allowedPrincipalsItem.AadObjectId;
                            }
                            
                            if (allowedPrincipalsItem.Description != null)
                            {
                                requestDoc["Description"] = allowedPrincipalsItem.Description;
                            }
                        }
                        serviceCreationDetailsValue["AllowedPrincipals"] = allowedPrincipalsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResultWithTrackingId result = null;
                    // Deserialize Response
                    result = new OperationResultWithTrackingId();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-clouddv-tracking-id"))
                    {
                        result.TrackingId = httpResponse.Headers.GetValues("x-clouddv-tracking-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a collection.
        /// </summary>
        /// <param name='collectionId'>
        /// Required. The collection id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public async Task<OperationResultWithTrackingId> DeleteAsync(string collectionId, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/remoteappServices/" + Uri.EscapeDataString(collectionId) + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResultWithTrackingId result = null;
                    // Deserialize Response
                    result = new OperationResultWithTrackingId();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-clouddv-tracking-id"))
                    {
                        result.TrackingId = httpResponse.Headers.GetValues("x-clouddv-tracking-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the details for a given collection
        /// </summary>
        /// <param name='collectionId'>
        /// Required. The collection id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response for the GetServiceList operation.
        /// </returns>
        public async Task<GetServiceResult> GetAsync(string collectionId, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/remoteappServices/" + Uri.EscapeDataString(collectionId) + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetServiceResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetServiceResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Collection serviceInstance = new Collection();
                            result.Service = serviceInstance;
                            
                            JToken nameValue = responseDoc["Name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                serviceInstance.Name = nameInstance;
                            }
                            
                            JToken idValue = responseDoc["Id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                serviceInstance.Id = idInstance;
                            }
                            
                            JToken subscriptionIdValue = responseDoc["SubscriptionId"];
                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                            {
                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                serviceInstance.SubscriptionId = subscriptionIdInstance;
                            }
                            
                            JToken descriptionValue = responseDoc["Description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                serviceInstance.Description = descriptionInstance;
                            }
                            
                            JToken templateImageIdValue = responseDoc["TemplateImageId"];
                            if (templateImageIdValue != null && templateImageIdValue.Type != JTokenType.Null)
                            {
                                string templateImageIdInstance = ((string)templateImageIdValue);
                                serviceInstance.TemplateImageId = templateImageIdInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                string statusInstance = ((string)statusValue);
                                serviceInstance.Status = statusInstance;
                            }
                            
                            JToken lastErrorCodeValue = responseDoc["LastErrorCode"];
                            if (lastErrorCodeValue != null && lastErrorCodeValue.Type != JTokenType.Null)
                            {
                                string lastErrorCodeInstance = ((string)lastErrorCodeValue);
                                serviceInstance.LastErrorCode = lastErrorCodeInstance;
                            }
                            
                            JToken vnetNameValue = responseDoc["VnetName"];
                            if (vnetNameValue != null && vnetNameValue.Type != JTokenType.Null)
                            {
                                string vnetNameInstance = ((string)vnetNameValue);
                                serviceInstance.VnetName = vnetNameInstance;
                            }
                            
                            JToken activeDirectoryConfigIdValue = responseDoc["ActiveDirectoryConfigId"];
                            if (activeDirectoryConfigIdValue != null && activeDirectoryConfigIdValue.Type != JTokenType.Null)
                            {
                                string activeDirectoryConfigIdInstance = ((string)activeDirectoryConfigIdValue);
                                serviceInstance.ActiveDirectoryConfigId = activeDirectoryConfigIdInstance;
                            }
                            
                            JToken billingPlanIdValue = responseDoc["BillingPlanId"];
                            if (billingPlanIdValue != null && billingPlanIdValue.Type != JTokenType.Null)
                            {
                                string billingPlanIdInstance = ((string)billingPlanIdValue);
                                serviceInstance.BillingPlanId = billingPlanIdInstance;
                            }
                            
                            JToken customRdpPropertyValue = responseDoc["CustomRdpProperty"];
                            if (customRdpPropertyValue != null && customRdpPropertyValue.Type != JTokenType.Null)
                            {
                                string customRdpPropertyInstance = ((string)customRdpPropertyValue);
                                serviceInstance.CustomRdpProperty = customRdpPropertyInstance;
                            }
                            
                            JToken openForPublishingValue = responseDoc["OpenForPublishing"];
                            if (openForPublishingValue != null && openForPublishingValue.Type != JTokenType.Null)
                            {
                                bool openForPublishingInstance = ((bool)openForPublishingValue);
                                serviceInstance.OpenForPublishing = openForPublishingInstance;
                            }
                            
                            JToken lastModifiedTimeUtcValue = responseDoc["LastModifiedTimeUtc"];
                            if (lastModifiedTimeUtcValue != null && lastModifiedTimeUtcValue.Type != JTokenType.Null)
                            {
                                DateTime lastModifiedTimeUtcInstance = ((DateTime)lastModifiedTimeUtcValue);
                                serviceInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                            }
                            
                            JToken serviceModeValue = responseDoc["ServiceMode"];
                            if (serviceModeValue != null && serviceModeValue.Type != JTokenType.Null)
                            {
                                CollectionMode serviceModeInstance = ((CollectionMode)(((int)serviceModeValue)));
                                serviceInstance.Mode = serviceModeInstance;
                            }
                            
                            JToken waitBeforeShutdownInMinutesValue = responseDoc["WaitBeforeShutdownInMinutes"];
                            if (waitBeforeShutdownInMinutesValue != null && waitBeforeShutdownInMinutesValue.Type != JTokenType.Null)
                            {
                                int waitBeforeShutdownInMinutesInstance = ((int)waitBeforeShutdownInMinutesValue);
                                serviceInstance.WaitBeforeShutdownInMinutes = waitBeforeShutdownInMinutesInstance;
                            }
                            
                            JToken locationValue = responseDoc["Location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                serviceInstance.Location = locationInstance;
                            }
                            
                            JToken maxSessionsValue = responseDoc["MaxSessions"];
                            if (maxSessionsValue != null && maxSessionsValue.Type != JTokenType.Null)
                            {
                                int maxSessionsInstance = ((int)maxSessionsValue);
                                serviceInstance.MaxSessions = maxSessionsInstance;
                            }
                            
                            JToken sessionWarningThresholdValue = responseDoc["SessionWarningThreshold"];
                            if (sessionWarningThresholdValue != null && sessionWarningThresholdValue.Type != JTokenType.Null)
                            {
                                int sessionWarningThresholdInstance = ((int)sessionWarningThresholdValue);
                                serviceInstance.SessionWarningThreshold = sessionWarningThresholdInstance;
                            }
                            
                            JToken serviceTypeValue = responseDoc["ServiceType"];
                            if (serviceTypeValue != null && serviceTypeValue.Type != JTokenType.Null)
                            {
                                CollectionType serviceTypeInstance = ((CollectionType)(((int)serviceTypeValue)));
                                serviceInstance.ServiceType = serviceTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the list of all collection details for the subscription id
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response for the GetServiceList operation.
        /// </returns>
        public async Task<GetServiceListResult> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/remoteappServices?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetServiceListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetServiceListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken servicesArray = responseDoc;
                            if (servicesArray != null && servicesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken servicesValue in ((JArray)servicesArray))
                                {
                                    Collection collectionInstance = new Collection();
                                    result.Services.Add(collectionInstance);
                                    
                                    JToken nameValue = servicesValue["Name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        collectionInstance.Name = nameInstance;
                                    }
                                    
                                    JToken idValue = servicesValue["Id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        collectionInstance.Id = idInstance;
                                    }
                                    
                                    JToken subscriptionIdValue = servicesValue["SubscriptionId"];
                                    if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                    {
                                        string subscriptionIdInstance = ((string)subscriptionIdValue);
                                        collectionInstance.SubscriptionId = subscriptionIdInstance;
                                    }
                                    
                                    JToken descriptionValue = servicesValue["Description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        collectionInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken templateImageIdValue = servicesValue["TemplateImageId"];
                                    if (templateImageIdValue != null && templateImageIdValue.Type != JTokenType.Null)
                                    {
                                        string templateImageIdInstance = ((string)templateImageIdValue);
                                        collectionInstance.TemplateImageId = templateImageIdInstance;
                                    }
                                    
                                    JToken statusValue = servicesValue["Status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        string statusInstance = ((string)statusValue);
                                        collectionInstance.Status = statusInstance;
                                    }
                                    
                                    JToken lastErrorCodeValue = servicesValue["LastErrorCode"];
                                    if (lastErrorCodeValue != null && lastErrorCodeValue.Type != JTokenType.Null)
                                    {
                                        string lastErrorCodeInstance = ((string)lastErrorCodeValue);
                                        collectionInstance.LastErrorCode = lastErrorCodeInstance;
                                    }
                                    
                                    JToken vnetNameValue = servicesValue["VnetName"];
                                    if (vnetNameValue != null && vnetNameValue.Type != JTokenType.Null)
                                    {
                                        string vnetNameInstance = ((string)vnetNameValue);
                                        collectionInstance.VnetName = vnetNameInstance;
                                    }
                                    
                                    JToken activeDirectoryConfigIdValue = servicesValue["ActiveDirectoryConfigId"];
                                    if (activeDirectoryConfigIdValue != null && activeDirectoryConfigIdValue.Type != JTokenType.Null)
                                    {
                                        string activeDirectoryConfigIdInstance = ((string)activeDirectoryConfigIdValue);
                                        collectionInstance.ActiveDirectoryConfigId = activeDirectoryConfigIdInstance;
                                    }
                                    
                                    JToken billingPlanIdValue = servicesValue["BillingPlanId"];
                                    if (billingPlanIdValue != null && billingPlanIdValue.Type != JTokenType.Null)
                                    {
                                        string billingPlanIdInstance = ((string)billingPlanIdValue);
                                        collectionInstance.BillingPlanId = billingPlanIdInstance;
                                    }
                                    
                                    JToken customRdpPropertyValue = servicesValue["CustomRdpProperty"];
                                    if (customRdpPropertyValue != null && customRdpPropertyValue.Type != JTokenType.Null)
                                    {
                                        string customRdpPropertyInstance = ((string)customRdpPropertyValue);
                                        collectionInstance.CustomRdpProperty = customRdpPropertyInstance;
                                    }
                                    
                                    JToken openForPublishingValue = servicesValue["OpenForPublishing"];
                                    if (openForPublishingValue != null && openForPublishingValue.Type != JTokenType.Null)
                                    {
                                        bool openForPublishingInstance = ((bool)openForPublishingValue);
                                        collectionInstance.OpenForPublishing = openForPublishingInstance;
                                    }
                                    
                                    JToken lastModifiedTimeUtcValue = servicesValue["LastModifiedTimeUtc"];
                                    if (lastModifiedTimeUtcValue != null && lastModifiedTimeUtcValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastModifiedTimeUtcInstance = ((DateTime)lastModifiedTimeUtcValue);
                                        collectionInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                                    }
                                    
                                    JToken serviceModeValue = servicesValue["ServiceMode"];
                                    if (serviceModeValue != null && serviceModeValue.Type != JTokenType.Null)
                                    {
                                        CollectionMode serviceModeInstance = ((CollectionMode)(((int)serviceModeValue)));
                                        collectionInstance.Mode = serviceModeInstance;
                                    }
                                    
                                    JToken waitBeforeShutdownInMinutesValue = servicesValue["WaitBeforeShutdownInMinutes"];
                                    if (waitBeforeShutdownInMinutesValue != null && waitBeforeShutdownInMinutesValue.Type != JTokenType.Null)
                                    {
                                        int waitBeforeShutdownInMinutesInstance = ((int)waitBeforeShutdownInMinutesValue);
                                        collectionInstance.WaitBeforeShutdownInMinutes = waitBeforeShutdownInMinutesInstance;
                                    }
                                    
                                    JToken locationValue = servicesValue["Location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        collectionInstance.Location = locationInstance;
                                    }
                                    
                                    JToken maxSessionsValue = servicesValue["MaxSessions"];
                                    if (maxSessionsValue != null && maxSessionsValue.Type != JTokenType.Null)
                                    {
                                        int maxSessionsInstance = ((int)maxSessionsValue);
                                        collectionInstance.MaxSessions = maxSessionsInstance;
                                    }
                                    
                                    JToken sessionWarningThresholdValue = servicesValue["SessionWarningThreshold"];
                                    if (sessionWarningThresholdValue != null && sessionWarningThresholdValue.Type != JTokenType.Null)
                                    {
                                        int sessionWarningThresholdInstance = ((int)sessionWarningThresholdValue);
                                        collectionInstance.SessionWarningThreshold = sessionWarningThresholdInstance;
                                    }
                                    
                                    JToken serviceTypeValue = servicesValue["ServiceType"];
                                    if (serviceTypeValue != null && serviceTypeValue.Type != JTokenType.Null)
                                    {
                                        CollectionType serviceTypeInstance = ((CollectionType)(((int)serviceTypeValue)));
                                        collectionInstance.ServiceType = serviceTypeInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a list of all regions where collection can be created for the
        /// subscription
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of locations.
        /// </returns>
        public async Task<GetRegionListResult> RegionListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "RegionListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/remoteappServices/locations?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetRegionListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetRegionListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationsArray = responseDoc["Locations"];
                            if (locationsArray != null && locationsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken locationsValue in ((JArray)locationsArray))
                                {
                                    result.Locations.Add(((string)locationsValue));
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Sets a new information to the collection with given id.
        /// </summary>
        /// <param name='collectionId'>
        /// Required. The collection id.
        /// </param>
        /// <param name='forceRedeploy'>
        /// Required. A flag denoting if the request is to re-deploy the
        /// collection after it is updated.
        /// </param>
        /// <param name='populateOnly'>
        /// Required. A flag denoting if the request is to populate the
        /// collection details(true for populate only).
        /// </param>
        /// <param name='collectionDetails'>
        /// Required. Details for the collection to be created.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public async Task<OperationResultWithTrackingId> SetAsync(bool collectionId, bool forceRedeploy, bool populateOnly, ServiceCreationDetails collectionDetails, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionDetails == null)
            {
                throw new ArgumentNullException("collectionDetails");
            }
            if (collectionDetails.AllowedPrincipals != null)
            {
                foreach (SecurityPrincipal allowedPrincipalsParameterItem in collectionDetails.AllowedPrincipals)
                {
                    if (allowedPrincipalsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("collectionDetails.AllowedPrincipals.Name");
                    }
                }
            }
            if (collectionDetails.BillingPlanId == null)
            {
                throw new ArgumentNullException("collectionDetails.BillingPlanId");
            }
            if (collectionDetails.Name == null)
            {
                throw new ArgumentNullException("collectionDetails.Name");
            }
            if (collectionDetails.PublishedApplications != null)
            {
                foreach (PublishedApplicationDetails publishedApplicationsParameterItem in collectionDetails.PublishedApplications)
                {
                    if (publishedApplicationsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("collectionDetails.PublishedApplications.Name");
                    }
                    if (publishedApplicationsParameterItem.RemoteAppServiceId == null)
                    {
                        throw new ArgumentNullException("collectionDetails.PublishedApplications.RemoteAppServiceId");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                tracingParameters.Add("forceRedeploy", forceRedeploy);
                tracingParameters.Add("populateOnly", populateOnly);
                tracingParameters.Add("collectionDetails", collectionDetails);
                TracingAdapter.Enter(invocationId, this, "SetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/remoteappServices/" + Uri.EscapeDataString(collectionId.ToString().ToLower()) + "?";
            url = url + "ForceRedeploy=" + Uri.EscapeDataString(forceRedeploy.ToString().ToLower());
            url = url + "&PopulateOnly=" + Uri.EscapeDataString(populateOnly.ToString().ToLower());
            url = url + "&api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject serviceCreationDetailsValue = new JObject();
                requestDoc = serviceCreationDetailsValue;
                
                serviceCreationDetailsValue["Name"] = collectionDetails.Name;
                
                if (collectionDetails.Description != null)
                {
                    serviceCreationDetailsValue["Description"] = collectionDetails.Description;
                }
                
                if (collectionDetails.TemplateImageId != null)
                {
                    serviceCreationDetailsValue["TemplateImageId"] = collectionDetails.TemplateImageId;
                }
                
                if (collectionDetails.VnetName != null)
                {
                    serviceCreationDetailsValue["VnetName"] = collectionDetails.VnetName;
                }
                
                if (collectionDetails.ActiveDirectoryConfigId != null)
                {
                    serviceCreationDetailsValue["ActiveDirectoryConfigId"] = collectionDetails.ActiveDirectoryConfigId;
                }
                
                serviceCreationDetailsValue["BillingPlanId"] = collectionDetails.BillingPlanId;
                
                if (collectionDetails.CustomRdpProperty != null)
                {
                    serviceCreationDetailsValue["CustomRdpProperty"] = collectionDetails.CustomRdpProperty;
                }
                
                serviceCreationDetailsValue["OpenForPublishing"] = collectionDetails.OpenForPublishing;
                
                serviceCreationDetailsValue["ServiceMode"] = ((int)collectionDetails.Mode);
                
                serviceCreationDetailsValue["WaitBeforeShutdownInMinutes"] = collectionDetails.WaitBeforeShutdownInMinutes;
                
                if (collectionDetails.Location != null)
                {
                    serviceCreationDetailsValue["Location"] = collectionDetails.Location;
                }
                
                serviceCreationDetailsValue["ServiceType"] = ((int)collectionDetails.ServiceType);
                
                if (collectionDetails.PublishedApplications != null)
                {
                    if (collectionDetails.PublishedApplications is ILazyCollection == false || ((ILazyCollection)collectionDetails.PublishedApplications).IsInitialized)
                    {
                        JArray publishedApplicationsArray = new JArray();
                        foreach (PublishedApplicationDetails publishedApplicationsItem in collectionDetails.PublishedApplications)
                        {
                            requestDoc["AvailableToUsers"] = publishedApplicationsItem.AvailableToUsers;
                            
                            if (publishedApplicationsItem.Alias != null)
                            {
                                requestDoc["Alias"] = publishedApplicationsItem.Alias;
                            }
                            
                            if (publishedApplicationsItem.CommandLineArguments != null)
                            {
                                requestDoc["CommandLineArguments"] = publishedApplicationsItem.CommandLineArguments;
                            }
                            
                            if (publishedApplicationsItem.IconUri != null)
                            {
                                requestDoc["IconUri"] = publishedApplicationsItem.IconUri;
                            }
                            
                            requestDoc["Name"] = publishedApplicationsItem.Name;
                            
                            requestDoc["RemoteAppServiceId"] = publishedApplicationsItem.RemoteAppServiceId;
                            
                            requestDoc["Status"] = ((int)publishedApplicationsItem.Status);
                            
                            if (publishedApplicationsItem.SubscriptionId != null)
                            {
                                requestDoc["SubscriptionId"] = publishedApplicationsItem.SubscriptionId;
                            }
                            
                            if (publishedApplicationsItem.IconPngUris != null)
                            {
                                JObject iconPngUrisValue = new JObject();
                                requestDoc["IconPngUris"] = iconPngUrisValue;
                                
                                if (publishedApplicationsItem.IconPngUris.IconPngUris != null)
                                {
                                    if (publishedApplicationsItem.IconPngUris.IconPngUris is ILazyCollection == false || ((ILazyCollection)publishedApplicationsItem.IconPngUris.IconPngUris).IsInitialized)
                                    {
                                        JArray iconPngUrisDictionary = new JArray();
                                        foreach (KeyValuePair<int, string> pair in publishedApplicationsItem.IconPngUris.IconPngUris)
                                        {
                                            int iconPngUrisKey = pair.Key;
                                            string iconPngUrisValue2 = pair.Value;
                                            JObject iconPngUrisItemObject = new JObject();
                                            iconPngUrisItemObject["Key"] = iconPngUrisKey.ToString();
                                            iconPngUrisItemObject["Value"] = iconPngUrisValue2;
                                            iconPngUrisDictionary.Add(iconPngUrisItemObject);
                                        }
                                        iconPngUrisValue["IconPngUris"] = iconPngUrisDictionary;
                                    }
                                }
                            }
                            
                            if (publishedApplicationsItem.VirtualPath != null)
                            {
                                requestDoc["VirtualPath"] = publishedApplicationsItem.VirtualPath;
                            }
                        }
                        serviceCreationDetailsValue["PublishedApplications"] = publishedApplicationsArray;
                    }
                }
                
                if (collectionDetails.AllowedPrincipals != null)
                {
                    if (collectionDetails.AllowedPrincipals is ILazyCollection == false || ((ILazyCollection)collectionDetails.AllowedPrincipals).IsInitialized)
                    {
                        JArray allowedPrincipalsArray = new JArray();
                        foreach (SecurityPrincipal allowedPrincipalsItem in collectionDetails.AllowedPrincipals)
                        {
                            requestDoc["SecurityPrincipalType"] = ((int)allowedPrincipalsItem.SecurityPrincipalType);
                            
                            requestDoc["UserIdType"] = ((int)allowedPrincipalsItem.UserIdType);
                            
                            requestDoc["Name"] = allowedPrincipalsItem.Name;
                            
                            if (allowedPrincipalsItem.AadObjectId != null)
                            {
                                requestDoc["AadObjectId"] = allowedPrincipalsItem.AadObjectId;
                            }
                            
                            if (allowedPrincipalsItem.Description != null)
                            {
                                requestDoc["Description"] = allowedPrincipalsItem.Description;
                            }
                        }
                        serviceCreationDetailsValue["AllowedPrincipals"] = allowedPrincipalsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResultWithTrackingId result = null;
                    // Deserialize Response
                    result = new OperationResultWithTrackingId();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-clouddv-tracking-id"))
                    {
                        result.TrackingId = httpResponse.Headers.GetValues("x-clouddv-tracking-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
