// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.RemoteApp.Models.Accounts;
using Microsoft.Azure.Management.RemoteApp.Operations;
using Microsoft.Azure.Management.RemoteApp.Responses.Accounts;
using Microsoft.Azure.Management.RemoteApp.Responses.Common;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RemoteApp.Operations
{
    /// <summary>
    /// Operations related to account.
    /// </summary>
    internal partial class AccountsOperations : IServiceOperations<RemoteAppManagementClient>, IAccountsOperations
    {
        /// <summary>
        /// Initializes a new instance of the AccountsOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AccountsOperations(RemoteAppManagementClient client)
        {
            this._client = client;
        }
        
        private RemoteAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RemoteApp.Operations.RemoteAppManagementClient.
        /// </summary>
        public RemoteAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Gets the details of the account.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetAccount operaton.
        /// </returns>
        public async Task<GetAccountResult> GetAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/account?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetAccountResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetAccountResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            AccountDetails detailsInstance = new AccountDetails();
                            result.Details = detailsInstance;
                            
                            JToken maxPublishedAppsPerServiceValue = responseDoc["MaxPublishedAppsPerService"];
                            if (maxPublishedAppsPerServiceValue != null && maxPublishedAppsPerServiceValue.Type != JTokenType.Null)
                            {
                                int maxPublishedAppsPerServiceInstance = ((int)maxPublishedAppsPerServiceValue);
                                detailsInstance.MaxPublishedAppsPerService = maxPublishedAppsPerServiceInstance;
                            }
                            
                            JToken contactEmailValue = responseDoc["ContactEmail"];
                            if (contactEmailValue != null && contactEmailValue.Type != JTokenType.Null)
                            {
                                string contactEmailInstance = ((string)contactEmailValue);
                                detailsInstance.ContactEmail = contactEmailInstance;
                            }
                            
                            JToken idValue = responseDoc["Id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                detailsInstance.Id = idInstance;
                            }
                            
                            JToken maxServicesValue = responseDoc["MaxServices"];
                            if (maxServicesValue != null && maxServicesValue.Type != JTokenType.Null)
                            {
                                int maxServicesInstance = ((int)maxServicesValue);
                                detailsInstance.MaxServices = maxServicesInstance;
                            }
                            
                            JToken maxUsersPerServiceValue = responseDoc["MaxUsersPerService"];
                            if (maxUsersPerServiceValue != null && maxUsersPerServiceValue.Type != JTokenType.Null)
                            {
                                int maxUsersPerServiceInstance = ((int)maxUsersPerServiceValue);
                                detailsInstance.MaxUsersPerService = maxUsersPerServiceInstance;
                            }
                            
                            JToken optIntoMarketingEmailValue = responseDoc["OptIntoMarketingEmail"];
                            if (optIntoMarketingEmailValue != null && optIntoMarketingEmailValue.Type != JTokenType.Null)
                            {
                                bool optIntoMarketingEmailInstance = ((bool)optIntoMarketingEmailValue);
                                detailsInstance.OptIntoMarketingEmail = optIntoMarketingEmailInstance;
                            }
                            
                            JToken subscriptionIdValue = responseDoc["SubscriptionId"];
                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                            {
                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                detailsInstance.SubscriptionId = subscriptionIdInstance;
                            }
                            
                            JToken workspaceNameValue = responseDoc["WorkspaceName"];
                            if (workspaceNameValue != null && workspaceNameValue.Type != JTokenType.Null)
                            {
                                string workspaceNameInstance = ((string)workspaceNameValue);
                                detailsInstance.WorkspaceName = workspaceNameInstance;
                            }
                            
                            JToken isDesktopEnabledValue = responseDoc["IsDesktopEnabled"];
                            if (isDesktopEnabledValue != null && isDesktopEnabledValue.Type != JTokenType.Null)
                            {
                                bool isDesktopEnabledInstance = ((bool)isDesktopEnabledValue);
                                detailsInstance.IsDesktopEnabled = isDesktopEnabledInstance;
                            }
                            
                            JToken rDWebURLValue = responseDoc["RDWebURL"];
                            if (rDWebURLValue != null && rDWebURLValue.Type != JTokenType.Null)
                            {
                                string rDWebURLInstance = ((string)rDWebURLValue);
                                detailsInstance.RDWebURL = rDWebURLInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the list of available billing plans for the customer.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of ListBillingPlans operation.
        /// </returns>
        public async Task<ListBillingPlansResult> ListBillingPlansAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListBillingPlansAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/BillingPlans?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListBillingPlansResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListBillingPlansResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken planListArray = responseDoc;
                            if (planListArray != null && planListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken planListValue in ((JArray)planListArray))
                                {
                                    BillingPlan billingPlanInstance = new BillingPlan();
                                    result.PlanList.Add(billingPlanInstance);
                                    
                                    JToken planIdValue = planListValue["PlanId"];
                                    if (planIdValue != null && planIdValue.Type != JTokenType.Null)
                                    {
                                        string planIdInstance = ((string)planIdValue);
                                        billingPlanInstance.Id = planIdInstance;
                                    }
                                    
                                    JToken planNameValue = planListValue["PlanName"];
                                    if (planNameValue != null && planNameValue.Type != JTokenType.Null)
                                    {
                                        string planNameInstance = ((string)planNameValue);
                                        billingPlanInstance.Name = planNameInstance;
                                    }
                                    
                                    JToken addOnsValue = planListValue["AddOns"];
                                    if (addOnsValue != null && addOnsValue.Type != JTokenType.Null)
                                    {
                                        string addOnsInstance = ((string)addOnsValue);
                                        billingPlanInstance.AddOns = addOnsInstance;
                                    }
                                    
                                    JToken coresPerUserValue = planListValue["CoresPerUser"];
                                    if (coresPerUserValue != null && coresPerUserValue.Type != JTokenType.Null)
                                    {
                                        double coresPerUserInstance = ((double)coresPerUserValue);
                                        billingPlanInstance.CoresPerUser = coresPerUserInstance;
                                    }
                                    
                                    JToken minimumBilledUserCountValue = planListValue["MinimumBilledUserCount"];
                                    if (minimumBilledUserCountValue != null && minimumBilledUserCountValue.Type != JTokenType.Null)
                                    {
                                        int minimumBilledUserCountInstance = ((int)minimumBilledUserCountValue);
                                        billingPlanInstance.MinimumBilledUserCount = minimumBilledUserCountInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Sets the new details of the account.
        /// </summary>
        /// <param name='accountInfo'>
        /// Required. New details of account.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public async Task<OperationResultWithTrackingId> SetAsync(AccountDetailsParameter accountInfo, CancellationToken cancellationToken)
        {
            // Validate
            if (accountInfo == null)
            {
                throw new ArgumentNullException("accountInfo");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("accountInfo", accountInfo);
                TracingAdapter.Enter(invocationId, this, "SetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/account?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (accountInfo.AccountInfo != null)
                {
                    requestDoc = new JObject();
                    requestDoc["MaxPublishedAppsPerService"] = accountInfo.AccountInfo.MaxPublishedAppsPerService;
                    
                    if (accountInfo.AccountInfo.ContactEmail != null)
                    {
                        requestDoc["ContactEmail"] = accountInfo.AccountInfo.ContactEmail;
                    }
                    
                    if (accountInfo.AccountInfo.Id != null)
                    {
                        requestDoc["Id"] = accountInfo.AccountInfo.Id;
                    }
                    
                    requestDoc["MaxServices"] = accountInfo.AccountInfo.MaxServices;
                    
                    requestDoc["MaxUsersPerService"] = accountInfo.AccountInfo.MaxUsersPerService;
                    
                    requestDoc["OptIntoMarketingEmail"] = accountInfo.AccountInfo.OptIntoMarketingEmail;
                    
                    if (accountInfo.AccountInfo.SubscriptionId != null)
                    {
                        requestDoc["SubscriptionId"] = accountInfo.AccountInfo.SubscriptionId;
                    }
                    
                    if (accountInfo.AccountInfo.WorkspaceName != null)
                    {
                        requestDoc["WorkspaceName"] = accountInfo.AccountInfo.WorkspaceName;
                    }
                    
                    requestDoc["IsDesktopEnabled"] = accountInfo.AccountInfo.IsDesktopEnabled;
                    
                    if (accountInfo.AccountInfo.RDWebURL != null)
                    {
                        requestDoc["RDWebURL"] = accountInfo.AccountInfo.RDWebURL;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResultWithTrackingId result = null;
                    // Deserialize Response
                    result = new OperationResultWithTrackingId();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
