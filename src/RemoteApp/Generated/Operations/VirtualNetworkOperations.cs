// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.RemoteApp.Models.Vnets;
using Microsoft.Azure.Management.RemoteApp.Operations;
using Microsoft.Azure.Management.RemoteApp.Responses.Common;
using Microsoft.Azure.Management.RemoteApp.Responses.Vnets;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RemoteApp.Operations
{
    /// <summary>
    /// RemoteApp virtual network operations.
    /// </summary>
    internal partial class VirtualNetworkOperations : IServiceOperations<RemoteAppManagementClient>, IVirtualNetworkOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualNetworkOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualNetworkOperations(RemoteAppManagementClient client)
        {
            this._client = client;
        }
        
        private RemoteAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RemoteApp.Operations.RemoteAppManagementClient.
        /// </summary>
        public RemoteAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates or updates a virtual network.  See
        /// VirtualNetworkRequestBody for details.
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// Required. Virtual network name
        /// </param>
        /// <param name='virtualNetworkDetails'>
        /// Required. Details about the virtual network to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public async Task<OperationResultWithTrackingId> CreateOrUpdateAsync(string virtualNetworkName, VirtualNetworkParameter virtualNetworkDetails, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            if (virtualNetworkDetails == null)
            {
                throw new ArgumentNullException("virtualNetworkDetails");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("virtualNetworkDetails", virtualNetworkDetails);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/vnets/" + Uri.EscapeDataString(virtualNetworkName) + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualNetworkParameterValue = new JObject();
                requestDoc = virtualNetworkParameterValue;
                
                if (virtualNetworkDetails.SubscriptionId != null)
                {
                    virtualNetworkParameterValue["SubscriptionId"] = virtualNetworkDetails.SubscriptionId;
                }
                
                if (virtualNetworkDetails.Name != null)
                {
                    virtualNetworkParameterValue["Name"] = virtualNetworkDetails.Name;
                }
                
                if (virtualNetworkDetails.Location != null)
                {
                    virtualNetworkParameterValue["Location"] = virtualNetworkDetails.Location;
                }
                
                if (virtualNetworkDetails.VnetAddressSpaces != null)
                {
                    JArray vnetAddressSpacesArray = new JArray();
                    foreach (string vnetAddressSpacesItem in virtualNetworkDetails.VnetAddressSpaces)
                    {
                        vnetAddressSpacesArray.Add(vnetAddressSpacesItem);
                    }
                    virtualNetworkParameterValue["VnetAddressSpaces"] = vnetAddressSpacesArray;
                }
                
                if (virtualNetworkDetails.GatewaySubnet != null)
                {
                    virtualNetworkParameterValue["GatewaySubnet"] = virtualNetworkDetails.GatewaySubnet;
                }
                
                if (virtualNetworkDetails.LocalAddressSpaces != null)
                {
                    JArray localAddressSpacesArray = new JArray();
                    foreach (string localAddressSpacesItem in virtualNetworkDetails.LocalAddressSpaces)
                    {
                        localAddressSpacesArray.Add(localAddressSpacesItem);
                    }
                    virtualNetworkParameterValue["LocalAddressSpaces"] = localAddressSpacesArray;
                }
                
                if (virtualNetworkDetails.VpnAddress != null)
                {
                    virtualNetworkParameterValue["VpnAddress"] = virtualNetworkDetails.VpnAddress;
                }
                
                if (virtualNetworkDetails.DnsServers != null)
                {
                    JArray dnsServersArray = new JArray();
                    foreach (string dnsServersItem in virtualNetworkDetails.DnsServers)
                    {
                        dnsServersArray.Add(dnsServersItem);
                    }
                    virtualNetworkParameterValue["DnsServers"] = dnsServersArray;
                }
                
                virtualNetworkParameterValue["State"] = ((int)virtualNetworkDetails.State);
                
                if (virtualNetworkDetails.StateInfo != null)
                {
                    virtualNetworkParameterValue["StateInfo"] = virtualNetworkDetails.StateInfo;
                }
                
                if (virtualNetworkDetails.GatewayIp != null)
                {
                    virtualNetworkParameterValue["GatewayIp"] = virtualNetworkDetails.GatewayIp;
                }
                
                if (virtualNetworkDetails.SharedKey != null)
                {
                    virtualNetworkParameterValue["SharedKey"] = virtualNetworkDetails.SharedKey;
                }
                
                if (virtualNetworkDetails.ServiceName != null)
                {
                    virtualNetworkParameterValue["ServiceName"] = virtualNetworkDetails.ServiceName;
                }
                
                virtualNetworkParameterValue["GatewayType"] = ((int)virtualNetworkDetails.GatewayType);
                
                if (virtualNetworkDetails.VirtualNetworkId != null)
                {
                    virtualNetworkParameterValue["VirtualNetworkId"] = virtualNetworkDetails.VirtualNetworkId;
                }
                
                virtualNetworkParameterValue["UpgradeInProgress"] = virtualNetworkDetails.UpgradeInProgress;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResultWithTrackingId result = null;
                    // Deserialize Response
                    result = new OperationResultWithTrackingId();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-clouddv-tracking-id"))
                    {
                        result.TrackingId = httpResponse.Headers.GetValues("x-clouddv-tracking-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes the specified RemoteApp virtual network
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// Required. RemoteApp virtual network name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public async Task<OperationResultWithTrackingId> DeleteAsync(string virtualNetworkName, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/vnets/" + Uri.EscapeDataString(virtualNetworkName) + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResultWithTrackingId result = null;
                    // Deserialize Response
                    result = new OperationResultWithTrackingId();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-clouddv-tracking-id"))
                    {
                        result.TrackingId = httpResponse.Headers.GetValues("x-clouddv-tracking-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the specified virtual network's configuration.
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// Required. Virtual network name
        /// </param>
        /// <param name='includeSharedKey'>
        /// Required. Set to True to get back the shared key used to configure
        /// the VPN connection
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// RemoteApp virtual network information.
        /// </returns>
        public async Task<VirtualNetworkResponse> GetAsync(string virtualNetworkName, bool includeSharedKey, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("includeSharedKey", includeSharedKey);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/vnets/" + Uri.EscapeDataString(virtualNetworkName) + "?";
            url = url + "includeKey=" + Uri.EscapeDataString(includeSharedKey.ToString().ToLower());
            url = url + "&api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualNetworkResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualNetworkResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualNetwork virtualNetworkInstance = new VirtualNetwork();
                            result.VirtualNetwork = virtualNetworkInstance;
                            
                            JToken subscriptionIdValue = responseDoc["SubscriptionId"];
                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                            {
                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                virtualNetworkInstance.SubscriptionId = subscriptionIdInstance;
                            }
                            
                            JToken nameValue = responseDoc["Name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                virtualNetworkInstance.Name = nameInstance;
                            }
                            
                            JToken locationValue = responseDoc["Location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                virtualNetworkInstance.Location = locationInstance;
                            }
                            
                            JToken vnetAddressSpacesArray = responseDoc["VnetAddressSpaces"];
                            if (vnetAddressSpacesArray != null && vnetAddressSpacesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken vnetAddressSpacesValue in ((JArray)vnetAddressSpacesArray))
                                {
                                    virtualNetworkInstance.VnetAddressSpaces.Add(((string)vnetAddressSpacesValue));
                                }
                            }
                            
                            JToken gatewaySubnetValue = responseDoc["GatewaySubnet"];
                            if (gatewaySubnetValue != null && gatewaySubnetValue.Type != JTokenType.Null)
                            {
                                string gatewaySubnetInstance = ((string)gatewaySubnetValue);
                                virtualNetworkInstance.GatewaySubnet = gatewaySubnetInstance;
                            }
                            
                            JToken localAddressSpacesArray = responseDoc["LocalAddressSpaces"];
                            if (localAddressSpacesArray != null && localAddressSpacesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken localAddressSpacesValue in ((JArray)localAddressSpacesArray))
                                {
                                    virtualNetworkInstance.LocalAddressSpaces.Add(((string)localAddressSpacesValue));
                                }
                            }
                            
                            JToken vpnAddressValue = responseDoc["VpnAddress"];
                            if (vpnAddressValue != null && vpnAddressValue.Type != JTokenType.Null)
                            {
                                string vpnAddressInstance = ((string)vpnAddressValue);
                                virtualNetworkInstance.VpnAddress = vpnAddressInstance;
                            }
                            
                            JToken dnsServersArray = responseDoc["DnsServers"];
                            if (dnsServersArray != null && dnsServersArray.Type != JTokenType.Null)
                            {
                                foreach (JToken dnsServersValue in ((JArray)dnsServersArray))
                                {
                                    virtualNetworkInstance.DnsServers.Add(((string)dnsServersValue));
                                }
                            }
                            
                            JToken stateValue = responseDoc["State"];
                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                            {
                                VirtualNetworkState stateInstance = ((VirtualNetworkState)(((int)stateValue)));
                                virtualNetworkInstance.State = stateInstance;
                            }
                            
                            JToken stateInfoValue = responseDoc["StateInfo"];
                            if (stateInfoValue != null && stateInfoValue.Type != JTokenType.Null)
                            {
                                string stateInfoInstance = ((string)stateInfoValue);
                                virtualNetworkInstance.StateInfo = stateInfoInstance;
                            }
                            
                            JToken gatewayIpValue = responseDoc["GatewayIp"];
                            if (gatewayIpValue != null && gatewayIpValue.Type != JTokenType.Null)
                            {
                                string gatewayIpInstance = ((string)gatewayIpValue);
                                virtualNetworkInstance.GatewayIp = gatewayIpInstance;
                            }
                            
                            JToken sharedKeyValue = responseDoc["SharedKey"];
                            if (sharedKeyValue != null && sharedKeyValue.Type != JTokenType.Null)
                            {
                                string sharedKeyInstance = ((string)sharedKeyValue);
                                virtualNetworkInstance.SharedKey = sharedKeyInstance;
                            }
                            
                            JToken serviceNameValue = responseDoc["ServiceName"];
                            if (serviceNameValue != null && serviceNameValue.Type != JTokenType.Null)
                            {
                                string serviceNameInstance = ((string)serviceNameValue);
                                virtualNetworkInstance.ServiceName = serviceNameInstance;
                            }
                            
                            JToken gatewayTypeValue = responseDoc["GatewayType"];
                            if (gatewayTypeValue != null && gatewayTypeValue.Type != JTokenType.Null)
                            {
                                GatewayType gatewayTypeInstance = ((GatewayType)(((int)gatewayTypeValue)));
                                virtualNetworkInstance.GatewayType = gatewayTypeInstance;
                            }
                            
                            JToken virtualNetworkIdValue = responseDoc["VirtualNetworkId"];
                            if (virtualNetworkIdValue != null && virtualNetworkIdValue.Type != JTokenType.Null)
                            {
                                string virtualNetworkIdInstance = ((string)virtualNetworkIdValue);
                                virtualNetworkInstance.VirtualNetworkId = virtualNetworkIdInstance;
                            }
                            
                            JToken upgradeInProgressValue = responseDoc["UpgradeInProgress"];
                            if (upgradeInProgressValue != null && upgradeInProgressValue.Type != JTokenType.Null)
                            {
                                bool upgradeInProgressInstance = ((bool)upgradeInProgressValue);
                                virtualNetworkInstance.UpgradeInProgress = upgradeInProgressInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the status of the call from ResetVpnSharedKey.
        /// </summary>
        /// <param name='trackingId'>
        /// Required. Tracking ID returned by ResetVpnSharedKey
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Current state of a long running operation.
        /// </returns>
        public async Task<VirtualNetworkOperationStatusResponse> GetResetVpnSharedKeyOperationStatusAsync(string trackingId, CancellationToken cancellationToken)
        {
            // Validate
            if (trackingId == null)
            {
                throw new ArgumentNullException("trackingId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("trackingId", trackingId);
                TracingAdapter.Enter(invocationId, this, "GetResetVpnSharedKeyOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/vnets/operationStatusses/" + Uri.EscapeDataString(trackingId) + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualNetworkOperationStatusResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualNetworkOperationStatusResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                VirtualNetworkOperationStatus statusInstance = ((VirtualNetworkOperationStatus)(((int)statusValue)));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a configuration script to configure the VPN device to connect
        /// to the given virtual network. Run this script on the VPN device.
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// Required. Virtual network name
        /// </param>
        /// <param name='vendor'>
        /// Optional. Vendor
        /// </param>
        /// <param name='vpnDevice'>
        /// Optional. Model of the VPN
        /// </param>
        /// <param name='osFamily'>
        /// Optional. OS Family
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Script that can be used to set up a VPN device.
        /// </returns>
        public async Task<VirtualNetworkConfigScriptResponse> GetVpnDeviceConfigScriptAsync(string virtualNetworkName, string vendor, string vpnDevice, string osFamily, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("vendor", vendor);
                tracingParameters.Add("vpnDevice", vpnDevice);
                tracingParameters.Add("osFamily", osFamily);
                TracingAdapter.Enter(invocationId, this, "GetVpnDeviceConfigScriptAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/vnets/" + Uri.EscapeDataString(virtualNetworkName) + "/vpnscript?";
            if (vendor != null)
            {
                url = url + "vendor=" + Uri.EscapeDataString(vendor);
            }
            if (vpnDevice != null)
            {
                url = url + "&platform=" + Uri.EscapeDataString(vpnDevice);
            }
            if (osFamily != null)
            {
                url = url + "&osFamily=" + Uri.EscapeDataString(osFamily);
            }
            url = url + "&api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualNetworkConfigScriptResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualNetworkConfigScriptResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            string configScriptInstance = ((string)responseDoc);
                            result.ConfigScript = configScriptInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a list of supported VPN devices
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// Required. Virtual network name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of supported VPN device vendors.
        /// </returns>
        public async Task<VirtualNetworkVpnDevicesResponse> GetVpnDevicesAsync(string virtualNetworkName, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                TracingAdapter.Enter(invocationId, this, "GetVpnDevicesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/vnets/" + Uri.EscapeDataString(virtualNetworkName) + "/vpndevices?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualNetworkVpnDevicesResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualNetworkVpnDevicesResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                string versionInstance = ((string)versionValue);
                                result.Version = versionInstance;
                            }
                            
                            JToken vendorsArray = responseDoc["Vendors"];
                            if (vendorsArray != null && vendorsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken vendorsValue in ((JArray)vendorsArray))
                                {
                                    Vendor vendorInstance = new Vendor();
                                    result.Vendors.Add(vendorInstance);
                                    
                                    JToken nameValue = vendorsValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        vendorInstance.Name = nameInstance;
                                    }
                                    
                                    JToken vpnDevicesArray = vendorsValue["VpnDevices"];
                                    if (vpnDevicesArray != null && vpnDevicesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken vpnDevicesValue in ((JArray)vpnDevicesArray))
                                        {
                                            VpnDevice vpnDeviceInstance = new VpnDevice();
                                            vendorInstance.VpnDevices.Add(vpnDeviceInstance);
                                            
                                            JToken nameValue2 = vpnDevicesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                vpnDeviceInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken osFamiliesArray = vpnDevicesValue["OsFamilies"];
                                            if (osFamiliesArray != null && osFamiliesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken osFamiliesValue in ((JArray)osFamiliesArray))
                                                {
                                                    OsFamily osFamilyInstance = new OsFamily();
                                                    vpnDeviceInstance.OsFamilies.Add(osFamilyInstance);
                                                    
                                                    JToken nameValue3 = osFamiliesValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        osFamilyInstance.Name = nameInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a list of virtual networks.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of virtual networks.
        /// </returns>
        public async Task<VirtualNetworkListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/vnets?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualNetworkListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualNetworkListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken virtualNetworkListArray = responseDoc;
                            if (virtualNetworkListArray != null && virtualNetworkListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken virtualNetworkListValue in ((JArray)virtualNetworkListArray))
                                {
                                    VirtualNetwork virtualNetworkInstance = new VirtualNetwork();
                                    result.VirtualNetworkList.Add(virtualNetworkInstance);
                                    
                                    JToken subscriptionIdValue = virtualNetworkListValue["SubscriptionId"];
                                    if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                    {
                                        string subscriptionIdInstance = ((string)subscriptionIdValue);
                                        virtualNetworkInstance.SubscriptionId = subscriptionIdInstance;
                                    }
                                    
                                    JToken nameValue = virtualNetworkListValue["Name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        virtualNetworkInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = virtualNetworkListValue["Location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        virtualNetworkInstance.Location = locationInstance;
                                    }
                                    
                                    JToken vnetAddressSpacesArray = virtualNetworkListValue["VnetAddressSpaces"];
                                    if (vnetAddressSpacesArray != null && vnetAddressSpacesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken vnetAddressSpacesValue in ((JArray)vnetAddressSpacesArray))
                                        {
                                            virtualNetworkInstance.VnetAddressSpaces.Add(((string)vnetAddressSpacesValue));
                                        }
                                    }
                                    
                                    JToken gatewaySubnetValue = virtualNetworkListValue["GatewaySubnet"];
                                    if (gatewaySubnetValue != null && gatewaySubnetValue.Type != JTokenType.Null)
                                    {
                                        string gatewaySubnetInstance = ((string)gatewaySubnetValue);
                                        virtualNetworkInstance.GatewaySubnet = gatewaySubnetInstance;
                                    }
                                    
                                    JToken localAddressSpacesArray = virtualNetworkListValue["LocalAddressSpaces"];
                                    if (localAddressSpacesArray != null && localAddressSpacesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken localAddressSpacesValue in ((JArray)localAddressSpacesArray))
                                        {
                                            virtualNetworkInstance.LocalAddressSpaces.Add(((string)localAddressSpacesValue));
                                        }
                                    }
                                    
                                    JToken vpnAddressValue = virtualNetworkListValue["VpnAddress"];
                                    if (vpnAddressValue != null && vpnAddressValue.Type != JTokenType.Null)
                                    {
                                        string vpnAddressInstance = ((string)vpnAddressValue);
                                        virtualNetworkInstance.VpnAddress = vpnAddressInstance;
                                    }
                                    
                                    JToken dnsServersArray = virtualNetworkListValue["DnsServers"];
                                    if (dnsServersArray != null && dnsServersArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dnsServersValue in ((JArray)dnsServersArray))
                                        {
                                            virtualNetworkInstance.DnsServers.Add(((string)dnsServersValue));
                                        }
                                    }
                                    
                                    JToken stateValue = virtualNetworkListValue["State"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        VirtualNetworkState stateInstance = ((VirtualNetworkState)(((int)stateValue)));
                                        virtualNetworkInstance.State = stateInstance;
                                    }
                                    
                                    JToken stateInfoValue = virtualNetworkListValue["StateInfo"];
                                    if (stateInfoValue != null && stateInfoValue.Type != JTokenType.Null)
                                    {
                                        string stateInfoInstance = ((string)stateInfoValue);
                                        virtualNetworkInstance.StateInfo = stateInfoInstance;
                                    }
                                    
                                    JToken gatewayIpValue = virtualNetworkListValue["GatewayIp"];
                                    if (gatewayIpValue != null && gatewayIpValue.Type != JTokenType.Null)
                                    {
                                        string gatewayIpInstance = ((string)gatewayIpValue);
                                        virtualNetworkInstance.GatewayIp = gatewayIpInstance;
                                    }
                                    
                                    JToken sharedKeyValue = virtualNetworkListValue["SharedKey"];
                                    if (sharedKeyValue != null && sharedKeyValue.Type != JTokenType.Null)
                                    {
                                        string sharedKeyInstance = ((string)sharedKeyValue);
                                        virtualNetworkInstance.SharedKey = sharedKeyInstance;
                                    }
                                    
                                    JToken serviceNameValue = virtualNetworkListValue["ServiceName"];
                                    if (serviceNameValue != null && serviceNameValue.Type != JTokenType.Null)
                                    {
                                        string serviceNameInstance = ((string)serviceNameValue);
                                        virtualNetworkInstance.ServiceName = serviceNameInstance;
                                    }
                                    
                                    JToken gatewayTypeValue = virtualNetworkListValue["GatewayType"];
                                    if (gatewayTypeValue != null && gatewayTypeValue.Type != JTokenType.Null)
                                    {
                                        GatewayType gatewayTypeInstance = ((GatewayType)(((int)gatewayTypeValue)));
                                        virtualNetworkInstance.GatewayType = gatewayTypeInstance;
                                    }
                                    
                                    JToken virtualNetworkIdValue = virtualNetworkListValue["VirtualNetworkId"];
                                    if (virtualNetworkIdValue != null && virtualNetworkIdValue.Type != JTokenType.Null)
                                    {
                                        string virtualNetworkIdInstance = ((string)virtualNetworkIdValue);
                                        virtualNetworkInstance.VirtualNetworkId = virtualNetworkIdInstance;
                                    }
                                    
                                    JToken upgradeInProgressValue = virtualNetworkListValue["UpgradeInProgress"];
                                    if (upgradeInProgressValue != null && upgradeInProgressValue.Type != JTokenType.Null)
                                    {
                                        bool upgradeInProgressInstance = ((bool)upgradeInProgressValue);
                                        virtualNetworkInstance.UpgradeInProgress = upgradeInProgressInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Generates a new shared key for the specified virtual network and
        /// returns a tracking ID for the operation. Use
        /// GetResetVpnSharedKeyOperationStatus with this tracking ID to
        /// determine when the operation has completed.  When the status
        /// returns Success, call Get passing the virtual network name and
        /// true for the includeSharedKey parameter. This will return a
        /// VirtualNetworkResponse containing the new key. Call
        /// GetVpnConfigScript to get back the configuration script to
        /// configure the VPN device. Run this script using the new key on the
        /// VPN device.
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// Required. Virtual network name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public async Task<OperationResultWithTrackingId> ResetVpnSharedKeyAsync(string virtualNetworkName, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                TracingAdapter.Enter(invocationId, this, "ResetVpnSharedKeyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/services/" + (this.Client.RdfeNamespace == null ? "" : Uri.EscapeDataString(this.Client.RdfeNamespace)) + "/vnets/" + Uri.EscapeDataString(virtualNetworkName) + "/resetsharedkey?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResultWithTrackingId result = null;
                    // Deserialize Response
                    result = new OperationResultWithTrackingId();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-clouddv-tracking-id"))
                    {
                        result.TrackingId = httpResponse.Headers.GetValues("x-clouddv-tracking-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
