// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.RemoteApp.Models.Vnets;
using Microsoft.Azure.Management.RemoteApp.Responses.Common;
using Microsoft.Azure.Management.RemoteApp.Responses.Vnets;

namespace Microsoft.Azure.Management.RemoteApp.Operations
{
    /// <summary>
    /// RemoteApp virtual network operations.
    /// </summary>
    public partial interface IVirtualNetworkOperations
    {
        /// <summary>
        /// Creates or updates a virtual network.  See
        /// VirtualNetworkRequestBody for details.
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// Virtual network name
        /// </param>
        /// <param name='virtualNetworkDetails'>
        /// Details about the virtual network to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        Task<OperationResultWithTrackingId> CreateOrUpdateAsync(string virtualNetworkName, VirtualNetworkParameter virtualNetworkDetails, CancellationToken cancellationToken);
        
        /// <summary>
        /// Deletes the specified RemoteApp virtual network
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// RemoteApp virtual network name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        Task<OperationResultWithTrackingId> DeleteAsync(string virtualNetworkName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets the specified virtual network's configuration.
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// Virtual network name
        /// </param>
        /// <param name='includeSharedKey'>
        /// Set to True to get back the shared key used to configure the VPN
        /// connection
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// RemoteApp virtual network information.
        /// </returns>
        Task<VirtualNetworkResponse> GetAsync(string virtualNetworkName, bool includeSharedKey, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets the status of the call from ResetVpnSharedKey.
        /// </summary>
        /// <param name='trackingId'>
        /// Tracking ID returned by ResetVpnSharedKey
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Current state of a long running operation.
        /// </returns>
        Task<VirtualNetworkOperationStatusResponse> GetResetVpnSharedKeyOperationStatusAsync(string trackingId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a configuration script to configure the VPN device to connect
        /// to the given virtual network. Run this script on the VPN device.
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// Virtual network name
        /// </param>
        /// <param name='vendor'>
        /// Vendor
        /// </param>
        /// <param name='vpnDevice'>
        /// Model of the VPN
        /// </param>
        /// <param name='osFamily'>
        /// OS Family
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Script that can be used to set up a VPN device.
        /// </returns>
        Task<VirtualNetworkConfigScriptResponse> GetVpnDeviceConfigScriptAsync(string virtualNetworkName, string vendor, string vpnDevice, string osFamily, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a list of supported VPN devices
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// Virtual network name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of supported VPN device vendors.
        /// </returns>
        Task<VirtualNetworkVpnDevicesResponse> GetVpnDevicesAsync(string virtualNetworkName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a list of virtual networks.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of virtual networks.
        /// </returns>
        Task<VirtualNetworkListResponse> ListAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Generates a new shared key for the specified virtual network and
        /// returns a tracking ID for the operation. Use
        /// GetResetVpnSharedKeyOperationStatus with this tracking ID to
        /// determine when the operation has completed.  When the status
        /// returns Success, call Get passing the virtual network name and
        /// true for the includeSharedKey parameter. This will return a
        /// VirtualNetworkResponse containing the new key. Call
        /// GetVpnConfigScript to get back the configuration script to
        /// configure the VPN device. Run this script using the new key on the
        /// VPN device.
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// Virtual network name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        Task<OperationResultWithTrackingId> ResetVpnSharedKeyAsync(string virtualNetworkName, CancellationToken cancellationToken);
    }
}
