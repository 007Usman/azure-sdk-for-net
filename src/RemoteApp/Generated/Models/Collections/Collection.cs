// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using Microsoft.Azure.Management.RemoteApp.Models.Collections;

namespace Microsoft.Azure.Management.RemoteApp.Models.Collections
{
    /// <summary>
    /// The collection details.
    /// </summary>
    public partial class Collection
    {
        private string _activeDirectoryConfigId;
        
        /// <summary>
        /// Optional. The unique identifier of the domain join information for
        /// this collection.
        /// </summary>
        public string ActiveDirectoryConfigId
        {
            get { return this._activeDirectoryConfigId; }
            set { this._activeDirectoryConfigId = value; }
        }
        
        private string _billingPlanId;
        
        /// <summary>
        /// Required. The unique identifier of the collection billing plan.
        /// </summary>
        public string BillingPlanId
        {
            get { return this._billingPlanId; }
            set { this._billingPlanId = value; }
        }
        
        private string _customRdpProperty;
        
        /// <summary>
        /// Optional. Optional customer-defined RDP properties of the
        /// collection.
        /// </summary>
        public string CustomRdpProperty
        {
            get { return this._customRdpProperty; }
            set { this._customRdpProperty = value; }
        }
        
        private string _description;
        
        /// <summary>
        /// Optional. The description of the collection.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private string _id;
        
        /// <summary>
        /// Optional. The collection unique identifier.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _lastErrorCode;
        
        /// <summary>
        /// Optional. The last operation error code on this collection.
        /// </summary>
        public string LastErrorCode
        {
            get { return this._lastErrorCode; }
            set { this._lastErrorCode = value; }
        }
        
        private DateTime _lastModifiedTimeUtc;
        
        /// <summary>
        /// Optional. UTC Date time of the last modification of this collection.
        /// </summary>
        public DateTime LastModifiedTimeUtc
        {
            get { return this._lastModifiedTimeUtc; }
            set { this._lastModifiedTimeUtc = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. The location of the collection (required for cloud-only
        /// collections, optional for hybrid collections)
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private int _maxSessions;
        
        /// <summary>
        /// Optional. The maximum number of concurrent users allowed for this
        /// collection.
        /// </summary>
        public int MaxSessions
        {
            get { return this._maxSessions; }
            set { this._maxSessions = value; }
        }
        
        private CollectionMode _mode;
        
        /// <summary>
        /// Optional. The collection mode.
        /// </summary>
        public CollectionMode Mode
        {
            get { return this._mode; }
            set { this._mode = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. The collection name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private bool _openForPublishing;
        
        /// <summary>
        /// Optional. A flag denoting if this collection is ready for
        /// publishing operations.
        /// </summary>
        public bool OpenForPublishing
        {
            get { return this._openForPublishing; }
            set { this._openForPublishing = value; }
        }
        
        private CollectionType _serviceType;
        
        /// <summary>
        /// Optional. The collection type.
        /// </summary>
        public CollectionType ServiceType
        {
            get { return this._serviceType; }
            set { this._serviceType = value; }
        }
        
        private int _sessionWarningThreshold;
        
        /// <summary>
        /// Optional. The end-user session limit warning threshold.  Reaching
        /// or crossing this threshold will cause a capacity warning message
        /// to be shown in the management portal.
        /// </summary>
        public int SessionWarningThreshold
        {
            get { return this._sessionWarningThreshold; }
            set { this._sessionWarningThreshold = value; }
        }
        
        private string _status;
        
        /// <summary>
        /// Optional. The collection status.
        /// </summary>
        public string Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _subscriptionId;
        
        /// <summary>
        /// Required. The customer subscription id to which this collection
        /// belongs to.
        /// </summary>
        public string SubscriptionId
        {
            get { return this._subscriptionId; }
            set { this._subscriptionId = value; }
        }
        
        private string _templateImageId;
        
        /// <summary>
        /// Optional. The ID of the template image associated with this
        /// collection.
        /// </summary>
        public string TemplateImageId
        {
            get { return this._templateImageId; }
            set { this._templateImageId = value; }
        }
        
        private string _vnetName;
        
        /// <summary>
        /// Optional. The Vnet name associated with this collection.
        /// </summary>
        public string VnetName
        {
            get { return this._vnetName; }
            set { this._vnetName = value; }
        }
        
        private int _waitBeforeShutdownInMinutes;
        
        /// <summary>
        /// Optional. Number of minutes to wait before logging off the end
        /// users when updating this collection.The value of -1 denotes
        /// immediate force logoff after the patching is successfully
        /// completed.The value of 0 denotes logoff after 60 minutes after the
        /// patching is successfully completed.Any other value less than 300
        /// minutes will be honored as is.
        /// </summary>
        public int WaitBeforeShutdownInMinutes
        {
            get { return this._waitBeforeShutdownInMinutes; }
            set { this._waitBeforeShutdownInMinutes = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Collection class.
        /// </summary>
        public Collection()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the Collection class with required
        /// arguments.
        /// </summary>
        public Collection(string name, string subscriptionId, string billingPlanId)
            : this()
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException("subscriptionId");
            }
            if (billingPlanId == null)
            {
                throw new ArgumentNullException("billingPlanId");
            }
            this.Name = name;
            this.SubscriptionId = subscriptionId;
            this.BillingPlanId = billingPlanId;
        }
    }
}
