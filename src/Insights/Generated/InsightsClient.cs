//
// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Warning: This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Insights;
using Microsoft.Azure.Insights.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Insights.Models
{
    /// <summary>
    /// Aggregation type.
    /// </summary>
    public enum AggregationType
    {
        /// <summary>
        /// No aggregation.
        /// </summary>
        None = 0,

        /// <summary>
        /// Average aggregation.
        /// </summary>
        Average = 1,

        /// <summary>
        /// Minimum aggregation.
        /// </summary>
        Minimum = 2,

        /// <summary>
        /// Maximum aggregation.
        /// </summary>
        Maximum = 3,

        /// <summary>
        /// Total aggregation.
        /// </summary>
        Total = 4,

        /// <summary>
        /// Get the last value for the time range.
        /// </summary>
        Last = 5,
    }

    /// <summary>
    /// The event count summary.
    /// </summary>
    public partial class CountSummaryItem
    {
        private DateTime _eventTime;

        /// <summary>
        /// The event time.
        /// </summary>
        public DateTime EventTime
        {
            get { return this._eventTime; }
            set { this._eventTime = value; }
        }

        private int _failedEventsCount;

        /// <summary>
        /// The total number of failed events.
        /// </summary>
        public int FailedEventsCount
        {
            get { return this._failedEventsCount; }
            set { this._failedEventsCount = value; }
        }

        private int _totalEventsCount;

        /// <summary>
        /// The total number of events.
        /// </summary>
        public int TotalEventsCount
        {
            get { return this._totalEventsCount; }
            set { this._totalEventsCount = value; }
        }

        /// <summary>
        /// Initializes a new instance of the CountSummaryItem class.
        /// </summary>
        public CountSummaryItem()
        {
        }
    }

    /// <summary>
    /// The event channel.
    /// </summary>
    [Flags]
    public enum EventChannels
    {
        /// <summary>
        /// Admin channel
        /// </summary>
        Admin = 1,

        /// <summary>
        /// Operation channel
        /// </summary>
        Operation = 2,

        /// <summary>
        /// Debug channel
        /// </summary>
        Debug = 4,

        /// <summary>
        /// Analytics channel
        /// </summary>
        Analytics = 8,
    }

    /// <summary>
    /// The event count summary response.
    /// </summary>
    public partial class EventCountSummaryResponse : OperationResponse
    {
        private string _endTime;

        /// <summary>
        /// The event summary end time.
        /// </summary>
        public string EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }

        private string _eventPropertyName;

        /// <summary>
        /// The event property name.
        /// </summary>
        public string EventPropertyName
        {
            get { return this._eventPropertyName; }
            set { this._eventPropertyName = value; }
        }

        private string _eventPropertyValue;

        /// <summary>
        /// The event property value.
        /// </summary>
        public string EventPropertyValue
        {
            get { return this._eventPropertyValue; }
            set { this._eventPropertyValue = value; }
        }

        private DateTime _startTime;

        /// <summary>
        /// The event summary start time.
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }

        private IList<CountSummaryItem> _summaryItems;

        /// <summary>
        /// The event summaries.
        /// </summary>
        public IList<CountSummaryItem> SummaryItems
        {
            get { return this._summaryItems; }
            set { this._summaryItems = value; }
        }

        private TimeSpan _timeGrain;

        /// <summary>
        /// The event summary time grain.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }

        /// <summary>
        /// Initializes a new instance of the EventCountSummaryResponse class.
        /// </summary>
        public EventCountSummaryResponse()
        {
            this._summaryItems = new List<CountSummaryItem>();
        }
    }

    /// <summary>
    /// The event data class.
    /// </summary>
    public partial class EventData
    {
        private SenderAuthorization _authorization;

        /// <summary>
        /// Gets or sets the authorization.
        /// </summary>
        public SenderAuthorization Authorization
        {
            get { return this._authorization; }
            set { this._authorization = value; }
        }

        private Dictionary<string, string> _claims;

        /// <summary>
        /// Gets or sets the claims
        /// </summary>
        public Dictionary<string, string> Claims
        {
            get { return this._claims; }
            set { this._claims = value; }
        }

        private string _correlationId;

        /// <summary>
        /// Gets or sets the correlation Id
        /// </summary>
        public string CorrelationId
        {
            get { return this._correlationId; }
            set { this._correlationId = value; }
        }

        private string _description;

        /// <summary>
        /// Gets or sets the description
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }

        private EventChannels _eventChannels;

        /// <summary>
        /// Gets or sets the event channels
        /// </summary>
        public EventChannels EventChannels
        {
            get { return this._eventChannels; }
            set { this._eventChannels = value; }
        }

        private string _eventDataId;

        /// <summary>
        /// Gets or sets the event data Id
        /// </summary>
        public string EventDataId
        {
            get { return this._eventDataId; }
            set { this._eventDataId = value; }
        }

        private LocalizableString _eventName;

        /// <summary>
        /// Gets or sets the event name
        /// </summary>
        public LocalizableString EventName
        {
            get { return this._eventName; }
            set { this._eventName = value; }
        }

        private LocalizableString _eventSource;

        /// <summary>
        /// Gets or sets the event source
        /// </summary>
        public LocalizableString EventSource
        {
            get { return this._eventSource; }
            set { this._eventSource = value; }
        }

        private DateTime _eventTimestamp;

        /// <summary>
        /// Gets or sets the time event occured
        /// </summary>
        public DateTime EventTimestamp
        {
            get { return this._eventTimestamp; }
            set { this._eventTimestamp = value; }
        }

        private HttpRequestInfo _httpRequest;

        /// <summary>
        /// Gets or sets the http request info.
        /// </summary>
        public HttpRequestInfo HttpRequest
        {
            get { return this._httpRequest; }
            set { this._httpRequest = value; }
        }

        private EventLevel _level;

        /// <summary>
        /// Gets or sets the event level
        /// </summary>
        public EventLevel Level
        {
            get { return this._level; }
            set { this._level = value; }
        }

        private string _operationId;

        /// <summary>
        /// Gets or sets the operation id
        /// </summary>
        public string OperationId
        {
            get { return this._operationId; }
            set { this._operationId = value; }
        }

        private LocalizableString _operationName;

        /// <summary>
        /// Gets or sets the operation name
        /// </summary>
        public LocalizableString OperationName
        {
            get { return this._operationName; }
            set { this._operationName = value; }
        }

        private Dictionary<string, string> _properties;

        /// <summary>
        /// Gets or sets the property bag
        /// </summary>
        public Dictionary<string, string> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }

        private string _resourceGroupName;

        /// <summary>
        /// Gets or sets the resource group name.
        /// </summary>
        public string ResourceGroupName
        {
            get { return this._resourceGroupName; }
            set { this._resourceGroupName = value; }
        }

        private LocalizableString _resourceProviderName;

        /// <summary>
        /// Gets or sets the resource provider name.
        /// </summary>
        public LocalizableString ResourceProviderName
        {
            get { return this._resourceProviderName; }
            set { this._resourceProviderName = value; }
        }

        private string _resourceUri;

        /// <summary>
        /// Gets or sets the resource uri
        /// </summary>
        public string ResourceUri
        {
            get { return this._resourceUri; }
            set { this._resourceUri = value; }
        }

        private LocalizableString _status;

        /// <summary>
        /// Gets or sets the event status
        /// </summary>
        public LocalizableString Status
        {
            get { return this._status; }
            set { this._status = value; }
        }

        private DateTime _submissionTimestamp;

        /// <summary>
        /// Gets or sets the event submission time.
        /// </summary>
        public DateTime SubmissionTimestamp
        {
            get { return this._submissionTimestamp; }
            set { this._submissionTimestamp = value; }
        }

        private string _subscriptionId;

        /// <summary>
        /// Gets or sets the subscription id
        /// </summary>
        public string SubscriptionId
        {
            get { return this._subscriptionId; }
            set { this._subscriptionId = value; }
        }

        private LocalizableString _subStatus;

        /// <summary>
        /// Gets or sets the event sub status
        /// </summary>
        public LocalizableString SubStatus
        {
            get { return this._subStatus; }
            set { this._subStatus = value; }
        }

        /// <summary>
        /// Initializes a new instance of the EventData class.
        /// </summary>
        public EventData()
        {
            this._claims = new Dictionary<string, string>();
            this._properties = new Dictionary<string, string>();
        }
    }

    /// <summary>
    /// Represents collection of events.
    /// </summary>
    public partial class EventDataCollection
    {
        private string _nextLink;

        /// <summary>
        /// The continuation token.
        /// </summary>
        public string NextLink
        {
            get { return this._nextLink; }
            set { this._nextLink = value; }
        }

        private IList<EventData> _value;

        /// <summary>
        /// The list of events.
        /// </summary>
        public IList<EventData> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }

        /// <summary>
        /// Initializes a new instance of the EventDataCollection class.
        /// </summary>
        public EventDataCollection()
        {
            this._value = new List<EventData>();
        }
    }

    /// <summary>
    /// The List Events operation response.
    /// </summary>
    public partial class EventDataListResponse : OperationResponse
    {
        private EventDataCollection _eventDataCollection;

        /// <summary>
        /// The retrieved events.
        /// </summary>
        public EventDataCollection EventDataCollection
        {
            get { return this._eventDataCollection; }
            set { this._eventDataCollection = value; }
        }

        /// <summary>
        /// Initializes a new instance of the EventDataListResponse class.
        /// </summary>
        public EventDataListResponse()
        {
        }
    }

    /// <summary>
    /// The event level.
    /// </summary>
    public enum EventLevel
    {
        /// <summary>
        /// Critical level
        /// </summary>
        Critical = 1,

        /// <summary>
        /// Error level
        /// </summary>
        Error = 2,

        /// <summary>
        /// Warning level
        /// </summary>
        Warning = 3,

        /// <summary>
        /// Informational level
        /// </summary>
        Informational = 4,

        /// <summary>
        /// Verbose level
        /// </summary>
        Verbose = 5,
    }

    /// <summary>
    /// The HttpInfo class.
    /// </summary>
    public partial class HttpRequestInfo
    {
        private string _clientIpAddress;

        /// <summary>
        /// The client Ip Address
        /// </summary>
        public string ClientIpAddress
        {
            get { return this._clientIpAddress; }
            set { this._clientIpAddress = value; }
        }

        private string _clientRequestId;

        /// <summary>
        /// The client request id.
        /// </summary>
        public string ClientRequestId
        {
            get { return this._clientRequestId; }
            set { this._clientRequestId = value; }
        }

        private string _method;

        /// <summary>
        /// The method.
        /// </summary>
        public string Method
        {
            get { return this._method; }
            set { this._method = value; }
        }

        private string _uri;

        /// <summary>
        /// The Uri.
        /// </summary>
        public string Uri
        {
            get { return this._uri; }
            set { this._uri = value; }
        }

        /// <summary>
        /// Initializes a new instance of the HttpRequestInfo class.
        /// </summary>
        public HttpRequestInfo()
        {
        }
    }

    /// <summary>
    /// The localizable string class.
    /// </summary>
    public partial class LocalizableString
    {
        private string _localizedValue;

        /// <summary>
        /// The locale specific value.
        /// </summary>
        public string LocalizedValue
        {
            get { return this._localizedValue; }
            set { this._localizedValue = value; }
        }

        private string _value;

        /// <summary>
        /// The invariant value.
        /// </summary>
        public string Value
        {
            get { return this._value; }
            set { this._value = value; }
        }

        /// <summary>
        /// Initializes a new instance of the LocalizableString class.
        /// </summary>
        public LocalizableString()
        {
        }
    }

    /// <summary>
    /// A metric value set represents a set of metric values in a time period.
    /// </summary>
    public partial class Metric
    {
        private DateTime _endTime;

        /// <summary>
        /// The end time.
        /// </summary>
        public DateTime EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }

        private IList<MetricValue> _metricValues;

        /// <summary>
        /// The collection of MetricValues..
        /// </summary>
        public IList<MetricValue> MetricValues
        {
            get { return this._metricValues; }
            set { this._metricValues = value; }
        }

        private LocalizableString _name;

        /// <summary>
        /// The name.
        /// </summary>
        public LocalizableString Name
        {
            get { return this._name; }
            set { this._name = value; }
        }

        private Dictionary<string, string> _properties;

        /// <summary>
        /// The extendable properties.
        /// </summary>
        public Dictionary<string, string> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }

        private string _resourceId;

        /// <summary>
        /// the name of the resource this metric belongs to.
        /// </summary>
        public string ResourceId
        {
            get { return this._resourceId; }
            set { this._resourceId = value; }
        }

        private DateTime _startTime;

        /// <summary>
        /// The start time.
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }

        private TimeSpan _timeGrain;

        /// <summary>
        /// The timegrain value..
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }

        private Unit _unit;

        /// <summary>
        /// The unit type.
        /// </summary>
        public Unit Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }

        /// <summary>
        /// Initializes a new instance of the Metric class.
        /// </summary>
        public Metric()
        {
            this._metricValues = new List<MetricValue>();
            this._properties = new Dictionary<string, string>();
        }
    }

    /// <summary>
    /// Metric availability specifies the time grain (aggregation interval) and
    /// the retention period for that timegrain.
    /// </summary>
    public partial class MetricAvailability
    {
        private MetricLocation _location;

        /// <summary>
        /// The location info for this availability
        /// </summary>
        public MetricLocation Location
        {
            get { return this._location; }
            set { this._location = value; }
        }

        private TimeSpan _retention;

        /// <summary>
        /// The retention period for the metric at the specified timegrain.
        /// </summary>
        public TimeSpan Retention
        {
            get { return this._retention; }
            set { this._retention = value; }
        }

        private TimeSpan _timeGrain;

        /// <summary>
        /// The time grain specifies the aggregation interval for the metric.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }

        /// <summary>
        /// Initializes a new instance of the MetricAvailability class.
        /// </summary>
        public MetricAvailability()
        {
        }
    }

    /// <summary>
    /// The collection of metric value sets.
    /// </summary>
    public partial class MetricCollection
    {
        private IList<Metric> _value;

        /// <summary>
        /// The collection.
        /// </summary>
        public IList<Metric> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }

        /// <summary>
        /// Initializes a new instance of the MetricCollection class.
        /// </summary>
        public MetricCollection()
        {
            this._value = new List<Metric>();
        }
    }

    /// <summary>
    /// Metric definition class specifies the metadata for a metric.
    /// </summary>
    public partial class MetricDefinition
    {
        private IList<MetricAvailability> _metricAvailabilities;

        /// <summary>
        /// Collection of availability information defining what timeGrains are
        /// available to be queried.
        /// </summary>
        public IList<MetricAvailability> MetricAvailabilities
        {
            get { return this._metricAvailabilities; }
            set { this._metricAvailabilities = value; }
        }

        private LocalizableString _name;

        /// <summary>
        /// The name.
        /// </summary>
        public LocalizableString Name
        {
            get { return this._name; }
            set { this._name = value; }
        }

        private AggregationType _primaryAggregationType;

        /// <summary>
        /// The primary aggregation type value defining how to use the values
        /// for display.
        /// </summary>
        public AggregationType PrimaryAggregationType
        {
            get { return this._primaryAggregationType; }
            set { this._primaryAggregationType = value; }
        }

        private Dictionary<string, string> _properties;

        /// <summary>
        /// Collection of extended properties.
        /// </summary>
        public Dictionary<string, string> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }

        private string _resourceUri;

        /// <summary>
        /// The target resource uri.
        /// </summary>
        public string ResourceUri
        {
            get { return this._resourceUri; }
            set { this._resourceUri = value; }
        }

        private Unit _unit;

        /// <summary>
        /// The unit of the metric.
        /// </summary>
        public Unit Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }

        /// <summary>
        /// Initializes a new instance of the MetricDefinition class.
        /// </summary>
        public MetricDefinition()
        {
            this._metricAvailabilities = new List<MetricAvailability>();
            this._properties = new Dictionary<string, string>();
        }
    }

    /// <summary>
    /// Represents collection of metric definitions.
    /// </summary>
    public partial class MetricDefinitionCollection
    {
        private IList<MetricDefinition> _value;

        /// <summary>
        /// The values for the metric definitions.
        /// </summary>
        public IList<MetricDefinition> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }

        /// <summary>
        /// Initializes a new instance of the MetricDefinitionCollection class.
        /// </summary>
        public MetricDefinitionCollection()
        {
            this._value = new List<MetricDefinition>();
        }
    }

    /// <summary>
    /// The List Metric Definitions operation response.
    /// </summary>
    public partial class MetricDefinitionListResponse : OperationResponse
    {
        private MetricDefinitionCollection _metricDefinitionCollection;

        /// <summary>
        /// The retrieved metric definitions.
        /// </summary>
        public MetricDefinitionCollection MetricDefinitionCollection
        {
            get { return this._metricDefinitionCollection; }
            set { this._metricDefinitionCollection = value; }
        }

        /// <summary>
        /// Initializes a new instance of the MetricDefinitionListResponse
        /// class.
        /// </summary>
        public MetricDefinitionListResponse()
        {
        }
    }

    /// <summary>
    /// The List Metric values operation response.
    /// </summary>
    public partial class MetricListResponse : OperationResponse
    {
        private MetricCollection _metricCollection;

        /// <summary>
        /// The retrieved metric value sets.
        /// </summary>
        public MetricCollection MetricCollection
        {
            get { return this._metricCollection; }
            set { this._metricCollection = value; }
        }

        /// <summary>
        /// Initializes a new instance of the MetricListResponse class.
        /// </summary>
        public MetricListResponse()
        {
        }
    }

    /// <summary>
    /// Details the location of the Metrics and contains the SAS Key.
    /// </summary>
    public partial class MetricLocation
    {
        private string _partitionKey;

        /// <summary>
        /// The partition key.
        /// </summary>
        public string PartitionKey
        {
            get { return this._partitionKey; }
            set { this._partitionKey = value; }
        }

        private string _tableEndpoint;

        /// <summary>
        /// The table endpoint.
        /// </summary>
        public string TableEndpoint
        {
            get { return this._tableEndpoint; }
            set { this._tableEndpoint = value; }
        }

        private IList<MetricTableInfo> _tableInfo;

        /// <summary>
        /// The table info.
        /// </summary>
        public IList<MetricTableInfo> TableInfo
        {
            get { return this._tableInfo; }
            set { this._tableInfo = value; }
        }

        /// <summary>
        /// Initializes a new instance of the MetricLocation class.
        /// </summary>
        public MetricLocation()
        {
            this._tableInfo = new List<MetricTableInfo>();
        }
    }

    /// <summary>
    /// Contains the Table information for N-day Tables, each table is used for
    /// a specific date range.
    /// </summary>
    public partial class MetricTableInfo
    {
        private DateTime _endTime;

        /// <summary>
        /// Gets or sets the end time of the range for this table.
        /// </summary>
        public DateTime EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }

        private string _sasToken;

        /// <summary>
        /// Gets or sets the SAS Key for accessing Table Storage.
        /// </summary>
        public string SasToken
        {
            get { return this._sasToken; }
            set { this._sasToken = value; }
        }

        private DateTime _sasTokenExpirationTime;

        /// <summary>
        /// Gets or sets the expiration time of the SAS token (UTC).
        /// </summary>
        public DateTime SasTokenExpirationTime
        {
            get { return this._sasTokenExpirationTime; }
            set { this._sasTokenExpirationTime = value; }
        }

        private DateTime _startTime;

        /// <summary>
        /// Gets or sets the start time of the range for this table.
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }

        private string _tableName;

        /// <summary>
        /// Gets or sets the table name.
        /// </summary>
        public string TableName
        {
            get { return this._tableName; }
            set { this._tableName = value; }
        }

        /// <summary>
        /// Initializes a new instance of the MetricTableInfo class.
        /// </summary>
        public MetricTableInfo()
        {
        }
    }

    /// <summary>
    /// Represents a metric value.
    /// </summary>
    public partial class MetricValue
    {
        private double? _average;

        /// <summary>
        /// Specifies the average value in the time interval.
        /// </summary>
        public double? Average
        {
            get { return this._average; }
            set { this._average = value; }
        }

        private long? _count;

        /// <summary>
        /// Specifies the sample count in the time interval. Can be used to
        /// determine the number of values that contributed to the average
        /// value.
        /// </summary>
        public long? Count
        {
            get { return this._count; }
            set { this._count = value; }
        }

        private double? _last;

        /// <summary>
        /// Specifies the last sample in the time interval.
        /// </summary>
        public double? Last
        {
            get { return this._last; }
            set { this._last = value; }
        }

        private double? _maximum;

        /// <summary>
        /// Specifies the maximum value in the time interval.
        /// </summary>
        public double? Maximum
        {
            get { return this._maximum; }
            set { this._maximum = value; }
        }

        private double? _minimum;

        /// <summary>
        /// Specifies the minimum value in the time interval.
        /// </summary>
        public double? Minimum
        {
            get { return this._minimum; }
            set { this._minimum = value; }
        }

        private Dictionary<string, string> _properties;

        /// <summary>
        /// The extendable properties.
        /// </summary>
        public Dictionary<string, string> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }

        private DateTime _timestamp;

        /// <summary>
        /// The timestamp for the metric value.
        /// </summary>
        public DateTime Timestamp
        {
            get { return this._timestamp; }
            set { this._timestamp = value; }
        }

        private double? _total;

        /// <summary>
        /// Specifies the total value in the time interval.
        /// </summary>
        public double? Total
        {
            get { return this._total; }
            set { this._total = value; }
        }

        /// <summary>
        /// Initializes a new instance of the MetricValue class.
        /// </summary>
        public MetricValue()
        {
            this._properties = new Dictionary<string, string>();
        }
    }

    /// <summary>
    /// The authorization class.
    /// </summary>
    public partial class SenderAuthorization
    {
        private string _action;

        /// <summary>
        /// The Action.
        /// </summary>
        public string Action
        {
            get { return this._action; }
            set { this._action = value; }
        }

        private string _condition;

        /// <summary>
        /// The condition.
        /// </summary>
        public string Condition
        {
            get { return this._condition; }
            set { this._condition = value; }
        }

        private string _role;

        /// <summary>
        /// The role.
        /// </summary>
        public string Role
        {
            get { return this._role; }
            set { this._role = value; }
        }

        private string _scope;

        /// <summary>
        /// The scope.
        /// </summary>
        public string Scope
        {
            get { return this._scope; }
            set { this._scope = value; }
        }

        /// <summary>
        /// Initializes a new instance of the SenderAuthorization class.
        /// </summary>
        public SenderAuthorization()
        {
        }
    }

    /// <summary>
    /// The unit.
    /// </summary>
    public enum Unit
    {
        /// <summary>
        /// Count (how many).
        /// </summary>
        Count = 0,

        /// <summary>
        /// Unit in bytes.
        /// </summary>
        Bytes = 1,

        /// <summary>
        /// Unit in seconds.
        /// </summary>
        Seconds = 2,

        /// <summary>
        /// How many per second.
        /// </summary>
        CountPerSecond = 3,

        /// <summary>
        /// How many bytes per second.
        /// </summary>
        BytesPerSecond = 4,

        /// <summary>
        /// Percentage.
        /// </summary>
        Percent = 5,
    }

    /// <summary>
    /// Usage Metric data.
    /// </summary>
    public partial class UsageMetric
    {
        private double _currentValue;

        /// <summary>
        /// The current value for the usage metric.
        /// </summary>
        public double CurrentValue
        {
            get { return this._currentValue; }
            set { this._currentValue = value; }
        }

        private string _displayName;

        /// <summary>
        /// Get the usage display name.
        /// </summary>
        public string DisplayName
        {
            get { return this._displayName; }
            set { this._displayName = value; }
        }

        private double _limit;

        /// <summary>
        /// The quota limit the usage metric.
        /// </summary>
        public double Limit
        {
            get { return this._limit; }
            set { this._limit = value; }
        }

        private string _name;

        /// <summary>
        /// Get the usage metric name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }

        private string _nextResetTime;

        /// <summary>
        /// When the current value gets reset.
        /// </summary>
        public string NextResetTime
        {
            get { return this._nextResetTime; }
            set { this._nextResetTime = value; }
        }

        private System.TimeSpan? _quotaPeriod;

        /// <summary>
        /// When the current value gets reset.
        /// </summary>
        public System.TimeSpan? QuotaPeriod
        {
            get { return this._quotaPeriod; }
            set { this._quotaPeriod = value; }
        }

        private string _unit;

        /// <summary>
        /// The unit for the usage metric.
        /// </summary>
        public string Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }

        /// <summary>
        /// Initializes a new instance of the UsageMetric class.
        /// </summary>
        public UsageMetric()
        {
        }
    }

    /// <summary>
    /// Represents collection of usage metrics.
    /// </summary>
    public partial class UsageMetricCollection
    {
        private IList<UsageMetric> _properties;

        /// <summary>
        /// The usage values.
        /// </summary>
        public IList<UsageMetric> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }

        private IList<UsageMetric> _value;

        /// <summary>
        /// The usage values.
        /// </summary>
        public IList<UsageMetric> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }

        /// <summary>
        /// Initializes a new instance of the UsageMetricCollection class.
        /// </summary>
        public UsageMetricCollection()
        {
            this._properties = new List<UsageMetric>();
            this._value = new List<UsageMetric>();
        }
    }

    /// <summary>
    /// The List Usage Metric operation response.
    /// </summary>
    public partial class UsageMetricListResponse : OperationResponse
    {
        private UsageMetricCollection _usageMetricCollection;

        /// <summary>
        /// The list of usage metrics.
        /// </summary>
        public UsageMetricCollection UsageMetricCollection
        {
            get { return this._usageMetricCollection; }
            set { this._usageMetricCollection = value; }
        }

        /// <summary>
        /// Initializes a new instance of the UsageMetricListResponse class.
        /// </summary>
        public UsageMetricListResponse()
        {
        }
    }
}

namespace Microsoft.Azure.Insights
{
    public partial interface IInsightsClient
    {
        /// <summary>
        /// Optional base uri parameter.
        /// </summary>
        Uri BaseUri
        {
            get;
        }

        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get;
        }

        /// <summary>
        /// Operations for event data.
        /// </summary>
        IEventOperations EventOperations
        {
            get;
        }

        /// <summary>
        /// Operations for metric definitions.
        /// </summary>
        IMetricDefinitionOperations MetricDefinitionOperations
        {
            get;
        }

        /// <summary>
        /// Operations for metric values.
        /// </summary>
        IMetricOperations MetricOperations
        {
            get;
        }

        IUsageMetricsOperations UsageMetricOperations
        {
            get;
        }
    }

    public static partial class InsightsClientExtensions
    {
    }

    public partial class InsightsClient : ServiceClient<InsightsClient>, IInsightsClient
    {
        private Uri _baseUri;

        /// <summary>
        /// Optional base uri parameter.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }

        private SubscriptionCloudCredentials _credentials;

        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }

        private IEventOperations _eventOperations;

        /// <summary>
        /// Operations for event data.
        /// </summary>
        public virtual IEventOperations EventOperations
        {
            get { return this._eventOperations; }
        }

        private IMetricDefinitionOperations _metricDefinitionOperations;

        /// <summary>
        /// Operations for metric definitions.
        /// </summary>
        public virtual IMetricDefinitionOperations MetricDefinitionOperations
        {
            get { return this._metricDefinitionOperations; }
        }

        private IMetricOperations _metricOperations;

        /// <summary>
        /// Operations for metric values.
        /// </summary>
        public virtual IMetricOperations MetricOperations
        {
            get { return this._metricOperations; }
        }

        private IUsageMetricsOperations _usageMetricOperations;

        public virtual IUsageMetricsOperations UsageMetricOperations
        {
            get { return this._usageMetricOperations; }
        }

        /// <summary>
        /// Initializes a new instance of the InsightsClient class.
        /// </summary>
        private InsightsClient()
            : base()
        {
            this._eventOperations = new EventOperations(this);
            this._metricDefinitionOperations = new MetricDefinitionOperations(this);
            this._metricOperations = new MetricOperations(this);
            this._usageMetricOperations = new UsageMetricsOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }

        /// <summary>
        /// Initializes a new instance of the InsightsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        /// <param name='baseUri'>
        /// Optional base uri parameter.
        /// </param>
        public InsightsClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;

            this.Credentials.InitializeServiceClient(this);
        }

        /// <summary>
        /// Initializes a new instance of the InsightsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        public InsightsClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com");

            this.Credentials.InitializeServiceClient(this);
        }
    }

    /// <summary>
    /// Operations for event data.
    /// </summary>
    public partial interface IEventOperations
    {
        /// <summary>
        /// The count of events in a subscription.
        /// </summary>
        /// <param name='filterString'>
        /// The filter string.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The event count summary response.
        /// </returns>
        Task<EventCountSummaryResponse> GetCountSummaryAsync(string filterString, CancellationToken cancellationToken);

        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='filterString'>
        /// The filter string
        /// </param>
        /// <param name='selectedProperties'>
        /// The list of property names to be returned. You can save bandwith by
        /// selecting only the properties you need.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        Task<EventDataListResponse> ListEventsAsync(string filterString, string selectedProperties, CancellationToken cancellationToken);

        /// <summary>
        /// The List Event Next operation lists the next set of events.
        /// </summary>
        /// <param name='nextLink'>
        /// The next link
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        Task<EventDataListResponse> ListEventsNextAsync(string nextLink, CancellationToken cancellationToken);
    }

    /// <summary>
    /// Operations for event data.
    /// </summary>
    public static partial class EventOperationsExtensions
    {
        /// <summary>
        /// The count of events in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Insights.IEventOperations.
        /// </param>
        /// <param name='filterString'>
        /// The filter string.
        /// </param>
        /// <returns>
        /// The event count summary response.
        /// </returns>
        public static EventCountSummaryResponse GetCountSummary(this IEventOperations operations, string filterString)
        {
            try
            {
                return operations.GetCountSummaryAsync(filterString).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }

        /// <summary>
        /// The count of events in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Insights.IEventOperations.
        /// </param>
        /// <param name='filterString'>
        /// The filter string.
        /// </param>
        /// <returns>
        /// The event count summary response.
        /// </returns>
        public static Task<EventCountSummaryResponse> GetCountSummaryAsync(this IEventOperations operations, string filterString)
        {
            return operations.GetCountSummaryAsync(filterString, CancellationToken.None);
        }

        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Insights.IEventOperations.
        /// </param>
        /// <param name='filterString'>
        /// The filter string
        /// </param>
        /// <param name='selectedProperties'>
        /// The list of property names to be returned. You can save bandwith by
        /// selecting only the properties you need.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static EventDataListResponse ListEvents(this IEventOperations operations, string filterString, string selectedProperties)
        {
            try
            {
                return operations.ListEventsAsync(filterString, selectedProperties).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }

        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Insights.IEventOperations.
        /// </param>
        /// <param name='filterString'>
        /// The filter string
        /// </param>
        /// <param name='selectedProperties'>
        /// The list of property names to be returned. You can save bandwith by
        /// selecting only the properties you need.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static Task<EventDataListResponse> ListEventsAsync(this IEventOperations operations, string filterString, string selectedProperties)
        {
            return operations.ListEventsAsync(filterString, selectedProperties, CancellationToken.None);
        }

        /// <summary>
        /// The List Event Next operation lists the next set of events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Insights.IEventOperations.
        /// </param>
        /// <param name='nextLink'>
        /// The next link
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static EventDataListResponse ListEventsNext(this IEventOperations operations, string nextLink)
        {
            try
            {
                return operations.ListEventsNextAsync(nextLink).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }

        /// <summary>
        /// The List Event Next operation lists the next set of events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Insights.IEventOperations.
        /// </param>
        /// <param name='nextLink'>
        /// The next link
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static Task<EventDataListResponse> ListEventsNextAsync(this IEventOperations operations, string nextLink)
        {
            return operations.ListEventsNextAsync(nextLink, CancellationToken.None);
        }
    }

    /// <summary>
    /// Operations for event data.
    /// </summary>
    internal partial class EventOperations : IServiceOperations<InsightsClient>, IEventOperations
    {
        /// <summary>
        /// Initializes a new instance of the EventOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal EventOperations(InsightsClient client)
        {
            this._client = client;
        }

        private InsightsClient _client;

        /// <summary>
        /// Gets a reference to the Microsoft.Azure.Insights.InsightsClient.
        /// </summary>
        public InsightsClient Client
        {
            get { return this._client; }
        }

        /// <summary>
        /// The count of events in a subscription.
        /// </summary>
        /// <param name='filterString'>
        /// The filter string.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The event count summary response.
        /// </returns>
        public async Task<EventCountSummaryResponse> GetCountSummaryAsync(string filterString, CancellationToken cancellationToken)
        {
            // Validate
            if (filterString == null)
            {
                throw new ArgumentNullException("filterString");
            }

            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filterString", filterString);
                Tracing.Enter(invocationId, this, "GetCountSummaryAsync", tracingParameters);
            }

            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/providers/microsoft.insights/eventtypes/management/summaries/count?";
            url = url + "api-version=2014-04-01";
            url = url + "&$filter=" + Uri.EscapeUriString(filterString);

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    EventCountSummaryResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EventCountSummaryResponse();
                    JToken responseDoc = JToken.Parse(responseContent);

                    if (responseDoc != null)
                    {
                        JToken eventPropertyNameValue = responseDoc["eventPropertyName"];
                        if (eventPropertyNameValue != null)
                        {
                            string eventPropertyNameInstance = (string)eventPropertyNameValue;
                            result.EventPropertyName = eventPropertyNameInstance;
                        }

                        JToken eventPropertyValueValue = responseDoc["eventPropertyValue"];
                        if (eventPropertyValueValue != null)
                        {
                            string eventPropertyValueInstance = (string)eventPropertyValueValue;
                            result.EventPropertyValue = eventPropertyValueInstance;
                        }

                        JToken startTimeValue = responseDoc["startTime"];
                        if (startTimeValue != null)
                        {
                            DateTime startTimeInstance = (DateTime)startTimeValue;
                            result.StartTime = startTimeInstance;
                        }

                        JToken endTimeValue = responseDoc["endTime"];
                        if (endTimeValue != null)
                        {
                            string endTimeInstance = (string)endTimeValue;
                            result.EndTime = endTimeInstance;
                        }

                        JToken timeGrainValue = responseDoc["TimeGrain"];
                        if (timeGrainValue != null)
                        {
                            // how
                            TimeSpan timeGrainInstance = TimeSpan.Parse((string)timeGrainValue, CultureInfo.InvariantCulture);
                            result.TimeGrain = timeGrainInstance;
                        }

                        JArray summaryItemsArray = (JArray)responseDoc["summaryItems"];
                        if (summaryItemsArray != null)
                        {
                            foreach (JToken summaryItemsValue in summaryItemsArray)
                            {
                                CountSummaryItem countSummaryItemInstance = new CountSummaryItem();
                                result.SummaryItems.Add(countSummaryItemInstance);

                                JToken eventTimeValue = summaryItemsValue["eventTime"];
                                if (eventTimeValue != null)
                                {
                                    DateTime eventTimeInstance = (DateTime)eventTimeValue;
                                    countSummaryItemInstance.EventTime = eventTimeInstance;
                                }

                                JToken totalEventsCountValue = summaryItemsValue["totalEventsCount"];
                                if (totalEventsCountValue != null)
                                {
                                    int totalEventsCountInstance = (int)totalEventsCountValue;
                                    countSummaryItemInstance.TotalEventsCount = totalEventsCountInstance;
                                }

                                JToken failedEventsCountValue = summaryItemsValue["failedEventsCount"];
                                if (failedEventsCountValue != null)
                                {
                                    int failedEventsCountInstance = (int)failedEventsCountValue;
                                    countSummaryItemInstance.FailedEventsCount = failedEventsCountInstance;
                                }
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }

        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='filterString'>
        /// The filter string
        /// </param>
        /// <param name='selectedProperties'>
        /// The list of property names to be returned. You can save bandwith by
        /// selecting only the properties you need.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public async Task<EventDataListResponse> ListEventsAsync(string filterString, string selectedProperties, CancellationToken cancellationToken)
        {
            // Validate
            if (filterString == null)
            {
                throw new ArgumentNullException("filterString");
            }

            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filterString", filterString);
                tracingParameters.Add("selectedProperties", selectedProperties);
                Tracing.Enter(invocationId, this, "ListEventsAsync", tracingParameters);
            }

            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/providers/microsoft.insights/eventtypes/management/values?";
            url = url + "api-version=2014-04-01";
            url = url + "&$filter=" + Uri.EscapeUriString(filterString);
            if (selectedProperties != null)
            {
                url = url + "&$select=" + Uri.EscapeUriString(selectedProperties);
            }

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    EventDataListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EventDataListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);

                    if (responseDoc != null)
                    {
                        EventDataCollection eventDataCollectionInstance = new EventDataCollection();
                        result.EventDataCollection = eventDataCollectionInstance;

                        JArray valueArray = (JArray)responseDoc["value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                EventData eventDataInstance = new EventData();
                                eventDataCollectionInstance.Value.Add(eventDataInstance);

                                JToken authorizationValue = valueValue["authorization"];
                                if (authorizationValue != null)
                                {
                                    SenderAuthorization authorizationInstance = new SenderAuthorization();
                                    eventDataInstance.Authorization = authorizationInstance;

                                    JToken actionValue = authorizationValue["action"];
                                    if (actionValue != null)
                                    {
                                        string actionInstance = (string)actionValue;
                                        authorizationInstance.Action = actionInstance;
                                    }

                                    JToken conditionValue = authorizationValue["condition"];
                                    if (conditionValue != null)
                                    {
                                        string conditionInstance = (string)conditionValue;
                                        authorizationInstance.Condition = conditionInstance;
                                    }

                                    JToken roleValue = authorizationValue["role"];
                                    if (roleValue != null)
                                    {
                                        string roleInstance = (string)roleValue;
                                        authorizationInstance.Role = roleInstance;
                                    }

                                    JToken scopeValue = authorizationValue["scope"];
                                    if (scopeValue != null)
                                    {
                                        string scopeInstance = (string)scopeValue;
                                        authorizationInstance.Scope = scopeInstance;
                                    }
                                }

                                JToken channelsValue = valueValue["channels"];
                                if (channelsValue != null)
                                {
                                    // how
                                    EventChannels channelsInstance = (EventChannels)Enum.Parse(typeof(EventChannels), (string)channelsValue, false);
                                    eventDataInstance.EventChannels = channelsInstance;
                                }

                                JToken claimsSequenceElement = valueValue["claims"];
                                if (claimsSequenceElement != null)
                                {
                                    foreach (JProperty property in claimsSequenceElement)
                                    {
                                        string claimsKey = (string)property.Name;
                                        string claimsValue = (string)property.Value;
                                        eventDataInstance.Claims.Add(claimsKey, claimsValue);
                                    }
                                }

                                JToken descriptionValue = valueValue["description"];
                                if (descriptionValue != null)
                                {
                                    string descriptionInstance = (string)descriptionValue;
                                    eventDataInstance.Description = descriptionInstance;
                                }

                                JToken eventDataIdValue = valueValue["eventDataId"];
                                if (eventDataIdValue != null)
                                {
                                    string eventDataIdInstance = (string)eventDataIdValue;
                                    eventDataInstance.EventDataId = eventDataIdInstance;
                                }

                                JToken correlationIdValue = valueValue["correlationId"];
                                if (correlationIdValue != null)
                                {
                                    string correlationIdInstance = (string)correlationIdValue;
                                    eventDataInstance.CorrelationId = correlationIdInstance;
                                }

                                JToken eventNameValue = valueValue["eventName"];
                                if (eventNameValue != null)
                                {
                                    LocalizableString eventNameInstance = new LocalizableString();
                                    eventDataInstance.EventName = eventNameInstance;

                                    JToken valueValue2 = eventNameValue["value"];
                                    if (valueValue2 != null)
                                    {
                                        string valueInstance = (string)valueValue2;
                                        eventNameInstance.Value = valueInstance;
                                    }

                                    JToken localizedValueValue = eventNameValue["localizedValue"];
                                    if (localizedValueValue != null)
                                    {
                                        string localizedValueInstance = (string)localizedValueValue;
                                        eventNameInstance.LocalizedValue = localizedValueInstance;
                                    }
                                }

                                JToken eventSourceValue = valueValue["eventSource"];
                                if (eventSourceValue != null)
                                {
                                    LocalizableString eventSourceInstance = new LocalizableString();
                                    eventDataInstance.EventSource = eventSourceInstance;

                                    JToken valueValue3 = eventSourceValue["value"];
                                    if (valueValue3 != null)
                                    {
                                        string valueInstance2 = (string)valueValue3;
                                        eventSourceInstance.Value = valueInstance2;
                                    }

                                    JToken localizedValueValue2 = eventSourceValue["localizedValue"];
                                    if (localizedValueValue2 != null)
                                    {
                                        string localizedValueInstance2 = (string)localizedValueValue2;
                                        eventSourceInstance.LocalizedValue = localizedValueInstance2;
                                    }
                                }

                                JToken httpRequestValue = valueValue["httpRequest"];
                                if (httpRequestValue != null)
                                {
                                    HttpRequestInfo httpRequestInstance = new HttpRequestInfo();
                                    eventDataInstance.HttpRequest = httpRequestInstance;

                                    JToken clientRequestIdValue = httpRequestValue["clientRequestId"];
                                    if (clientRequestIdValue != null)
                                    {
                                        string clientRequestIdInstance = (string)clientRequestIdValue;
                                        httpRequestInstance.ClientRequestId = clientRequestIdInstance;
                                    }

                                    JToken clientIpAddressValue = httpRequestValue["clientIpAddress"];
                                    if (clientIpAddressValue != null)
                                    {
                                        string clientIpAddressInstance = (string)clientIpAddressValue;
                                        httpRequestInstance.ClientIpAddress = clientIpAddressInstance;
                                    }

                                    JToken methodValue = httpRequestValue["method"];
                                    if (methodValue != null)
                                    {
                                        string methodInstance = (string)methodValue;
                                        httpRequestInstance.Method = methodInstance;
                                    }

                                    JToken uriValue = httpRequestValue["uri"];
                                    if (uriValue != null)
                                    {
                                        string uriInstance = (string)uriValue;
                                        httpRequestInstance.Uri = uriInstance;
                                    }
                                }

                                JToken levelValue = valueValue["level"];
                                if (levelValue != null)
                                {
                                    // how
                                    EventLevel levelInstance = (EventLevel)Enum.Parse(typeof(EventLevel), (string)levelValue, false);
                                    eventDataInstance.Level = levelInstance;
                                }

                                JToken resourceGroupNameValue = valueValue["resourceGroupName"];
                                if (resourceGroupNameValue != null)
                                {
                                    string resourceGroupNameInstance = (string)resourceGroupNameValue;
                                    eventDataInstance.ResourceGroupName = resourceGroupNameInstance;
                                }

                                JToken resourceProviderNameValue = valueValue["resourceProviderName"];
                                if (resourceProviderNameValue != null)
                                {
                                    LocalizableString resourceProviderNameInstance = new LocalizableString();
                                    eventDataInstance.ResourceProviderName = resourceProviderNameInstance;

                                    JToken valueValue4 = resourceProviderNameValue["value"];
                                    if (valueValue4 != null)
                                    {
                                        string valueInstance3 = (string)valueValue4;
                                        resourceProviderNameInstance.Value = valueInstance3;
                                    }

                                    JToken localizedValueValue3 = resourceProviderNameValue["localizedValue"];
                                    if (localizedValueValue3 != null)
                                    {
                                        string localizedValueInstance3 = (string)localizedValueValue3;
                                        resourceProviderNameInstance.LocalizedValue = localizedValueInstance3;
                                    }
                                }

                                JToken resourceUriValue = valueValue["resourceUri"];
                                if (resourceUriValue != null)
                                {
                                    string resourceUriInstance = (string)resourceUriValue;
                                    eventDataInstance.ResourceUri = resourceUriInstance;
                                }

                                JToken operationIdValue = valueValue["operationId"];
                                if (operationIdValue != null)
                                {
                                    string operationIdInstance = (string)operationIdValue;
                                    eventDataInstance.OperationId = operationIdInstance;
                                }

                                JToken operationNameValue = valueValue["operationName"];
                                if (operationNameValue != null)
                                {
                                    LocalizableString operationNameInstance = new LocalizableString();
                                    eventDataInstance.OperationName = operationNameInstance;

                                    JToken valueValue5 = operationNameValue["value"];
                                    if (valueValue5 != null)
                                    {
                                        string valueInstance4 = (string)valueValue5;
                                        operationNameInstance.Value = valueInstance4;
                                    }

                                    JToken localizedValueValue4 = operationNameValue["localizedValue"];
                                    if (localizedValueValue4 != null)
                                    {
                                        string localizedValueInstance4 = (string)localizedValueValue4;
                                        operationNameInstance.LocalizedValue = localizedValueInstance4;
                                    }
                                }

                                JToken propertiesSequenceElement = valueValue["properties"];
                                if (propertiesSequenceElement != null)
                                {
                                    foreach (JProperty property2 in propertiesSequenceElement)
                                    {
                                        string propertiesKey = (string)property2.Name;
                                        string propertiesValue = (string)property2.Value;
                                        eventDataInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }

                                JToken statusValue = valueValue["status"];
                                if (statusValue != null)
                                {
                                    LocalizableString statusInstance = new LocalizableString();
                                    eventDataInstance.Status = statusInstance;

                                    JToken valueValue6 = statusValue["value"];
                                    if (valueValue6 != null)
                                    {
                                        string valueInstance5 = (string)valueValue6;
                                        statusInstance.Value = valueInstance5;
                                    }

                                    JToken localizedValueValue5 = statusValue["localizedValue"];
                                    if (localizedValueValue5 != null)
                                    {
                                        string localizedValueInstance5 = (string)localizedValueValue5;
                                        statusInstance.LocalizedValue = localizedValueInstance5;
                                    }
                                }

                                JToken subStatusValue = valueValue["subStatus"];
                                if (subStatusValue != null)
                                {
                                    LocalizableString subStatusInstance = new LocalizableString();
                                    eventDataInstance.SubStatus = subStatusInstance;

                                    JToken valueValue7 = subStatusValue["value"];
                                    if (valueValue7 != null)
                                    {
                                        string valueInstance6 = (string)valueValue7;
                                        subStatusInstance.Value = valueInstance6;
                                    }

                                    JToken localizedValueValue6 = subStatusValue["localizedValue"];
                                    if (localizedValueValue6 != null)
                                    {
                                        string localizedValueInstance6 = (string)localizedValueValue6;
                                        subStatusInstance.LocalizedValue = localizedValueInstance6;
                                    }
                                }

                                JToken eventTimestampValue = valueValue["eventTimestamp"];
                                if (eventTimestampValue != null)
                                {
                                    DateTime eventTimestampInstance = (DateTime)eventTimestampValue;
                                    eventDataInstance.EventTimestamp = eventTimestampInstance;
                                }

                                JToken submissionTimestampValue = valueValue["submissionTimestamp"];
                                if (submissionTimestampValue != null)
                                {
                                    DateTime submissionTimestampInstance = (DateTime)submissionTimestampValue;
                                    eventDataInstance.SubmissionTimestamp = submissionTimestampInstance;
                                }

                                JToken subscriptionIdValue = valueValue["subscriptionId"];
                                if (subscriptionIdValue != null)
                                {
                                    string subscriptionIdInstance = (string)subscriptionIdValue;
                                    eventDataInstance.SubscriptionId = subscriptionIdInstance;
                                }
                            }
                        }

                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null)
                        {
                            string nextLinkInstance = (string)nextLinkValue;
                            eventDataCollectionInstance.NextLink = nextLinkInstance;
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }

        /// <summary>
        /// The List Event Next operation lists the next set of events.
        /// </summary>
        /// <param name='nextLink'>
        /// The next link
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public async Task<EventDataListResponse> ListEventsNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }

            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                Tracing.Enter(invocationId, this, "ListEventsNextAsync", tracingParameters);
            }

            // Construct URL
            string url = nextLink;

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    EventDataListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EventDataListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);

                    if (responseDoc != null)
                    {
                        EventDataCollection eventDataCollectionInstance = new EventDataCollection();
                        result.EventDataCollection = eventDataCollectionInstance;

                        JArray valueArray = (JArray)responseDoc["value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                EventData eventDataInstance = new EventData();
                                eventDataCollectionInstance.Value.Add(eventDataInstance);

                                JToken authorizationValue = valueValue["authorization"];
                                if (authorizationValue != null)
                                {
                                    SenderAuthorization authorizationInstance = new SenderAuthorization();
                                    eventDataInstance.Authorization = authorizationInstance;

                                    JToken actionValue = authorizationValue["action"];
                                    if (actionValue != null)
                                    {
                                        string actionInstance = (string)actionValue;
                                        authorizationInstance.Action = actionInstance;
                                    }

                                    JToken conditionValue = authorizationValue["condition"];
                                    if (conditionValue != null)
                                    {
                                        string conditionInstance = (string)conditionValue;
                                        authorizationInstance.Condition = conditionInstance;
                                    }

                                    JToken roleValue = authorizationValue["role"];
                                    if (roleValue != null)
                                    {
                                        string roleInstance = (string)roleValue;
                                        authorizationInstance.Role = roleInstance;
                                    }

                                    JToken scopeValue = authorizationValue["scope"];
                                    if (scopeValue != null)
                                    {
                                        string scopeInstance = (string)scopeValue;
                                        authorizationInstance.Scope = scopeInstance;
                                    }
                                }

                                JToken channelsValue = valueValue["channels"];
                                if (channelsValue != null)
                                {
                                    // how
                                    EventChannels channelsInstance = (EventChannels)Enum.Parse(typeof(EventChannels), (string)channelsValue, false);
                                    eventDataInstance.EventChannels = channelsInstance;
                                }

                                JToken claimsSequenceElement = valueValue["claims"];
                                if (claimsSequenceElement != null)
                                {
                                    foreach (JProperty property in claimsSequenceElement)
                                    {
                                        string claimsKey = (string)property.Name;
                                        string claimsValue = (string)property.Value;
                                        eventDataInstance.Claims.Add(claimsKey, claimsValue);
                                    }
                                }

                                JToken descriptionValue = valueValue["description"];
                                if (descriptionValue != null)
                                {
                                    string descriptionInstance = (string)descriptionValue;
                                    eventDataInstance.Description = descriptionInstance;
                                }

                                JToken eventDataIdValue = valueValue["eventDataId"];
                                if (eventDataIdValue != null)
                                {
                                    string eventDataIdInstance = (string)eventDataIdValue;
                                    eventDataInstance.EventDataId = eventDataIdInstance;
                                }

                                JToken correlationIdValue = valueValue["correlationId"];
                                if (correlationIdValue != null)
                                {
                                    string correlationIdInstance = (string)correlationIdValue;
                                    eventDataInstance.CorrelationId = correlationIdInstance;
                                }

                                JToken eventNameValue = valueValue["eventName"];
                                if (eventNameValue != null)
                                {
                                    LocalizableString eventNameInstance = new LocalizableString();
                                    eventDataInstance.EventName = eventNameInstance;

                                    JToken valueValue2 = eventNameValue["value"];
                                    if (valueValue2 != null)
                                    {
                                        string valueInstance = (string)valueValue2;
                                        eventNameInstance.Value = valueInstance;
                                    }

                                    JToken localizedValueValue = eventNameValue["localizedValue"];
                                    if (localizedValueValue != null)
                                    {
                                        string localizedValueInstance = (string)localizedValueValue;
                                        eventNameInstance.LocalizedValue = localizedValueInstance;
                                    }
                                }

                                JToken eventSourceValue = valueValue["eventSource"];
                                if (eventSourceValue != null)
                                {
                                    LocalizableString eventSourceInstance = new LocalizableString();
                                    eventDataInstance.EventSource = eventSourceInstance;

                                    JToken valueValue3 = eventSourceValue["value"];
                                    if (valueValue3 != null)
                                    {
                                        string valueInstance2 = (string)valueValue3;
                                        eventSourceInstance.Value = valueInstance2;
                                    }

                                    JToken localizedValueValue2 = eventSourceValue["localizedValue"];
                                    if (localizedValueValue2 != null)
                                    {
                                        string localizedValueInstance2 = (string)localizedValueValue2;
                                        eventSourceInstance.LocalizedValue = localizedValueInstance2;
                                    }
                                }

                                JToken httpRequestValue = valueValue["httpRequest"];
                                if (httpRequestValue != null)
                                {
                                    HttpRequestInfo httpRequestInstance = new HttpRequestInfo();
                                    eventDataInstance.HttpRequest = httpRequestInstance;

                                    JToken clientRequestIdValue = httpRequestValue["clientRequestId"];
                                    if (clientRequestIdValue != null)
                                    {
                                        string clientRequestIdInstance = (string)clientRequestIdValue;
                                        httpRequestInstance.ClientRequestId = clientRequestIdInstance;
                                    }

                                    JToken clientIpAddressValue = httpRequestValue["clientIpAddress"];
                                    if (clientIpAddressValue != null)
                                    {
                                        string clientIpAddressInstance = (string)clientIpAddressValue;
                                        httpRequestInstance.ClientIpAddress = clientIpAddressInstance;
                                    }

                                    JToken methodValue = httpRequestValue["method"];
                                    if (methodValue != null)
                                    {
                                        string methodInstance = (string)methodValue;
                                        httpRequestInstance.Method = methodInstance;
                                    }

                                    JToken uriValue = httpRequestValue["uri"];
                                    if (uriValue != null)
                                    {
                                        string uriInstance = (string)uriValue;
                                        httpRequestInstance.Uri = uriInstance;
                                    }
                                }

                                JToken levelValue = valueValue["level"];
                                if (levelValue != null)
                                {
                                    // how
                                    EventLevel levelInstance = (EventLevel)Enum.Parse(typeof(EventLevel), (string)levelValue, false);
                                    eventDataInstance.Level = levelInstance;
                                }

                                JToken resourceGroupNameValue = valueValue["resourceGroupName"];
                                if (resourceGroupNameValue != null)
                                {
                                    string resourceGroupNameInstance = (string)resourceGroupNameValue;
                                    eventDataInstance.ResourceGroupName = resourceGroupNameInstance;
                                }

                                JToken resourceProviderNameValue = valueValue["resourceProviderName"];
                                if (resourceProviderNameValue != null)
                                {
                                    LocalizableString resourceProviderNameInstance = new LocalizableString();
                                    eventDataInstance.ResourceProviderName = resourceProviderNameInstance;

                                    JToken valueValue4 = resourceProviderNameValue["value"];
                                    if (valueValue4 != null)
                                    {
                                        string valueInstance3 = (string)valueValue4;
                                        resourceProviderNameInstance.Value = valueInstance3;
                                    }

                                    JToken localizedValueValue3 = resourceProviderNameValue["localizedValue"];
                                    if (localizedValueValue3 != null)
                                    {
                                        string localizedValueInstance3 = (string)localizedValueValue3;
                                        resourceProviderNameInstance.LocalizedValue = localizedValueInstance3;
                                    }
                                }

                                JToken resourceUriValue = valueValue["resourceUri"];
                                if (resourceUriValue != null)
                                {
                                    string resourceUriInstance = (string)resourceUriValue;
                                    eventDataInstance.ResourceUri = resourceUriInstance;
                                }

                                JToken operationIdValue = valueValue["operationId"];
                                if (operationIdValue != null)
                                {
                                    string operationIdInstance = (string)operationIdValue;
                                    eventDataInstance.OperationId = operationIdInstance;
                                }

                                JToken operationNameValue = valueValue["operationName"];
                                if (operationNameValue != null)
                                {
                                    LocalizableString operationNameInstance = new LocalizableString();
                                    eventDataInstance.OperationName = operationNameInstance;

                                    JToken valueValue5 = operationNameValue["value"];
                                    if (valueValue5 != null)
                                    {
                                        string valueInstance4 = (string)valueValue5;
                                        operationNameInstance.Value = valueInstance4;
                                    }

                                    JToken localizedValueValue4 = operationNameValue["localizedValue"];
                                    if (localizedValueValue4 != null)
                                    {
                                        string localizedValueInstance4 = (string)localizedValueValue4;
                                        operationNameInstance.LocalizedValue = localizedValueInstance4;
                                    }
                                }

                                JToken propertiesSequenceElement = valueValue["properties"];
                                if (propertiesSequenceElement != null)
                                {
                                    foreach (JProperty property2 in propertiesSequenceElement)
                                    {
                                        string propertiesKey = (string)property2.Name;
                                        string propertiesValue = (string)property2.Value;
                                        eventDataInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }

                                JToken statusValue = valueValue["status"];
                                if (statusValue != null)
                                {
                                    LocalizableString statusInstance = new LocalizableString();
                                    eventDataInstance.Status = statusInstance;

                                    JToken valueValue6 = statusValue["value"];
                                    if (valueValue6 != null)
                                    {
                                        string valueInstance5 = (string)valueValue6;
                                        statusInstance.Value = valueInstance5;
                                    }

                                    JToken localizedValueValue5 = statusValue["localizedValue"];
                                    if (localizedValueValue5 != null)
                                    {
                                        string localizedValueInstance5 = (string)localizedValueValue5;
                                        statusInstance.LocalizedValue = localizedValueInstance5;
                                    }
                                }

                                JToken subStatusValue = valueValue["subStatus"];
                                if (subStatusValue != null)
                                {
                                    LocalizableString subStatusInstance = new LocalizableString();
                                    eventDataInstance.SubStatus = subStatusInstance;

                                    JToken valueValue7 = subStatusValue["value"];
                                    if (valueValue7 != null)
                                    {
                                        string valueInstance6 = (string)valueValue7;
                                        subStatusInstance.Value = valueInstance6;
                                    }

                                    JToken localizedValueValue6 = subStatusValue["localizedValue"];
                                    if (localizedValueValue6 != null)
                                    {
                                        string localizedValueInstance6 = (string)localizedValueValue6;
                                        subStatusInstance.LocalizedValue = localizedValueInstance6;
                                    }
                                }

                                JToken eventTimestampValue = valueValue["eventTimestamp"];
                                if (eventTimestampValue != null)
                                {
                                    DateTime eventTimestampInstance = (DateTime)eventTimestampValue;
                                    eventDataInstance.EventTimestamp = eventTimestampInstance;
                                }

                                JToken submissionTimestampValue = valueValue["submissionTimestamp"];
                                if (submissionTimestampValue != null)
                                {
                                    DateTime submissionTimestampInstance = (DateTime)submissionTimestampValue;
                                    eventDataInstance.SubmissionTimestamp = submissionTimestampInstance;
                                }

                                JToken subscriptionIdValue = valueValue["subscriptionId"];
                                if (subscriptionIdValue != null)
                                {
                                    string subscriptionIdInstance = (string)subscriptionIdValue;
                                    eventDataInstance.SubscriptionId = subscriptionIdInstance;
                                }
                            }
                        }

                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null)
                        {
                            string nextLinkInstance = (string)nextLinkValue;
                            eventDataCollectionInstance.NextLink = nextLinkInstance;
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Operations for metric definitions.
    /// </summary>
    public partial interface IMetricDefinitionOperations
    {
        /// <summary>
        /// The List Metric Definitions operation lists the metric definitions
        /// for the resource.
        /// </summary>
        /// <param name='resourceUri'>
        /// The uri of the target resource to get metrics for.
        /// </param>
        /// <param name='filterString'>
        /// An OData $filter expression that supports querying by the name of
        /// the metric definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric Definitions operation response.
        /// </returns>
        Task<MetricDefinitionListResponse> GetMetricDefinitionsAsync(string resourceUri, string filterString, CancellationToken cancellationToken);
    }

    /// <summary>
    /// Operations for metric definitions.
    /// </summary>
    public static partial class MetricDefinitionOperationsExtensions
    {
        /// <summary>
        /// The List Metric Definitions operation lists the metric definitions
        /// for the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Insights.IMetricDefinitionOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// The uri of the target resource to get metrics for.
        /// </param>
        /// <param name='filterString'>
        /// An OData $filter expression that supports querying by the name of
        /// the metric definition.
        /// </param>
        /// <returns>
        /// The List Metric Definitions operation response.
        /// </returns>
        public static MetricDefinitionListResponse GetMetricDefinitions(this IMetricDefinitionOperations operations, string resourceUri, string filterString)
        {
            try
            {
                return operations.GetMetricDefinitionsAsync(resourceUri, filterString).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }

        /// <summary>
        /// The List Metric Definitions operation lists the metric definitions
        /// for the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Insights.IMetricDefinitionOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// The uri of the target resource to get metrics for.
        /// </param>
        /// <param name='filterString'>
        /// An OData $filter expression that supports querying by the name of
        /// the metric definition.
        /// </param>
        /// <returns>
        /// The List Metric Definitions operation response.
        /// </returns>
        public static Task<MetricDefinitionListResponse> GetMetricDefinitionsAsync(this IMetricDefinitionOperations operations, string resourceUri, string filterString)
        {
            return operations.GetMetricDefinitionsAsync(resourceUri, filterString, CancellationToken.None);
        }
    }

    /// <summary>
    /// Operations for metric definitions.
    /// </summary>
    internal partial class MetricDefinitionOperations : IServiceOperations<InsightsClient>, IMetricDefinitionOperations
    {
        /// <summary>
        /// Initializes a new instance of the MetricDefinitionOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MetricDefinitionOperations(InsightsClient client)
        {
            this._client = client;
        }

        private InsightsClient _client;

        /// <summary>
        /// Gets a reference to the Microsoft.Azure.Insights.InsightsClient.
        /// </summary>
        public InsightsClient Client
        {
            get { return this._client; }
        }

        /// <summary>
        /// The List Metric Definitions operation lists the metric definitions
        /// for the resource.
        /// </summary>
        /// <param name='resourceUri'>
        /// The uri of the target resource to get metrics for.
        /// </param>
        /// <param name='filterString'>
        /// An OData $filter expression that supports querying by the name of
        /// the metric definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric Definitions operation response.
        /// </returns>
        public async Task<MetricDefinitionListResponse> GetMetricDefinitionsInternalAsync(string resourceUri, string filterString, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUri == null)
            {
                throw new ArgumentNullException("resourceUri");
            }
            if (filterString == null)
            {
                throw new ArgumentNullException("filterString");
            }

            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUri", resourceUri);
                tracingParameters.Add("filterString", filterString);
                Tracing.Enter(invocationId, this, "GetMetricDefinitionsAsync", tracingParameters);
            }

            // Construct URL
            string url = this.Client.BaseUri + "/" + resourceUri + "/metricDefinitions?";
            url = url + "api-version=2014-04-01";
            url = url + "&$filter=" + Uri.EscapeUriString(filterString);

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-04-01");

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    MetricDefinitionListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new MetricDefinitionListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);

                    if (responseDoc != null)
                    {
                        MetricDefinitionCollection metricDefinitionCollectionInstance = new MetricDefinitionCollection();
                        result.MetricDefinitionCollection = metricDefinitionCollectionInstance;

                        JArray valueArray = (JArray)responseDoc["value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                metricDefinitionCollectionInstance.Value.Add(metricDefinitionInstance);

                                JToken nameValue = valueValue["name"];
                                if (nameValue != null)
                                {
                                    LocalizableString nameInstance = new LocalizableString();
                                    metricDefinitionInstance.Name = nameInstance;

                                    JToken valueValue2 = nameValue["value"];
                                    if (valueValue2 != null)
                                    {
                                        string valueInstance = (string)valueValue2;
                                        nameInstance.Value = valueInstance;
                                    }

                                    JToken localizedValueValue = nameValue["localizedValue"];
                                    if (localizedValueValue != null)
                                    {
                                        string localizedValueInstance = (string)localizedValueValue;
                                        nameInstance.LocalizedValue = localizedValueInstance;
                                    }
                                }

                                JToken unitValue = valueValue["unit"];
                                if (unitValue != null)
                                {
                                    // how
                                    Unit unitInstance = (Unit)Enum.Parse(typeof(Unit), (string)unitValue, false);
                                    metricDefinitionInstance.Unit = unitInstance;
                                }

                                JToken primaryAggregationTypeValue = valueValue["primaryAggregationType"];
                                if (primaryAggregationTypeValue != null)
                                {
                                    // how
                                    AggregationType primaryAggregationTypeInstance = (AggregationType)Enum.Parse(typeof(AggregationType), (string)primaryAggregationTypeValue, false);
                                    metricDefinitionInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                }

                                JToken resourceUriValue = valueValue["resourceUri"];
                                if (resourceUriValue != null)
                                {
                                    string resourceUriInstance = (string)resourceUriValue;
                                    metricDefinitionInstance.ResourceUri = resourceUriInstance;
                                }

                                JArray metricAvailabilitiesArray = (JArray)valueValue["metricAvailabilities"];
                                if (metricAvailabilitiesArray != null)
                                {
                                    foreach (JToken metricAvailabilitiesValue in metricAvailabilitiesArray)
                                    {
                                        MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                        metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);

                                        JToken timeGrainValue = metricAvailabilitiesValue["timeGrain"];
                                        if (timeGrainValue != null)
                                        {
                                            TimeSpan timeGrainInstance = TypeConversion.From8601TimeSpan((string)timeGrainValue);
                                            metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                        }

                                        JToken retentionValue = metricAvailabilitiesValue["retention"];
                                        if (retentionValue != null)
                                        {
                                            TimeSpan retentionInstance = TypeConversion.From8601TimeSpan((string)retentionValue);
                                            metricAvailabilityInstance.Retention = retentionInstance;
                                        }

                                        JToken locationValue = metricAvailabilitiesValue["location"];
                                        if (locationValue != null)
                                        {
                                            MetricLocation locationInstance = new MetricLocation();
                                            metricAvailabilityInstance.Location = locationInstance;

                                            JToken tableEndpointValue = locationValue["tableEndpoint"];
                                            if (tableEndpointValue != null)
                                            {
                                                string tableEndpointInstance = (string)tableEndpointValue;
                                                locationInstance.TableEndpoint = tableEndpointInstance;
                                            }

                                            JArray tableInfoArray = (JArray)locationValue["tableInfo"];
                                            if (tableInfoArray != null)
                                            {
                                                foreach (JToken tableInfoValue in tableInfoArray)
                                                {
                                                    MetricTableInfo metricTableInfoInstance = new MetricTableInfo();
                                                    locationInstance.TableInfo.Add(metricTableInfoInstance);

                                                    JToken tableNameValue = tableInfoValue["tableName"];
                                                    if (tableNameValue != null)
                                                    {
                                                        string tableNameInstance = (string)tableNameValue;
                                                        metricTableInfoInstance.TableName = tableNameInstance;
                                                    }

                                                    JToken startTimeValue = tableInfoValue["startTime"];
                                                    if (startTimeValue != null)
                                                    {
                                                        DateTime startTimeInstance = (DateTime)startTimeValue;
                                                        metricTableInfoInstance.StartTime = startTimeInstance;
                                                    }

                                                    JToken endTimeValue = tableInfoValue["endTime"];
                                                    if (endTimeValue != null)
                                                    {
                                                        DateTime endTimeInstance = (DateTime)endTimeValue;
                                                        metricTableInfoInstance.EndTime = endTimeInstance;
                                                    }

                                                    JToken sasTokenValue = tableInfoValue["sasToken"];
                                                    if (sasTokenValue != null)
                                                    {
                                                        string sasTokenInstance = (string)sasTokenValue;
                                                        metricTableInfoInstance.SasToken = sasTokenInstance;
                                                    }

                                                    JToken sasTokenExpirationTimeValue = tableInfoValue["sasTokenExpirationTime"];
                                                    if (sasTokenExpirationTimeValue != null)
                                                    {
                                                        DateTime sasTokenExpirationTimeInstance = (DateTime)sasTokenExpirationTimeValue;
                                                        metricTableInfoInstance.SasTokenExpirationTime = sasTokenExpirationTimeInstance;
                                                    }
                                                }
                                            }

                                            JToken partitionKeyValue = locationValue["partitionKey"];
                                            if (partitionKeyValue != null)
                                            {
                                                string partitionKeyInstance = (string)partitionKeyValue;
                                                locationInstance.PartitionKey = partitionKeyInstance;
                                            }
                                        }
                                    }
                                }

                                JToken propertiesSequenceElement = valueValue["properties"];
                                if (propertiesSequenceElement != null)
                                {
                                    foreach (JProperty property in propertiesSequenceElement)
                                    {
                                        string propertiesKey = (string)property.Name;
                                        string propertiesValue = (string)property.Value;
                                        metricDefinitionInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Operations for metric values.
    /// </summary>
    public partial interface IMetricOperations
    {
        /// <summary>
        /// The List Metric operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='resourceUri'>
        /// The uri of the target resource to get metrics for.
        /// </param>
        /// <param name='filterString'>
        /// An OData $filter expression that supports querying by the name of
        /// the metric definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        Task<MetricListResponse> GetMetricsAsync(string resourceUri, string filterString, CancellationToken cancellationToken);
        Task<MetricListResponse> GetMetricsAsync(string resourceUri, string filterString, IEnumerable<MetricDefinition> definitions);
    }

    /// <summary>
    /// Operations for metric values.
    /// </summary>
    public static partial class MetricOperationsExtensions
    {
        /// <summary>
        /// The List Metric operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Insights.IMetricOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// The uri of the target resource to get metrics for.
        /// </param>
        /// <param name='filterString'>
        /// An OData $filter expression that supports querying by the name of
        /// the metric definition.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        public static MetricListResponse GetMetrics(this IMetricOperations operations, string resourceUri, string filterString)
        {
            try
            {
                return operations.GetMetricsAsync(resourceUri, filterString).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }

        /// <summary>
        /// The List Metric operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Insights.IMetricOperations.
        /// </param>
        /// <param name='resourceUri'>
        /// The uri of the target resource to get metrics for.
        /// </param>
        /// <param name='filterString'>
        /// An OData $filter expression that supports querying by the name of
        /// the metric definition.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        public static Task<MetricListResponse> GetMetricsAsync(this IMetricOperations operations, string resourceUri, string filterString)
        {
            return operations.GetMetricsAsync(resourceUri, filterString, CancellationToken.None);
        }
    }

    /// <summary>
    /// Operations for metric values.
    /// </summary>
    internal partial class MetricOperations : IServiceOperations<InsightsClient>, IMetricOperations
    {
        /// <summary>
        /// Initializes a new instance of the MetricOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MetricOperations(InsightsClient client)
        {
            this._client = client;
        }

        private InsightsClient _client;

        /// <summary>
        /// Gets a reference to the Microsoft.Azure.Insights.InsightsClient.
        /// </summary>
        public InsightsClient Client
        {
            get { return this._client; }
        }

        /// <summary>
        /// The List Metric operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='resourceUri'>
        /// The uri of the target resource to get metrics for.
        /// </param>
        /// <param name='filterString'>
        /// An OData $filter expression that supports querying by the name of
        /// the metric definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        public async Task<MetricListResponse> GetMetricsInternalAsync(string resourceUri, string filterString, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUri == null)
            {
                throw new ArgumentNullException("resourceUri");
            }

            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUri", resourceUri);
                tracingParameters.Add("filterString", filterString);
                Tracing.Enter(invocationId, this, "GetMetricsAsync", tracingParameters);
            }

            // Construct URL
            string url = this.Client.BaseUri + "/" + resourceUri + "/metrics?";
            url = url + "api-version=2014-04-01";
            if (filterString != null)
            {
                url = url + "&$filter=" + Uri.EscapeUriString(filterString);
            }

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-04-01");

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    MetricListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new MetricListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);

                    if (responseDoc != null)
                    {
                        MetricCollection metricCollectionInstance = new MetricCollection();
                        result.MetricCollection = metricCollectionInstance;

                        JArray valueArray = (JArray)responseDoc["value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                Metric metricInstance = new Metric();
                                metricCollectionInstance.Value.Add(metricInstance);

                                JToken nameValue = valueValue["name"];
                                if (nameValue != null)
                                {
                                    LocalizableString nameInstance = new LocalizableString();
                                    metricInstance.Name = nameInstance;

                                    JToken valueValue2 = nameValue["value"];
                                    if (valueValue2 != null)
                                    {
                                        string valueInstance = (string)valueValue2;
                                        nameInstance.Value = valueInstance;
                                    }

                                    JToken localizedValueValue = nameValue["localizedValue"];
                                    if (localizedValueValue != null)
                                    {
                                        string localizedValueInstance = (string)localizedValueValue;
                                        nameInstance.LocalizedValue = localizedValueInstance;
                                    }
                                }

                                JToken unitValue = valueValue["unit"];
                                if (unitValue != null)
                                {
                                    // how
                                    Unit unitInstance = (Unit)Enum.Parse(typeof(Unit), (string)unitValue, false);
                                    metricInstance.Unit = unitInstance;
                                }

                                JToken timeGrainValue = valueValue["timeGrain"];
                                if (timeGrainValue != null)
                                {
                                    TimeSpan timeGrainInstance = TypeConversion.From8601TimeSpan((string)timeGrainValue);
                                    metricInstance.TimeGrain = timeGrainInstance;
                                }

                                JToken startTimeValue = valueValue["startTime"];
                                if (startTimeValue != null)
                                {
                                    DateTime startTimeInstance = (DateTime)startTimeValue;
                                    metricInstance.StartTime = startTimeInstance;
                                }

                                JToken endTimeValue = valueValue["endTime"];
                                if (endTimeValue != null)
                                {
                                    DateTime endTimeInstance = (DateTime)endTimeValue;
                                    metricInstance.EndTime = endTimeInstance;
                                }

                                JArray metricValuesArray = (JArray)valueValue["metricValues"];
                                if (metricValuesArray != null)
                                {
                                    foreach (JToken metricValuesValue in metricValuesArray)
                                    {
                                        MetricValue metricValueInstance = new MetricValue();
                                        metricInstance.MetricValues.Add(metricValueInstance);

                                        JToken timestampValue = metricValuesValue["timestamp"];
                                        if (timestampValue != null)
                                        {
                                            DateTime timestampInstance = (DateTime)timestampValue;
                                            metricValueInstance.Timestamp = timestampInstance;
                                        }

                                        JToken averageValue = metricValuesValue["average"];
                                        if (averageValue != null)
                                        {
                                            double averageInstance = (double)averageValue;
                                            metricValueInstance.Average = averageInstance;
                                        }

                                        JToken minimumValue = metricValuesValue["minimum"];
                                        if (minimumValue != null)
                                        {
                                            double minimumInstance = (double)minimumValue;
                                            metricValueInstance.Minimum = minimumInstance;
                                        }

                                        JToken maximumValue = metricValuesValue["maximum"];
                                        if (maximumValue != null)
                                        {
                                            double maximumInstance = (double)maximumValue;
                                            metricValueInstance.Maximum = maximumInstance;
                                        }

                                        JToken totalValue = metricValuesValue["total"];
                                        if (totalValue != null)
                                        {
                                            double totalInstance = (double)totalValue;
                                            metricValueInstance.Total = totalInstance;
                                        }

                                        JToken countValue = metricValuesValue["count"];
                                        if (countValue != null)
                                        {
                                            long countInstance = (long)countValue;
                                            metricValueInstance.Count = countInstance;
                                        }

                                        JToken lastValue = metricValuesValue["last"];
                                        if (lastValue != null)
                                        {
                                            double lastInstance = (double)lastValue;
                                            metricValueInstance.Last = lastInstance;
                                        }

                                        JToken propertiesSequenceElement = metricValuesValue["properties"];
                                        if (propertiesSequenceElement != null)
                                        {
                                            foreach (JProperty property in propertiesSequenceElement)
                                            {
                                                string propertiesKey = (string)property.Name;
                                                string propertiesValue = (string)property.Value;
                                                metricValueInstance.Properties.Add(propertiesKey, propertiesValue);
                                            }
                                        }
                                    }
                                }

                                JToken resourceIdValue = valueValue["resourceId"];
                                if (resourceIdValue != null)
                                {
                                    string resourceIdInstance = (string)resourceIdValue;
                                    metricInstance.ResourceId = resourceIdInstance;
                                }

                                JToken propertiesSequenceElement2 = valueValue["properties"];
                                if (propertiesSequenceElement2 != null)
                                {
                                    foreach (JProperty property2 in propertiesSequenceElement2)
                                    {
                                        string propertiesKey2 = (string)property2.Name;
                                        string propertiesValue2 = (string)property2.Value;
                                        metricInstance.Properties.Add(propertiesKey2, propertiesValue2);
                                    }
                                }
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }

    public partial interface IUsageMetricsOperations
    {
        /// <summary>
        /// The List operation lists the usage metrics for the resource.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Usage Metric operation response.
        /// </returns>
        Task<UsageMetricListResponse> ListAsync(string resourceUri, IList<string> metricNames, CancellationToken cancellationToken);
    }

    public static partial class UsageMetricsOperationsExtensions
    {
        /// <summary>
        /// The List operation lists the usage metrics for the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Insights.IUsageMetricsOperations.
        /// </param>
        /// <returns>
        /// The List Usage Metric operation response.
        /// </returns>
        public static UsageMetricListResponse List(this IUsageMetricsOperations operations, string resourceUri, IList<string> metricNames)
        {
            try
            {
                return operations.ListAsync(resourceUri, metricNames).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }

        /// <summary>
        /// The List operation lists the usage metrics for the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Insights.IUsageMetricsOperations.
        /// </param>
        /// <returns>
        /// The List Usage Metric operation response.
        /// </returns>
        public static Task<UsageMetricListResponse> ListAsync(this IUsageMetricsOperations operations, string resourceUri, IList<string> metricNames)
        {
            return operations.ListAsync(resourceUri, metricNames, CancellationToken.None);
        }
    }

    internal partial class UsageMetricsOperations : IServiceOperations<InsightsClient>, IUsageMetricsOperations
    {
        /// <summary>
        /// Initializes a new instance of the UsageMetricsOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal UsageMetricsOperations(InsightsClient client)
        {
            this._client = client;
        }

        private InsightsClient _client;

        /// <summary>
        /// Gets a reference to the Microsoft.Azure.Insights.InsightsClient.
        /// </summary>
        public InsightsClient Client
        {
            get { return this._client; }
        }

        /// <summary>
        /// The List operation lists the usage metrics for the resource.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Usage Metric operation response.
        /// </returns>
        public async Task<UsageMetricListResponse> ListAsync(string resourceUri, IList<string> metricNames, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUri == null)
            {
                throw new ArgumentNullException("resourceUri");
            }
            if (metricNames == null)
            {
                throw new ArgumentNullException("metricNames");
            }

            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUri", resourceUri);
                tracingParameters.Add("metricNames", metricNames);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }

            // Construct URL
            string url = this.Client.BaseUri + "/" + resourceUri + "/usages?";
            url = url + "api-version=2014-04-01";
            url = url + "&names=" + Uri.EscapeUriString(string.Join(",", metricNames));

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-04-01");

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    UsageMetricListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new UsageMetricListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);

                    if (responseDoc != null)
                    {
                        UsageMetricCollection usageMetricCollectionInstance = new UsageMetricCollection();
                        result.UsageMetricCollection = usageMetricCollectionInstance;

                        JArray valueArray = (JArray)responseDoc["value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                UsageMetric usageMetricInstance = new UsageMetric();
                                usageMetricCollectionInstance.Value.Add(usageMetricInstance);

                                JToken nameValue = valueValue["name"];
                                if (nameValue != null)
                                {
                                    string nameInstance = (string)nameValue;
                                    usageMetricInstance.Name = nameInstance;
                                }

                                JToken displayNameValue = valueValue["displayName"];
                                if (displayNameValue != null)
                                {
                                    string displayNameInstance = (string)displayNameValue;
                                    usageMetricInstance.DisplayName = displayNameInstance;
                                }

                                JToken currentValueValue = valueValue["currentValue"];
                                if (currentValueValue != null)
                                {
                                    double currentValueInstance = (double)currentValueValue;
                                    usageMetricInstance.CurrentValue = currentValueInstance;
                                }

                                JToken limitValue = valueValue["limit"];
                                if (limitValue != null)
                                {
                                    double limitInstance = (double)limitValue;
                                    usageMetricInstance.Limit = limitInstance;
                                }

                                JToken unitValue = valueValue["unit"];
                                if (unitValue != null)
                                {
                                    string unitInstance = (string)unitValue;
                                    usageMetricInstance.Unit = unitInstance;
                                }

                                JToken nextResetTimeValue = valueValue["nextResetTime"];
                                if (nextResetTimeValue != null)
                                {
                                    string nextResetTimeInstance = (string)nextResetTimeValue;
                                    usageMetricInstance.NextResetTime = nextResetTimeInstance;
                                }

                                JToken quotaPeriodValue = valueValue["quotaPeriod"];
                                if (quotaPeriodValue != null)
                                {
                                    TimeSpan quotaPeriodInstance = TypeConversion.From8601TimeSpan((string)quotaPeriodValue);
                                    usageMetricInstance.QuotaPeriod = quotaPeriodInstance;
                                }
                            }
                        }

                        JArray propertiesArray = (JArray)responseDoc["properties"];
                        if (propertiesArray != null)
                        {
                            foreach (JToken propertiesValue in propertiesArray)
                            {
                                UsageMetric usageMetricInstance2 = new UsageMetric();
                                usageMetricCollectionInstance.Properties.Add(usageMetricInstance2);

                                JToken nameValue2 = propertiesValue["name"];
                                if (nameValue2 != null)
                                {
                                    string nameInstance2 = (string)nameValue2;
                                    usageMetricInstance2.Name = nameInstance2;
                                }

                                JToken displayNameValue2 = propertiesValue["displayName"];
                                if (displayNameValue2 != null)
                                {
                                    string displayNameInstance2 = (string)displayNameValue2;
                                    usageMetricInstance2.DisplayName = displayNameInstance2;
                                }

                                JToken currentValueValue2 = propertiesValue["currentValue"];
                                if (currentValueValue2 != null)
                                {
                                    double currentValueInstance2 = (double)currentValueValue2;
                                    usageMetricInstance2.CurrentValue = currentValueInstance2;
                                }

                                JToken limitValue2 = propertiesValue["limit"];
                                if (limitValue2 != null)
                                {
                                    double limitInstance2 = (double)limitValue2;
                                    usageMetricInstance2.Limit = limitInstance2;
                                }

                                JToken unitValue2 = propertiesValue["unit"];
                                if (unitValue2 != null)
                                {
                                    string unitInstance2 = (string)unitValue2;
                                    usageMetricInstance2.Unit = unitInstance2;
                                }

                                JToken nextResetTimeValue2 = propertiesValue["nextResetTime"];
                                if (nextResetTimeValue2 != null)
                                {
                                    string nextResetTimeInstance2 = (string)nextResetTimeValue2;
                                    usageMetricInstance2.NextResetTime = nextResetTimeInstance2;
                                }

                                JToken quotaPeriodValue2 = propertiesValue["quotaPeriod"];
                                if (quotaPeriodValue2 != null)
                                {
                                    TimeSpan quotaPeriodInstance2 = TypeConversion.From8601TimeSpan((string)quotaPeriodValue2);
                                    usageMetricInstance2.QuotaPeriod = quotaPeriodInstance2;
                                }
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
