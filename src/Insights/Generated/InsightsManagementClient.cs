// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Insights;
using Microsoft.Azure.Management.Insights.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Insights.Models
{
    /// <summary>
    /// Autoscale profile.
    /// </summary>
    public partial class AutoscaleProfile
    {
        private ScaleCapacity _capacity;
        
        /// <summary>
        /// The number of instances that can be used in the scaling action.
        /// </summary>
        public ScaleCapacity Capacity
        {
            get { return this._capacity; }
            set { this._capacity = value; }
        }
        
        private TimeWindow _fixedDate;
        
        /// <summary>
        /// A specific date for the scaling action. This element is not used if
        /// the Recurrence element is used.
        /// </summary>
        public TimeWindow FixedDate
        {
            get { return this._fixedDate; }
            set { this._fixedDate = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the profile.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private Recurrence _recurrence;
        
        /// <summary>
        /// The frequency and schedule for the scaling action. This element is
        /// not used if the FixedDate element is used.
        /// </summary>
        public Recurrence Recurrence
        {
            get { return this._recurrence; }
            set { this._recurrence = value; }
        }
        
        private IList<ScaleRule> _rules;
        
        /// <summary>
        /// A collection of rules that provide the triggers and parameters for
        /// the scaling action.
        /// </summary>
        public IList<ScaleRule> Rules
        {
            get { return this._rules; }
            set { this._rules = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleProfile class.
        /// </summary>
        public AutoscaleProfile()
        {
            this._rules = new List<ScaleRule>();
        }
    }
    
    /// <summary>
    /// Autoscale setting.
    /// </summary>
    public partial class AutoscaleSetting
    {
        private bool _enabled;
        
        public bool Enabled
        {
            get { return this._enabled; }
            set { this._enabled = value; }
        }
        
        private string _name;
        
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private IList<AutoscaleProfile> _profiles;
        
        public IList<AutoscaleProfile> Profiles
        {
            get { return this._profiles; }
            set { this._profiles = value; }
        }
        
        private string _targetResourceUri;
        
        public string TargetResourceUri
        {
            get { return this._targetResourceUri; }
            set { this._targetResourceUri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleSetting class.
        /// </summary>
        public AutoscaleSetting()
        {
            this._profiles = new List<AutoscaleProfile>();
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create or Update autoscale setting operation.
    /// </summary>
    public partial class AutoscaleSettingCreateOrUpdateParameters
    {
        private string _location;
        
        /// <summary>
        /// The location of the setting.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private AutoscaleSetting _properties;
        
        /// <summary>
        /// The setting to create or update.
        /// </summary>
        public AutoscaleSetting Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// AutoscaleSettingCreateOrUpdateParameters class.
        /// </summary>
        public AutoscaleSettingCreateOrUpdateParameters()
        {
            this._tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class AutoscaleSettingGetResponse : OperationResponse
    {
        private string _id;
        
        /// <summary>
        /// The resource id of the setting.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// The location of the setting.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the setting.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private AutoscaleSetting _properties;
        
        /// <summary>
        /// The retrieved setting.
        /// </summary>
        public AutoscaleSetting Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleSettingGetResponse class.
        /// </summary>
        public AutoscaleSettingGetResponse()
        {
            this._tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// The List Autoscale settings operation response.
    /// </summary>
    public partial class AutoscaleSettingListResponse : OperationResponse
    {
        private AutoscaleSettingResourceCollection _autoscaleSettingResourceCollection;
        
        /// <summary>
        /// The retrieved autoscale settings.
        /// </summary>
        public AutoscaleSettingResourceCollection AutoscaleSettingResourceCollection
        {
            get { return this._autoscaleSettingResourceCollection; }
            set { this._autoscaleSettingResourceCollection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleSettingListResponse
        /// class.
        /// </summary>
        public AutoscaleSettingListResponse()
        {
        }
    }
    
    /// <summary>
    /// Autoscale setting resource.
    /// </summary>
    public partial class AutoscaleSettingResource
    {
        private string _id;
        
        /// <summary>
        /// The resource id of the autoscale setting.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// The location of the autoscale setting.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the autoscale setting.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private AutoscaleSetting _properties;
        
        /// <summary>
        /// The retrieved autoscale setting.
        /// </summary>
        public AutoscaleSetting Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleSettingResource class.
        /// </summary>
        public AutoscaleSettingResource()
        {
            this._tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Represents collection of autoscale settings.
    /// </summary>
    public partial class AutoscaleSettingResourceCollection
    {
        private IList<AutoscaleSettingResource> _value;
        
        /// <summary>
        /// The values for the autoscale settings.
        /// </summary>
        public IList<AutoscaleSettingResource> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// AutoscaleSettingResourceCollection class.
        /// </summary>
        public AutoscaleSettingResourceCollection()
        {
            this._value = new List<AutoscaleSettingResource>();
        }
    }
    
    public enum ComparisonOperationType
    {
        /// <summary>
        /// Equals comparison.
        /// </summary>
        Equals = 0,
        
        /// <summary>
        /// NotEquals comparison.
        /// </summary>
        NotEquals = 1,
        
        /// <summary>
        /// GreaterThan comparison.
        /// </summary>
        GreaterThan = 2,
        
        /// <summary>
        /// GreaterThanOrEqual comparison.
        /// </summary>
        GreaterThanOrEqual = 3,
        
        /// <summary>
        /// LessThan comparison.
        /// </summary>
        LessThan = 4,
        
        /// <summary>
        /// LessThanOrEqual comparison.
        /// </summary>
        LessThanOrEqual = 5,
    }
    
    public enum ConditionOperator
    {
        GreaterThan = 0,
        
        GreaterThanOrEqual = 1,
        
        LessThan = 2,
        
        LessThanOrEqual = 3,
    }
    
    /// <summary>
    /// An alert incident indicates the activation status of an alert rule.
    /// </summary>
    public partial class Incident
    {
        private DateTime _activatedTime;
        
        /// <summary>
        /// The time at which the incident got activated.
        /// </summary>
        public DateTime ActivatedTime
        {
            get { return this._activatedTime; }
            set { this._activatedTime = value; }
        }
        
        private bool _isActive;
        
        /// <summary>
        /// A boolean to indicate whether the incident is active or resolved.
        /// </summary>
        public bool IsActive
        {
            get { return this._isActive; }
            set { this._isActive = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Incident name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private System.DateTime? _resolvedTime;
        
        /// <summary>
        /// The time at which the incident got resolved. If null, it means the
        /// incident is still active.
        /// </summary>
        public System.DateTime? ResolvedTime
        {
            get { return this._resolvedTime; }
            set { this._resolvedTime = value; }
        }
        
        private string _ruleName;
        
        /// <summary>
        /// Rule name that is associated with the incident.
        /// </summary>
        public string RuleName
        {
            get { return this._ruleName; }
            set { this._ruleName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Incident class.
        /// </summary>
        public Incident()
        {
        }
    }
    
    /// <summary>
    /// The Get Incident operation response.
    /// </summary>
    public partial class IncidentGetResponse : OperationResponse
    {
        private Incident _incident;
        
        /// <summary>
        /// The retrieved incident.
        /// </summary>
        public Incident Incident
        {
            get { return this._incident; }
            set { this._incident = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the IncidentGetResponse class.
        /// </summary>
        public IncidentGetResponse()
        {
        }
    }
    
    /// <summary>
    /// The List incidents operation response.
    /// </summary>
    public partial class IncidentListResponse : OperationResponse, IEnumerable<Incident>
    {
        private IList<Incident> _value;
        
        /// <summary>
        /// Incident collection.
        /// </summary>
        public IList<Incident> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the IncidentListResponse class.
        /// </summary>
        public IncidentListResponse()
        {
            this._value = new List<Incident>();
        }
        
        /// <summary>
        /// Gets the sequence of Value.
        /// </summary>
        public IEnumerator<Incident> GetEnumerator()
        {
            return this.Value.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Value.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// A location threshold rule condition.
    /// </summary>
    public partial class LocationThresholdRuleCondition : RuleCondition
    {
        private RuleDataSource _dataSource;
        
        /// <summary>
        /// Condition data source.
        /// </summary>
        public RuleDataSource DataSource
        {
            get { return this._dataSource; }
            set { this._dataSource = value; }
        }
        
        private int _failedLocationCount;
        
        /// <summary>
        /// Failed location count.
        /// </summary>
        public int FailedLocationCount
        {
            get { return this._failedLocationCount; }
            set { this._failedLocationCount = value; }
        }
        
        private TimeSpan _windowSize;
        
        /// <summary>
        /// The time period over which the alert rule is evaluated. Condition
        /// window size depends on the metric.
        /// </summary>
        public TimeSpan WindowSize
        {
            get { return this._windowSize; }
            set { this._windowSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LocationThresholdRuleCondition
        /// class.
        /// </summary>
        public LocationThresholdRuleCondition()
        {
        }
    }
    
    public enum MetricStatisticType
    {
        /// <summary>
        /// Average value.
        /// </summary>
        Average = 0,
        
        /// <summary>
        /// Minimum value.
        /// </summary>
        Min = 1,
        
        /// <summary>
        /// Maximum value.
        /// </summary>
        Max = 2,
        
        /// <summary>
        /// Total value.
        /// </summary>
        Sum = 3,
    }
    
    /// <summary>
    /// A rule that provides the triggers and parameters for the scaling action.
    /// </summary>
    public partial class MetricTrigger
    {
        private string _metricName;
        
        /// <summary>
        /// The name of the metric.
        /// </summary>
        public string MetricName
        {
            get { return this._metricName; }
            set { this._metricName = value; }
        }
        
        private string _metricNamespace;
        
        /// <summary>
        /// The namespace of the metric.
        /// </summary>
        public string MetricNamespace
        {
            get { return this._metricNamespace; }
            set { this._metricNamespace = value; }
        }
        
        private string _metricResourceUri;
        
        /// <summary>
        /// The metric resource uri.
        /// </summary>
        public string MetricResourceUri
        {
            get { return this._metricResourceUri; }
            set { this._metricResourceUri = value; }
        }
        
        private ComparisonOperationType _operator;
        
        /// <summary>
        /// The operator that is used to evaluate the metric.
        /// </summary>
        public ComparisonOperationType Operator
        {
            get { return this._operator; }
            set { this._operator = value; }
        }
        
        private MetricStatisticType _statistic;
        
        /// <summary>
        /// How the metrics from multiple instances are combined.
        /// </summary>
        public MetricStatisticType Statistic
        {
            get { return this._statistic; }
            set { this._statistic = value; }
        }
        
        private double _threshold;
        
        /// <summary>
        /// The percentage of usage that triggers the scaling operation.
        /// </summary>
        public double Threshold
        {
            get { return this._threshold; }
            set { this._threshold = value; }
        }
        
        private TimeAggregationType _timeAggregation;
        
        /// <summary>
        /// How the data that is collected should be combined over time.
        /// </summary>
        public TimeAggregationType TimeAggregation
        {
            get { return this._timeAggregation; }
            set { this._timeAggregation = value; }
        }
        
        private TimeSpan _timeGrain;
        
        /// <summary>
        /// The frequency of data collection.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        private TimeSpan _timeWindow;
        
        /// <summary>
        /// The range of time in which instance data is collected.
        /// </summary>
        public TimeSpan TimeWindow
        {
            get { return this._timeWindow; }
            set { this._timeWindow = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricTrigger class.
        /// </summary>
        public MetricTrigger()
        {
        }
    }
    
    /// <summary>
    /// This describes a recurrence pattern to be used when scheduling
    /// activities.
    /// </summary>
    public partial class Recurrence
    {
        private RecurrenceFrequency _frequency;
        
        public RecurrenceFrequency Frequency
        {
            get { return this._frequency; }
            set { this._frequency = value; }
        }
        
        private RecurrentSchedule _schedule;
        
        public RecurrentSchedule Schedule
        {
            get { return this._schedule; }
            set { this._schedule = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Recurrence class.
        /// </summary>
        public Recurrence()
        {
        }
    }
    
    public enum RecurrenceFrequency
    {
        /// <summary>
        /// No recurrence.
        /// </summary>
        None = 0,
        
        /// <summary>
        /// A recurrence value measured in seconds.
        /// </summary>
        Second = 1,
        
        /// <summary>
        /// A recurrence value measured in minutes.
        /// </summary>
        Minute = 2,
        
        /// <summary>
        /// A recurrence value measured in hours.
        /// </summary>
        Hour = 3,
        
        /// <summary>
        /// A recurrence value measured in days.
        /// </summary>
        Day = 4,
        
        /// <summary>
        /// A recurrence value measured in weeks.
        /// </summary>
        Week = 5,
        
        /// <summary>
        /// A recurrence value measured in months.
        /// </summary>
        Month = 6,
        
        /// <summary>
        /// A recurrence value measured in years.
        /// </summary>
        Year = 7,
    }
    
    public partial class RecurrentSchedule
    {
        private IList<string> _days;
        
        public IList<string> Days
        {
            get { return this._days; }
            set { this._days = value; }
        }
        
        private IList<int> _hours;
        
        public IList<int> Hours
        {
            get { return this._hours; }
            set { this._hours = value; }
        }
        
        private IList<int> _minutes;
        
        public IList<int> Minutes
        {
            get { return this._minutes; }
            set { this._minutes = value; }
        }
        
        private string _timeZone;
        
        public string TimeZone
        {
            get { return this._timeZone; }
            set { this._timeZone = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RecurrentSchedule class.
        /// </summary>
        public RecurrentSchedule()
        {
            this._days = new List<string>();
            this._hours = new List<int>();
            this._minutes = new List<int>();
        }
    }
    
    /// <summary>
    /// An alert rule.
    /// </summary>
    public partial class Rule
    {
        private RuleAction _action;
        
        /// <summary>
        /// Rule action.
        /// </summary>
        public RuleAction Action
        {
            get { return this._action; }
            set { this._action = value; }
        }
        
        private RuleCondition _condition;
        
        /// <summary>
        /// Rule condition.
        /// </summary>
        public RuleCondition Condition
        {
            get { return this._condition; }
            set { this._condition = value; }
        }
        
        private string _description;
        
        /// <summary>
        /// Rule description.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private bool _isEnabled;
        
        /// <summary>
        /// A flag that determines whether the rule is enabled or disabled.
        /// </summary>
        public bool IsEnabled
        {
            get { return this._isEnabled; }
            set { this._isEnabled = value; }
        }
        
        private DateTime _lastUpdatedTime;
        
        /// <summary>
        /// Rule last updated time.
        /// </summary>
        public DateTime LastUpdatedTime
        {
            get { return this._lastUpdatedTime; }
            set { this._lastUpdatedTime = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Rule name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Rule class.
        /// </summary>
        public Rule()
        {
        }
    }
    
    /// <summary>
    /// A rule action.
    /// </summary>
    public abstract partial class RuleAction
    {
        /// <summary>
        /// Initializes a new instance of the RuleAction class.
        /// </summary>
        public RuleAction()
        {
        }
    }
    
    /// <summary>
    /// A rule condition.
    /// </summary>
    public abstract partial class RuleCondition
    {
        /// <summary>
        /// Initializes a new instance of the RuleCondition class.
        /// </summary>
        public RuleCondition()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create or Update Rule operation.
    /// </summary>
    public partial class RuleCreateOrUpdateParameters
    {
        private string _location;
        
        /// <summary>
        /// The location of the rule.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private Rule _properties;
        
        /// <summary>
        /// The rule to create or update.
        /// </summary>
        public Rule Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleCreateOrUpdateParameters
        /// class.
        /// </summary>
        public RuleCreateOrUpdateParameters()
        {
            this._tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// A rule data source.
    /// </summary>
    public abstract partial class RuleDataSource
    {
        /// <summary>
        /// Initializes a new instance of the RuleDataSource class.
        /// </summary>
        public RuleDataSource()
        {
        }
    }
    
    /// <summary>
    /// Specifies the action to send email when the rule condition is evaluated.
    /// </summary>
    public partial class RuleEmailAction : RuleAction
    {
        private IList<string> _customEmails;
        
        /// <summary>
        /// The email address of an adminstrative user.
        /// </summary>
        public IList<string> CustomEmails
        {
            get { return this._customEmails; }
            set { this._customEmails = value; }
        }
        
        private bool _sendToServiceOwners;
        
        /// <summary>
        /// This indicates if email is sent to sevice adminstrator and
        /// co-administrators.
        /// </summary>
        public bool SendToServiceOwners
        {
            get { return this._sendToServiceOwners; }
            set { this._sendToServiceOwners = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleEmailAction class.
        /// </summary>
        public RuleEmailAction()
        {
            this._customEmails = new List<string>();
        }
    }
    
    /// <summary>
    /// The Get Rule operation response.
    /// </summary>
    public partial class RuleGetResponse : OperationResponse
    {
        private string _id;
        
        /// <summary>
        /// The resource id of the rule.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// The location of the rule.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the rule.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private Rule _properties;
        
        /// <summary>
        /// The retrieved rule.
        /// </summary>
        public Rule Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleGetResponse class.
        /// </summary>
        public RuleGetResponse()
        {
            this._tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// The List Rules operation response.
    /// </summary>
    public partial class RuleListResponse : OperationResponse
    {
        private RuleResourceCollection _ruleResourceCollection;
        
        /// <summary>
        /// Alert rules collection.
        /// </summary>
        public RuleResourceCollection RuleResourceCollection
        {
            get { return this._ruleResourceCollection; }
            set { this._ruleResourceCollection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleListResponse class.
        /// </summary>
        public RuleListResponse()
        {
        }
    }
    
    /// <summary>
    /// A rule metric data source.
    /// </summary>
    public partial class RuleMetricDataSource : RuleDataSource
    {
        private string _metricName;
        
        /// <summary>
        /// Metric name.
        /// </summary>
        public string MetricName
        {
            get { return this._metricName; }
            set { this._metricName = value; }
        }
        
        private string _metricNamespace;
        
        /// <summary>
        /// Metric namespace. When creating a rule on endpoint monitoring
        /// metrics, WindowsAzure.Availability namespace is required.
        /// </summary>
        public string MetricNamespace
        {
            get { return this._metricNamespace; }
            set { this._metricNamespace = value; }
        }
        
        private string _resourceUri;
        
        /// <summary>
        /// Metric resource uri.
        /// </summary>
        public string ResourceUri
        {
            get { return this._resourceUri; }
            set { this._resourceUri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleMetricDataSource class.
        /// </summary>
        public RuleMetricDataSource()
        {
        }
    }
    
    /// <summary>
    /// An alert rule resource.
    /// </summary>
    public partial class RuleResource
    {
        private string _id;
        
        /// <summary>
        /// The resource id of the rule.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// The location of the rule.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the rule.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private Rule _properties;
        
        /// <summary>
        /// The retrieved rule.
        /// </summary>
        public Rule Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleResource class.
        /// </summary>
        public RuleResource()
        {
            this._tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Represents collection of alert rule resources.
    /// </summary>
    public partial class RuleResourceCollection
    {
        private IList<RuleResource> _value;
        
        /// <summary>
        /// The values for the alert rule resources.
        /// </summary>
        public IList<RuleResource> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleResourceCollection class.
        /// </summary>
        public RuleResourceCollection()
        {
            this._value = new List<RuleResource>();
        }
    }
    
    /// <summary>
    /// The action for scaling.
    /// </summary>
    public partial class ScaleAction
    {
        private TimeSpan _cooldown;
        
        /// <summary>
        /// The cooldown interval for scaling action.
        /// </summary>
        public TimeSpan Cooldown
        {
            get { return this._cooldown; }
            set { this._cooldown = value; }
        }
        
        private ScaleDirection _direction;
        
        /// <summary>
        /// The direction of scaling.
        /// </summary>
        public ScaleDirection Direction
        {
            get { return this._direction; }
            set { this._direction = value; }
        }
        
        private ScaleType _type;
        
        /// <summary>
        /// The type of scaling.
        /// </summary>
        public ScaleType Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        private string _value;
        
        /// <summary>
        /// The rate of scaling.
        /// </summary>
        public string Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ScaleAction class.
        /// </summary>
        public ScaleAction()
        {
        }
    }
    
    /// <summary>
    /// The number of instances that can be used in the scaling action.
    /// </summary>
    public partial class ScaleCapacity
    {
        private string _default;
        
        /// <summary>
        /// The default number of instances that are available for the scaling
        /// action.
        /// </summary>
        public string Default
        {
            get { return this._default; }
            set { this._default = value; }
        }
        
        private string _maximum;
        
        /// <summary>
        /// The maximum number of instances that are available for the scaling
        /// action.
        /// </summary>
        public string Maximum
        {
            get { return this._maximum; }
            set { this._maximum = value; }
        }
        
        private string _minimum;
        
        /// <summary>
        /// The minimum number of instances that are available for the scaling
        /// action.
        /// </summary>
        public string Minimum
        {
            get { return this._minimum; }
            set { this._minimum = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ScaleCapacity class.
        /// </summary>
        public ScaleCapacity()
        {
        }
    }
    
    public enum ScaleDirection
    {
        /// <summary>
        /// Do nothing.
        /// </summary>
        None = 0,
        
        /// <summary>
        /// Increase capacity.
        /// </summary>
        Increase = 1,
        
        /// <summary>
        /// Decrease capacity.
        /// </summary>
        Decrease = 2,
    }
    
    /// <summary>
    /// A rule that provide the triggers and parameters for the scaling action.
    /// </summary>
    public partial class ScaleRule
    {
        private MetricTrigger _metricTrigger;
        
        /// <summary>
        /// The metrics that are used to determine when a scaling action occurs.
        /// </summary>
        public MetricTrigger MetricTrigger
        {
            get { return this._metricTrigger; }
            set { this._metricTrigger = value; }
        }
        
        private ScaleAction _scaleAction;
        
        /// <summary>
        /// The parameters for the scaling action.
        /// </summary>
        public ScaleAction ScaleAction
        {
            get { return this._scaleAction; }
            set { this._scaleAction = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ScaleRule class.
        /// </summary>
        public ScaleRule()
        {
        }
    }
    
    public enum ScaleType
    {
        /// <summary>
        /// The change size.
        /// </summary>
        ChangeSize = 0,
        
        /// <summary>
        /// The change count.
        /// </summary>
        ChangeCount = 1,
        
        /// <summary>
        /// The percent change count.
        /// </summary>
        PercentChangeCount = 2,
        
        /// <summary>
        /// The exact count.
        /// </summary>
        ExactCount = 3,
    }
    
    /// <summary>
    /// A threshold rule condition.
    /// </summary>
    public partial class ThresholdRuleCondition : RuleCondition
    {
        private RuleDataSource _dataSource;
        
        /// <summary>
        /// Condition data source.
        /// </summary>
        public RuleDataSource DataSource
        {
            get { return this._dataSource; }
            set { this._dataSource = value; }
        }
        
        private ConditionOperator _operator;
        
        /// <summary>
        /// Condition operator.
        /// </summary>
        public ConditionOperator Operator
        {
            get { return this._operator; }
            set { this._operator = value; }
        }
        
        private double _threshold;
        
        /// <summary>
        /// Condition threshold.
        /// </summary>
        public double Threshold
        {
            get { return this._threshold; }
            set { this._threshold = value; }
        }
        
        private TimeSpan _windowSize;
        
        /// <summary>
        /// The time period over which the alert rule is evaluated. Condition
        /// window size depends on the metric.
        /// </summary>
        public TimeSpan WindowSize
        {
            get { return this._windowSize; }
            set { this._windowSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ThresholdRuleCondition class.
        /// </summary>
        public ThresholdRuleCondition()
        {
        }
    }
    
    public enum TimeAggregationType
    {
        /// <summary>
        /// Average aggregation.
        /// </summary>
        Average = 0,
        
        /// <summary>
        /// Minimum aggregation.
        /// </summary>
        Minimum = 1,
        
        /// <summary>
        /// Maximum aggregation.
        /// </summary>
        Maximum = 2,
        
        /// <summary>
        /// Last aggregation.
        /// </summary>
        Last = 3,
        
        /// <summary>
        /// Total aggregation.
        /// </summary>
        Total = 4,
        
        /// <summary>
        /// Count aggregation.
        /// </summary>
        Count = 5,
    }
    
    /// <summary>
    /// The action for scaling.
    /// </summary>
    public partial class TimeWindow
    {
        private DateTime _end;
        
        /// <summary>
        /// The end of the time window.
        /// </summary>
        public DateTime End
        {
            get { return this._end; }
            set { this._end = value; }
        }
        
        private DateTime _start;
        
        /// <summary>
        /// The start of the time window.
        /// </summary>
        public DateTime Start
        {
            get { return this._start; }
            set { this._start = value; }
        }
        
        private string _timeZone;
        
        /// <summary>
        /// The time zone information.
        /// </summary>
        public string TimeZone
        {
            get { return this._timeZone; }
            set { this._timeZone = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TimeWindow class.
        /// </summary>
        public TimeWindow()
        {
        }
    }
}

namespace Microsoft.Azure.Management.Insights
{
    public partial interface IInsightsManagementClient
    {
        /// <summary>
        /// Optional base uri parameter.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the alert rules and incidents.
        /// </summary>
        IAlertOperations AlertOperations
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the autoscale.
        /// </summary>
        IAutoscaleOperations AutoscaleOperations
        {
            get; 
        }
    }
    
    public static partial class InsightsManagementClientExtensions
    {
    }
    
    public partial class InsightsManagementClient : ServiceClient<InsightsManagementClient>, IInsightsManagementClient
    {
        private Uri _baseUri;
        
        /// <summary>
        /// Optional base uri parameter.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private IAlertOperations _alertOperations;
        
        /// <summary>
        /// Operations for managing the alert rules and incidents.
        /// </summary>
        public virtual IAlertOperations AlertOperations
        {
            get { return this._alertOperations; }
        }
        
        private IAutoscaleOperations _autoscaleOperations;
        
        /// <summary>
        /// Operations for managing the autoscale.
        /// </summary>
        public virtual IAutoscaleOperations AutoscaleOperations
        {
            get { return this._autoscaleOperations; }
        }
        
        /// <summary>
        /// Initializes a new instance of the InsightsManagementClient class.
        /// </summary>
        private InsightsManagementClient()
            : base()
        {
            this._alertOperations = new AlertOperations(this);
            this._autoscaleOperations = new AutoscaleOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the InsightsManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        /// <param name='baseUri'>
        /// Optional base uri parameter.
        /// </param>
        public InsightsManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the InsightsManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        public InsightsManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com");
            
            this.Credentials.InitializeServiceClient(this);
        }
    }
    
    /// <summary>
    /// Operations for managing the alert rules and incidents.
    /// </summary>
    public partial interface IAlertOperations
    {
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// The rule to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> CreateOrUpdateRuleAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// The name of the incident to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        Task<IncidentGetResponse> GetIncidentAsync(string resourceGroupName, string ruleName, string incidentName, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        Task<RuleGetResponse> GetRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        Task<IncidentListResponse> ListIncidentsForRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken);
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// The resource uri of the target of the alert rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        Task<RuleListResponse> ListRulesAsync(string resourceGroupName, string targetResourceUri, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// The rule to update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UpdateRuleAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the alert rules and incidents.
    /// </summary>
    public static partial class AlertOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// The rule to create or update.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateOrUpdateRule(this IAlertOperations operations, string resourceGroupName, RuleCreateOrUpdateParameters parameters)
        {
            try
            {
                return operations.CreateOrUpdateRuleAsync(resourceGroupName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// The rule to create or update.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateOrUpdateRuleAsync(this IAlertOperations operations, string resourceGroupName, RuleCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateRuleAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse DeleteRule(this IAlertOperations operations, string resourceGroupName, string ruleName)
        {
            try
            {
                return operations.DeleteRuleAsync(resourceGroupName, ruleName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteRuleAsync(this IAlertOperations operations, string resourceGroupName, string ruleName)
        {
            return operations.DeleteRuleAsync(resourceGroupName, ruleName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// The name of the incident to retrieve.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        public static IncidentGetResponse GetIncident(this IAlertOperations operations, string resourceGroupName, string ruleName, string incidentName)
        {
            try
            {
                return operations.GetIncidentAsync(resourceGroupName, ruleName, incidentName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// The name of the incident to retrieve.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        public static Task<IncidentGetResponse> GetIncidentAsync(this IAlertOperations operations, string resourceGroupName, string ruleName, string incidentName)
        {
            return operations.GetIncidentAsync(resourceGroupName, ruleName, incidentName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule to retrieve.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        public static RuleGetResponse GetRule(this IAlertOperations operations, string resourceGroupName, string ruleName)
        {
            try
            {
                return operations.GetRuleAsync(resourceGroupName, ruleName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule to retrieve.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        public static Task<RuleGetResponse> GetRuleAsync(this IAlertOperations operations, string resourceGroupName, string ruleName)
        {
            return operations.GetRuleAsync(resourceGroupName, ruleName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        public static IncidentListResponse ListIncidentsForRule(this IAlertOperations operations, string resourceGroupName, string ruleName)
        {
            try
            {
                return operations.ListIncidentsForRuleAsync(resourceGroupName, ruleName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        public static Task<IncidentListResponse> ListIncidentsForRuleAsync(this IAlertOperations operations, string resourceGroupName, string ruleName)
        {
            return operations.ListIncidentsForRuleAsync(resourceGroupName, ruleName, CancellationToken.None);
        }
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// The resource uri of the target of the alert rule.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        public static RuleListResponse ListRules(this IAlertOperations operations, string resourceGroupName, string targetResourceUri)
        {
            try
            {
                return operations.ListRulesAsync(resourceGroupName, targetResourceUri).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// The resource uri of the target of the alert rule.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        public static Task<RuleListResponse> ListRulesAsync(this IAlertOperations operations, string resourceGroupName, string targetResourceUri)
        {
            return operations.ListRulesAsync(resourceGroupName, targetResourceUri, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// The rule to update.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UpdateRule(this IAlertOperations operations, string resourceGroupName, RuleCreateOrUpdateParameters parameters)
        {
            try
            {
                return operations.UpdateRuleAsync(resourceGroupName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAlertOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// The rule to update.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateRuleAsync(this IAlertOperations operations, string resourceGroupName, RuleCreateOrUpdateParameters parameters)
        {
            return operations.UpdateRuleAsync(resourceGroupName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the alert rules and incidents.
    /// </summary>
    internal partial class AlertOperations : IServiceOperations<InsightsManagementClient>, IAlertOperations
    {
        /// <summary>
        /// Initializes a new instance of the AlertOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AlertOperations(InsightsManagementClient client)
        {
            this._client = client;
        }
        
        private InsightsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Insights.InsightsManagementClient.
        /// </summary>
        public InsightsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// The rule to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateOrUpdateRuleAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/resourcegroups/" + resourceGroupName + "/providers/microsoft.insights/alertrules/" + parameters.Properties.Name + "?";
            url = url + "api-version=2014-04-01";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject ruleCreateOrUpdateParametersValue = new JObject();
                requestDoc = ruleCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    ruleCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                ruleCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    ruleCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    propertiesValue["isEnabled"] = parameters.Properties.IsEnabled;
                    
                    if (parameters.Properties.Condition != null)
                    {
                        JObject conditionValue = new JObject();
                        propertiesValue["condition"] = conditionValue;
                        conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                        if (parameters.Properties.Condition is ThresholdRuleCondition)
                        {
                            ThresholdRuleCondition derived = (ThresholdRuleCondition)parameters.Properties.Condition;
                            
                            if (derived.DataSource != null)
                            {
                                JObject dataSourceValue = new JObject();
                                conditionValue["dataSource"] = dataSourceValue;
                                dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                if (derived.DataSource is RuleMetricDataSource)
                                {
                                    RuleMetricDataSource derived2 = (RuleMetricDataSource)derived.DataSource;
                                    
                                    if (derived2.ResourceUri != null)
                                    {
                                        dataSourceValue["resourceUri"] = derived2.ResourceUri;
                                    }
                                    
                                    if (derived2.MetricNamespace != null)
                                    {
                                        dataSourceValue["metricNamespace"] = derived2.MetricNamespace;
                                    }
                                    
                                    if (derived2.MetricName != null)
                                    {
                                        dataSourceValue["metricName"] = derived2.MetricName;
                                    }
                                }
                            }
                            
                            conditionValue["operator"] = derived.Operator.ToString();
                            
                            conditionValue["threshold"] = derived.Threshold;
                            
                            conditionValue["windowSize"] = TypeConversion.To8601String(derived.WindowSize);
                        }
                        if (parameters.Properties.Condition is LocationThresholdRuleCondition)
                        {
                            LocationThresholdRuleCondition derived3 = (LocationThresholdRuleCondition)parameters.Properties.Condition;
                            
                            if (derived3.DataSource != null)
                            {
                                JObject dataSourceValue2 = new JObject();
                                conditionValue["dataSource"] = dataSourceValue2;
                                dataSourceValue2["odata.type"] = derived3.DataSource.GetType().FullName;
                                if (derived3.DataSource is RuleMetricDataSource)
                                {
                                    RuleMetricDataSource derived4 = (RuleMetricDataSource)derived3.DataSource;
                                    
                                    if (derived4.ResourceUri != null)
                                    {
                                        dataSourceValue2["resourceUri"] = derived4.ResourceUri;
                                    }
                                    
                                    if (derived4.MetricNamespace != null)
                                    {
                                        dataSourceValue2["metricNamespace"] = derived4.MetricNamespace;
                                    }
                                    
                                    if (derived4.MetricName != null)
                                    {
                                        dataSourceValue2["metricName"] = derived4.MetricName;
                                    }
                                }
                            }
                            
                            conditionValue["windowSize"] = TypeConversion.To8601String(derived3.WindowSize);
                            
                            conditionValue["failedLocationCount"] = derived3.FailedLocationCount;
                        }
                    }
                    
                    if (parameters.Properties.Action != null)
                    {
                        JObject actionValue = new JObject();
                        propertiesValue["action"] = actionValue;
                        actionValue["odata.type"] = parameters.Properties.Action.GetType().FullName;
                        if (parameters.Properties.Action is RuleEmailAction)
                        {
                            RuleEmailAction derived5 = (RuleEmailAction)parameters.Properties.Action;
                            
                            actionValue["sendToServiceOwners"] = derived5.SendToServiceOwners;
                            
                            if (derived5.CustomEmails != null)
                            {
                                JArray customEmailsArray = new JArray();
                                foreach (string customEmailsItem in derived5.CustomEmails)
                                {
                                    customEmailsArray.Add(customEmailsItem);
                                }
                                actionValue["customEmails"] = customEmailsArray;
                            }
                        }
                    }
                    
                    propertiesValue["lastUpdatedTime"] = parameters.Properties.LastUpdatedTime;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                Tracing.Enter(invocationId, this, "DeleteRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/resourcegroups/" + resourceGroupName + "/providers/microsoft.insights/alertrules/" + ruleName + "?";
            url = url + "api-version=2014-04-01";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// The name of the incident to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        public async Task<IncidentGetResponse> GetIncidentAsync(string resourceGroupName, string ruleName, string incidentName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            if (incidentName == null)
            {
                throw new ArgumentNullException("incidentName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                tracingParameters.Add("incidentName", incidentName);
                Tracing.Enter(invocationId, this, "GetIncidentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/resourcegroups/" + resourceGroupName + "/providers/microsoft.insights/alertrules/" + ruleName + "/incidents/" + incidentName + "?";
            url = url + "api-version=2014-04-01";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IncidentGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new IncidentGetResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        Incident incidentInstance = new Incident();
                        result.Incident = incidentInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null)
                        {
                            string nameInstance = (string)nameValue;
                            incidentInstance.Name = nameInstance;
                        }
                        
                        JToken ruleNameValue = responseDoc["ruleName"];
                        if (ruleNameValue != null)
                        {
                            string ruleNameInstance = (string)ruleNameValue;
                            incidentInstance.RuleName = ruleNameInstance;
                        }
                        
                        JToken isActiveValue = responseDoc["isActive"];
                        if (isActiveValue != null)
                        {
                            bool isActiveInstance = (bool)isActiveValue;
                            incidentInstance.IsActive = isActiveInstance;
                        }
                        
                        JToken activatedTimeValue = responseDoc["activatedTime"];
                        if (activatedTimeValue != null)
                        {
                            DateTime activatedTimeInstance = (DateTime)activatedTimeValue;
                            incidentInstance.ActivatedTime = activatedTimeInstance;
                        }
                        
                        JToken resolvedTimeValue = responseDoc["resolvedTime"];
                        if (resolvedTimeValue != null)
                        {
                            DateTime resolvedTimeInstance = (DateTime)resolvedTimeValue;
                            incidentInstance.ResolvedTime = resolvedTimeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        public async Task<RuleGetResponse> GetRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                Tracing.Enter(invocationId, this, "GetRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/resourcegroups/" + resourceGroupName + "/providers/microsoft.insights/alertrules/" + ruleName + "?";
            url = url + "api-version=2014-04-01";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RuleGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RuleGetResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        JToken idValue = responseDoc["id"];
                        if (idValue != null)
                        {
                            string idInstance = (string)idValue;
                            result.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null)
                        {
                            string nameInstance = (string)nameValue;
                            result.Name = nameInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null)
                        {
                            string locationInstance = (string)locationValue;
                            result.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = responseDoc["tags"];
                        if (tagsSequenceElement != null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = (string)property.Name;
                                string tagsValue = (string)property.Value;
                                result.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null)
                        {
                            Rule propertiesInstance = new Rule();
                            result.Properties = propertiesInstance;
                            
                            JToken nameValue2 = propertiesValue["name"];
                            if (nameValue2 != null)
                            {
                                string nameInstance2 = (string)nameValue2;
                                propertiesInstance.Name = nameInstance2;
                            }
                            
                            JToken descriptionValue = propertiesValue["description"];
                            if (descriptionValue != null)
                            {
                                string descriptionInstance = (string)descriptionValue;
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken isEnabledValue = propertiesValue["isEnabled"];
                            if (isEnabledValue != null)
                            {
                                bool isEnabledInstance = (bool)isEnabledValue;
                                propertiesInstance.IsEnabled = isEnabledInstance;
                            }
                            
                            JToken conditionValue = propertiesValue["condition"];
                            if (conditionValue != null)
                            {
                                string typeName = (string)conditionValue["odata.type"];
                                if (typeName == "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition")
                                {
                                    ThresholdRuleCondition thresholdRuleConditionInstance = new ThresholdRuleCondition();
                                    
                                    JToken dataSourceValue = conditionValue["dataSource"];
                                    if (dataSourceValue != null)
                                    {
                                        string typeName2 = (string)dataSourceValue["odata.type"];
                                        if (typeName2 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                        {
                                            RuleMetricDataSource ruleMetricDataSourceInstance = new RuleMetricDataSource();
                                            
                                            JToken resourceUriValue = dataSourceValue["resourceUri"];
                                            if (resourceUriValue != null)
                                            {
                                                string resourceUriInstance = (string)resourceUriValue;
                                                ruleMetricDataSourceInstance.ResourceUri = resourceUriInstance;
                                            }
                                            
                                            JToken metricNamespaceValue = dataSourceValue["metricNamespace"];
                                            if (metricNamespaceValue != null)
                                            {
                                                string metricNamespaceInstance = (string)metricNamespaceValue;
                                                ruleMetricDataSourceInstance.MetricNamespace = metricNamespaceInstance;
                                            }
                                            
                                            JToken metricNameValue = dataSourceValue["metricName"];
                                            if (metricNameValue != null)
                                            {
                                                string metricNameInstance = (string)metricNameValue;
                                                ruleMetricDataSourceInstance.MetricName = metricNameInstance;
                                            }
                                            thresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance;
                                        }
                                    }
                                    
                                    JToken operatorValue = conditionValue["operator"];
                                    if (operatorValue != null)
                                    {
                                        // how
                                        ConditionOperator operatorInstance = (ConditionOperator)Enum.Parse(typeof(ConditionOperator), (string)operatorValue, false);
                                        thresholdRuleConditionInstance.Operator = operatorInstance;
                                    }
                                    
                                    JToken thresholdValue = conditionValue["threshold"];
                                    if (thresholdValue != null)
                                    {
                                        double thresholdInstance = (double)thresholdValue;
                                        thresholdRuleConditionInstance.Threshold = thresholdInstance;
                                    }
                                    
                                    JToken windowSizeValue = conditionValue["windowSize"];
                                    if (windowSizeValue != null)
                                    {
                                        TimeSpan windowSizeInstance = TypeConversion.From8601TimeSpan((string)windowSizeValue);
                                        thresholdRuleConditionInstance.WindowSize = windowSizeInstance;
                                    }
                                    propertiesInstance.Condition = thresholdRuleConditionInstance;
                                }
                                if (typeName == "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition")
                                {
                                    LocationThresholdRuleCondition locationThresholdRuleConditionInstance = new LocationThresholdRuleCondition();
                                    
                                    JToken dataSourceValue2 = conditionValue["dataSource"];
                                    if (dataSourceValue2 != null)
                                    {
                                        string typeName3 = (string)dataSourceValue2["odata.type"];
                                        if (typeName3 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                        {
                                            RuleMetricDataSource ruleMetricDataSourceInstance2 = new RuleMetricDataSource();
                                            
                                            JToken resourceUriValue2 = dataSourceValue2["resourceUri"];
                                            if (resourceUriValue2 != null)
                                            {
                                                string resourceUriInstance2 = (string)resourceUriValue2;
                                                ruleMetricDataSourceInstance2.ResourceUri = resourceUriInstance2;
                                            }
                                            
                                            JToken metricNamespaceValue2 = dataSourceValue2["metricNamespace"];
                                            if (metricNamespaceValue2 != null)
                                            {
                                                string metricNamespaceInstance2 = (string)metricNamespaceValue2;
                                                ruleMetricDataSourceInstance2.MetricNamespace = metricNamespaceInstance2;
                                            }
                                            
                                            JToken metricNameValue2 = dataSourceValue2["metricName"];
                                            if (metricNameValue2 != null)
                                            {
                                                string metricNameInstance2 = (string)metricNameValue2;
                                                ruleMetricDataSourceInstance2.MetricName = metricNameInstance2;
                                            }
                                            locationThresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance2;
                                        }
                                    }
                                    
                                    JToken windowSizeValue2 = conditionValue["windowSize"];
                                    if (windowSizeValue2 != null)
                                    {
                                        TimeSpan windowSizeInstance2 = TypeConversion.From8601TimeSpan((string)windowSizeValue2);
                                        locationThresholdRuleConditionInstance.WindowSize = windowSizeInstance2;
                                    }
                                    
                                    JToken failedLocationCountValue = conditionValue["failedLocationCount"];
                                    if (failedLocationCountValue != null)
                                    {
                                        int failedLocationCountInstance = (int)failedLocationCountValue;
                                        locationThresholdRuleConditionInstance.FailedLocationCount = failedLocationCountInstance;
                                    }
                                    propertiesInstance.Condition = locationThresholdRuleConditionInstance;
                                }
                            }
                            
                            JToken actionValue = propertiesValue["action"];
                            if (actionValue != null)
                            {
                                string typeName4 = (string)actionValue["odata.type"];
                                if (typeName4 == "Microsoft.Azure.Management.Insights.Models.RuleEmailAction")
                                {
                                    RuleEmailAction ruleEmailActionInstance = new RuleEmailAction();
                                    
                                    JToken sendToServiceOwnersValue = actionValue["sendToServiceOwners"];
                                    if (sendToServiceOwnersValue != null)
                                    {
                                        bool sendToServiceOwnersInstance = (bool)sendToServiceOwnersValue;
                                        ruleEmailActionInstance.SendToServiceOwners = sendToServiceOwnersInstance;
                                    }
                                    
                                    JArray customEmailsArray = (JArray)actionValue["customEmails"];
                                    if (customEmailsArray != null)
                                    {
                                        foreach (JToken customEmailsValue in customEmailsArray)
                                        {
                                            ruleEmailActionInstance.CustomEmails.Add((string)customEmailsValue);
                                        }
                                    }
                                    propertiesInstance.Action = ruleEmailActionInstance;
                                }
                            }
                            
                            JToken lastUpdatedTimeValue = propertiesValue["lastUpdatedTime"];
                            if (lastUpdatedTimeValue != null)
                            {
                                DateTime lastUpdatedTimeInstance = (DateTime)lastUpdatedTimeValue;
                                propertiesInstance.LastUpdatedTime = lastUpdatedTimeInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        public async Task<IncidentListResponse> ListIncidentsForRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                Tracing.Enter(invocationId, this, "ListIncidentsForRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/resourcegroups/" + resourceGroupName + "/providers/microsoft.insights/alertrules/" + ruleName + "/incidents?";
            url = url + "api-version=2014-04-01";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IncidentListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new IncidentListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        JArray valueArray = (JArray)responseDoc["value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                Incident incidentInstance = new Incident();
                                result.Value.Add(incidentInstance);
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null)
                                {
                                    string nameInstance = (string)nameValue;
                                    incidentInstance.Name = nameInstance;
                                }
                                
                                JToken ruleNameValue = valueValue["ruleName"];
                                if (ruleNameValue != null)
                                {
                                    string ruleNameInstance = (string)ruleNameValue;
                                    incidentInstance.RuleName = ruleNameInstance;
                                }
                                
                                JToken isActiveValue = valueValue["isActive"];
                                if (isActiveValue != null)
                                {
                                    bool isActiveInstance = (bool)isActiveValue;
                                    incidentInstance.IsActive = isActiveInstance;
                                }
                                
                                JToken activatedTimeValue = valueValue["activatedTime"];
                                if (activatedTimeValue != null)
                                {
                                    DateTime activatedTimeInstance = (DateTime)activatedTimeValue;
                                    incidentInstance.ActivatedTime = activatedTimeInstance;
                                }
                                
                                JToken resolvedTimeValue = valueValue["resolvedTime"];
                                if (resolvedTimeValue != null)
                                {
                                    DateTime resolvedTimeInstance = (DateTime)resolvedTimeValue;
                                    incidentInstance.ResolvedTime = resolvedTimeInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// The resource uri of the target of the alert rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        public async Task<RuleListResponse> ListRulesAsync(string resourceGroupName, string targetResourceUri, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("targetResourceUri", targetResourceUri);
                Tracing.Enter(invocationId, this, "ListRulesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/resourcegroups/" + resourceGroupName + "/providers/microsoft.insights/alertrules?";
            url = url + "api-version=2014-04-01";
            if (targetResourceUri != null)
            {
                url = url + "&$filter=targetResourceUri eq " + Uri.EscapeUriString(targetResourceUri);
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RuleListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RuleListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        RuleResourceCollection ruleResourceCollectionInstance = new RuleResourceCollection();
                        result.RuleResourceCollection = ruleResourceCollectionInstance;
                        
                        JArray valueArray = (JArray)responseDoc["value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                RuleResource ruleResourceInstance = new RuleResource();
                                ruleResourceCollectionInstance.Value.Add(ruleResourceInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null)
                                {
                                    string idInstance = (string)idValue;
                                    ruleResourceInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null)
                                {
                                    string nameInstance = (string)nameValue;
                                    ruleResourceInstance.Name = nameInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null)
                                {
                                    string locationInstance = (string)locationValue;
                                    ruleResourceInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = valueValue["tags"];
                                if (tagsSequenceElement != null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = (string)property.Name;
                                        string tagsValue = (string)property.Value;
                                        ruleResourceInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null)
                                {
                                    Rule propertiesInstance = new Rule();
                                    ruleResourceInstance.Properties = propertiesInstance;
                                    
                                    JToken nameValue2 = propertiesValue["name"];
                                    if (nameValue2 != null)
                                    {
                                        string nameInstance2 = (string)nameValue2;
                                        propertiesInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken descriptionValue = propertiesValue["description"];
                                    if (descriptionValue != null)
                                    {
                                        string descriptionInstance = (string)descriptionValue;
                                        propertiesInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken isEnabledValue = propertiesValue["isEnabled"];
                                    if (isEnabledValue != null)
                                    {
                                        bool isEnabledInstance = (bool)isEnabledValue;
                                        propertiesInstance.IsEnabled = isEnabledInstance;
                                    }
                                    
                                    JToken conditionValue = propertiesValue["condition"];
                                    if (conditionValue != null)
                                    {
                                        string typeName = (string)conditionValue["odata.type"];
                                        if (typeName == "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition")
                                        {
                                            ThresholdRuleCondition thresholdRuleConditionInstance = new ThresholdRuleCondition();
                                            
                                            JToken dataSourceValue = conditionValue["dataSource"];
                                            if (dataSourceValue != null)
                                            {
                                                string typeName2 = (string)dataSourceValue["odata.type"];
                                                if (typeName2 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                                {
                                                    RuleMetricDataSource ruleMetricDataSourceInstance = new RuleMetricDataSource();
                                                    
                                                    JToken resourceUriValue = dataSourceValue["resourceUri"];
                                                    if (resourceUriValue != null)
                                                    {
                                                        string resourceUriInstance = (string)resourceUriValue;
                                                        ruleMetricDataSourceInstance.ResourceUri = resourceUriInstance;
                                                    }
                                                    
                                                    JToken metricNamespaceValue = dataSourceValue["metricNamespace"];
                                                    if (metricNamespaceValue != null)
                                                    {
                                                        string metricNamespaceInstance = (string)metricNamespaceValue;
                                                        ruleMetricDataSourceInstance.MetricNamespace = metricNamespaceInstance;
                                                    }
                                                    
                                                    JToken metricNameValue = dataSourceValue["metricName"];
                                                    if (metricNameValue != null)
                                                    {
                                                        string metricNameInstance = (string)metricNameValue;
                                                        ruleMetricDataSourceInstance.MetricName = metricNameInstance;
                                                    }
                                                    thresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken operatorValue = conditionValue["operator"];
                                            if (operatorValue != null)
                                            {
                                                // how
                                                ConditionOperator operatorInstance = (ConditionOperator)Enum.Parse(typeof(ConditionOperator), (string)operatorValue, false);
                                                thresholdRuleConditionInstance.Operator = operatorInstance;
                                            }
                                            
                                            JToken thresholdValue = conditionValue["threshold"];
                                            if (thresholdValue != null)
                                            {
                                                double thresholdInstance = (double)thresholdValue;
                                                thresholdRuleConditionInstance.Threshold = thresholdInstance;
                                            }
                                            
                                            JToken windowSizeValue = conditionValue["windowSize"];
                                            if (windowSizeValue != null)
                                            {
                                                TimeSpan windowSizeInstance = TypeConversion.From8601TimeSpan((string)windowSizeValue);
                                                thresholdRuleConditionInstance.WindowSize = windowSizeInstance;
                                            }
                                            propertiesInstance.Condition = thresholdRuleConditionInstance;
                                        }
                                        if (typeName == "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition")
                                        {
                                            LocationThresholdRuleCondition locationThresholdRuleConditionInstance = new LocationThresholdRuleCondition();
                                            
                                            JToken dataSourceValue2 = conditionValue["dataSource"];
                                            if (dataSourceValue2 != null)
                                            {
                                                string typeName3 = (string)dataSourceValue2["odata.type"];
                                                if (typeName3 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                                {
                                                    RuleMetricDataSource ruleMetricDataSourceInstance2 = new RuleMetricDataSource();
                                                    
                                                    JToken resourceUriValue2 = dataSourceValue2["resourceUri"];
                                                    if (resourceUriValue2 != null)
                                                    {
                                                        string resourceUriInstance2 = (string)resourceUriValue2;
                                                        ruleMetricDataSourceInstance2.ResourceUri = resourceUriInstance2;
                                                    }
                                                    
                                                    JToken metricNamespaceValue2 = dataSourceValue2["metricNamespace"];
                                                    if (metricNamespaceValue2 != null)
                                                    {
                                                        string metricNamespaceInstance2 = (string)metricNamespaceValue2;
                                                        ruleMetricDataSourceInstance2.MetricNamespace = metricNamespaceInstance2;
                                                    }
                                                    
                                                    JToken metricNameValue2 = dataSourceValue2["metricName"];
                                                    if (metricNameValue2 != null)
                                                    {
                                                        string metricNameInstance2 = (string)metricNameValue2;
                                                        ruleMetricDataSourceInstance2.MetricName = metricNameInstance2;
                                                    }
                                                    locationThresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance2;
                                                }
                                            }
                                            
                                            JToken windowSizeValue2 = conditionValue["windowSize"];
                                            if (windowSizeValue2 != null)
                                            {
                                                TimeSpan windowSizeInstance2 = TypeConversion.From8601TimeSpan((string)windowSizeValue2);
                                                locationThresholdRuleConditionInstance.WindowSize = windowSizeInstance2;
                                            }
                                            
                                            JToken failedLocationCountValue = conditionValue["failedLocationCount"];
                                            if (failedLocationCountValue != null)
                                            {
                                                int failedLocationCountInstance = (int)failedLocationCountValue;
                                                locationThresholdRuleConditionInstance.FailedLocationCount = failedLocationCountInstance;
                                            }
                                            propertiesInstance.Condition = locationThresholdRuleConditionInstance;
                                        }
                                    }
                                    
                                    JToken actionValue = propertiesValue["action"];
                                    if (actionValue != null)
                                    {
                                        string typeName4 = (string)actionValue["odata.type"];
                                        if (typeName4 == "Microsoft.Azure.Management.Insights.Models.RuleEmailAction")
                                        {
                                            RuleEmailAction ruleEmailActionInstance = new RuleEmailAction();
                                            
                                            JToken sendToServiceOwnersValue = actionValue["sendToServiceOwners"];
                                            if (sendToServiceOwnersValue != null)
                                            {
                                                bool sendToServiceOwnersInstance = (bool)sendToServiceOwnersValue;
                                                ruleEmailActionInstance.SendToServiceOwners = sendToServiceOwnersInstance;
                                            }
                                            
                                            JArray customEmailsArray = (JArray)actionValue["customEmails"];
                                            if (customEmailsArray != null)
                                            {
                                                foreach (JToken customEmailsValue in customEmailsArray)
                                                {
                                                    ruleEmailActionInstance.CustomEmails.Add((string)customEmailsValue);
                                                }
                                            }
                                            propertiesInstance.Action = ruleEmailActionInstance;
                                        }
                                    }
                                    
                                    JToken lastUpdatedTimeValue = propertiesValue["lastUpdatedTime"];
                                    if (lastUpdatedTimeValue != null)
                                    {
                                        DateTime lastUpdatedTimeInstance = (DateTime)lastUpdatedTimeValue;
                                        propertiesInstance.LastUpdatedTime = lastUpdatedTimeInstance;
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// The rule to update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateRuleAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/resourcegroups/" + resourceGroupName + "/providers/microsoft.insights/alertrules/" + parameters.Properties.Name + "?";
            url = url + "api-version=2014-04-01";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject ruleCreateOrUpdateParametersValue = new JObject();
                requestDoc = ruleCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    ruleCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                ruleCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    ruleCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    propertiesValue["isEnabled"] = parameters.Properties.IsEnabled;
                    
                    if (parameters.Properties.Condition != null)
                    {
                        JObject conditionValue = new JObject();
                        propertiesValue["condition"] = conditionValue;
                        conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                        if (parameters.Properties.Condition is ThresholdRuleCondition)
                        {
                            ThresholdRuleCondition derived = (ThresholdRuleCondition)parameters.Properties.Condition;
                            
                            if (derived.DataSource != null)
                            {
                                JObject dataSourceValue = new JObject();
                                conditionValue["dataSource"] = dataSourceValue;
                                dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                if (derived.DataSource is RuleMetricDataSource)
                                {
                                    RuleMetricDataSource derived2 = (RuleMetricDataSource)derived.DataSource;
                                    
                                    if (derived2.ResourceUri != null)
                                    {
                                        dataSourceValue["resourceUri"] = derived2.ResourceUri;
                                    }
                                    
                                    if (derived2.MetricNamespace != null)
                                    {
                                        dataSourceValue["metricNamespace"] = derived2.MetricNamespace;
                                    }
                                    
                                    if (derived2.MetricName != null)
                                    {
                                        dataSourceValue["metricName"] = derived2.MetricName;
                                    }
                                }
                            }
                            
                            conditionValue["operator"] = derived.Operator.ToString();
                            
                            conditionValue["threshold"] = derived.Threshold;
                            
                            conditionValue["windowSize"] = TypeConversion.To8601String(derived.WindowSize);
                        }
                        if (parameters.Properties.Condition is LocationThresholdRuleCondition)
                        {
                            LocationThresholdRuleCondition derived3 = (LocationThresholdRuleCondition)parameters.Properties.Condition;
                            
                            if (derived3.DataSource != null)
                            {
                                JObject dataSourceValue2 = new JObject();
                                conditionValue["dataSource"] = dataSourceValue2;
                                dataSourceValue2["odata.type"] = derived3.DataSource.GetType().FullName;
                                if (derived3.DataSource is RuleMetricDataSource)
                                {
                                    RuleMetricDataSource derived4 = (RuleMetricDataSource)derived3.DataSource;
                                    
                                    if (derived4.ResourceUri != null)
                                    {
                                        dataSourceValue2["resourceUri"] = derived4.ResourceUri;
                                    }
                                    
                                    if (derived4.MetricNamespace != null)
                                    {
                                        dataSourceValue2["metricNamespace"] = derived4.MetricNamespace;
                                    }
                                    
                                    if (derived4.MetricName != null)
                                    {
                                        dataSourceValue2["metricName"] = derived4.MetricName;
                                    }
                                }
                            }
                            
                            conditionValue["windowSize"] = TypeConversion.To8601String(derived3.WindowSize);
                            
                            conditionValue["failedLocationCount"] = derived3.FailedLocationCount;
                        }
                    }
                    
                    if (parameters.Properties.Action != null)
                    {
                        JObject actionValue = new JObject();
                        propertiesValue["action"] = actionValue;
                        actionValue["odata.type"] = parameters.Properties.Action.GetType().FullName;
                        if (parameters.Properties.Action is RuleEmailAction)
                        {
                            RuleEmailAction derived5 = (RuleEmailAction)parameters.Properties.Action;
                            
                            actionValue["sendToServiceOwners"] = derived5.SendToServiceOwners;
                            
                            if (derived5.CustomEmails != null)
                            {
                                JArray customEmailsArray = new JArray();
                                foreach (string customEmailsItem in derived5.CustomEmails)
                                {
                                    customEmailsArray.Add(customEmailsItem);
                                }
                                actionValue["customEmails"] = customEmailsArray;
                            }
                        }
                    }
                    
                    propertiesValue["lastUpdatedTime"] = parameters.Properties.LastUpdatedTime;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Operations for managing the autoscale.
    /// </summary>
    public partial interface IAutoscaleOperations
    {
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> CreateOrUpdateSettingAsync(string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteSettingAsync(string resourceGroupName, string autoscaleSettingName, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AutoscaleSettingGetResponse> GetSettingAsync(string resourceGroupName, string autoscaleSettingName, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='targetResourceUri'>
        /// The resource uri of the target of the autoscale setting.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Autoscale settings operation response.
        /// </returns>
        Task<AutoscaleSettingListResponse> ListSettingsAsync(string resourceGroupName, string targetResourceUri, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UpdateSettingAsync(string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the autoscale.
    /// </summary>
    public static partial class AutoscaleOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateOrUpdateSetting(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters)
        {
            try
            {
                return operations.CreateOrUpdateSettingAsync(resourceGroupName, autoscaleSettingName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateOrUpdateSettingAsync(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateSettingAsync(resourceGroupName, autoscaleSettingName, parameters, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse DeleteSetting(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName)
        {
            try
            {
                return operations.DeleteSettingAsync(resourceGroupName, autoscaleSettingName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteSettingAsync(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName)
        {
            return operations.DeleteSettingAsync(resourceGroupName, autoscaleSettingName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AutoscaleSettingGetResponse GetSetting(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName)
        {
            try
            {
                return operations.GetSettingAsync(resourceGroupName, autoscaleSettingName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AutoscaleSettingGetResponse> GetSettingAsync(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName)
        {
            return operations.GetSettingAsync(resourceGroupName, autoscaleSettingName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='targetResourceUri'>
        /// The resource uri of the target of the autoscale setting.
        /// </param>
        /// <returns>
        /// The List Autoscale settings operation response.
        /// </returns>
        public static AutoscaleSettingListResponse ListSettings(this IAutoscaleOperations operations, string resourceGroupName, string targetResourceUri)
        {
            try
            {
                return operations.ListSettingsAsync(resourceGroupName, targetResourceUri).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='targetResourceUri'>
        /// The resource uri of the target of the autoscale setting.
        /// </param>
        /// <returns>
        /// The List Autoscale settings operation response.
        /// </returns>
        public static Task<AutoscaleSettingListResponse> ListSettingsAsync(this IAutoscaleOperations operations, string resourceGroupName, string targetResourceUri)
        {
            return operations.ListSettingsAsync(resourceGroupName, targetResourceUri, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UpdateSetting(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters)
        {
            try
            {
                return operations.UpdateSettingAsync(resourceGroupName, autoscaleSettingName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Insights.IAutoscaleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateSettingAsync(this IAutoscaleOperations operations, string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters)
        {
            return operations.UpdateSettingAsync(resourceGroupName, autoscaleSettingName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the autoscale.
    /// </summary>
    internal partial class AutoscaleOperations : IServiceOperations<InsightsManagementClient>, IAutoscaleOperations
    {
        /// <summary>
        /// Initializes a new instance of the AutoscaleOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AutoscaleOperations(InsightsManagementClient client)
        {
            this._client = client;
        }
        
        private InsightsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Insights.InsightsManagementClient.
        /// </summary>
        public InsightsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateOrUpdateSettingAsync(string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (autoscaleSettingName == null)
            {
                throw new ArgumentNullException("autoscaleSettingName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("autoscaleSettingName", autoscaleSettingName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateSettingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/resourcegroups/" + resourceGroupName + "/providers/microsoft.insights/autoscalesettings/" + autoscaleSettingName + "?";
            url = url + "api-version=2014-04-01";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject autoscaleSettingCreateOrUpdateParametersValue = new JObject();
                requestDoc = autoscaleSettingCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    autoscaleSettingCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                autoscaleSettingCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    autoscaleSettingCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Profiles != null)
                    {
                        JArray profilesArray = new JArray();
                        foreach (AutoscaleProfile profilesItem in parameters.Properties.Profiles)
                        {
                            JObject autoscaleProfileValue = new JObject();
                            profilesArray.Add(autoscaleProfileValue);
                            
                            if (profilesItem.Name != null)
                            {
                                autoscaleProfileValue["name"] = profilesItem.Name;
                            }
                            
                            if (profilesItem.Capacity != null)
                            {
                                JObject capacityValue = new JObject();
                                autoscaleProfileValue["capacity"] = capacityValue;
                                
                                if (profilesItem.Capacity.Minimum != null)
                                {
                                    capacityValue["minimum"] = profilesItem.Capacity.Minimum;
                                }
                                
                                if (profilesItem.Capacity.Maximum != null)
                                {
                                    capacityValue["maximum"] = profilesItem.Capacity.Maximum;
                                }
                                
                                if (profilesItem.Capacity.Default != null)
                                {
                                    capacityValue["default"] = profilesItem.Capacity.Default;
                                }
                            }
                            
                            if (profilesItem.Rules != null)
                            {
                                JArray rulesArray = new JArray();
                                foreach (ScaleRule rulesItem in profilesItem.Rules)
                                {
                                    JObject scaleRuleValue = new JObject();
                                    rulesArray.Add(scaleRuleValue);
                                    
                                    if (rulesItem.MetricTrigger != null)
                                    {
                                        JObject metricTriggerValue = new JObject();
                                        scaleRuleValue["metricTrigger"] = metricTriggerValue;
                                        
                                        if (rulesItem.MetricTrigger.MetricName != null)
                                        {
                                            metricTriggerValue["metricName"] = rulesItem.MetricTrigger.MetricName;
                                        }
                                        
                                        if (rulesItem.MetricTrigger.MetricNamespace != null)
                                        {
                                            metricTriggerValue["metricNamespace"] = rulesItem.MetricTrigger.MetricNamespace;
                                        }
                                        
                                        if (rulesItem.MetricTrigger.MetricResourceUri != null)
                                        {
                                            metricTriggerValue["metricResourceUri"] = rulesItem.MetricTrigger.MetricResourceUri;
                                        }
                                        
                                        metricTriggerValue["timeGrain"] = TypeConversion.To8601String(rulesItem.MetricTrigger.TimeGrain);
                                        
                                        metricTriggerValue["statistic"] = rulesItem.MetricTrigger.Statistic.ToString();
                                        
                                        metricTriggerValue["timeWindow"] = TypeConversion.To8601String(rulesItem.MetricTrigger.TimeWindow);
                                        
                                        metricTriggerValue["timeAggregation"] = rulesItem.MetricTrigger.TimeAggregation.ToString();
                                        
                                        metricTriggerValue["operator"] = rulesItem.MetricTrigger.Operator.ToString();
                                        
                                        metricTriggerValue["threshold"] = rulesItem.MetricTrigger.Threshold;
                                    }
                                    
                                    if (rulesItem.ScaleAction != null)
                                    {
                                        JObject scaleActionValue = new JObject();
                                        scaleRuleValue["scaleAction"] = scaleActionValue;
                                        
                                        scaleActionValue["direction"] = rulesItem.ScaleAction.Direction.ToString();
                                        
                                        scaleActionValue["type"] = rulesItem.ScaleAction.Type.ToString();
                                        
                                        if (rulesItem.ScaleAction.Value != null)
                                        {
                                            scaleActionValue["value"] = rulesItem.ScaleAction.Value;
                                        }
                                        
                                        scaleActionValue["cooldown"] = TypeConversion.To8601String(rulesItem.ScaleAction.Cooldown);
                                    }
                                }
                                autoscaleProfileValue["rules"] = rulesArray;
                            }
                            
                            if (profilesItem.FixedDate != null)
                            {
                                JObject fixedDateValue = new JObject();
                                autoscaleProfileValue["fixedDate"] = fixedDateValue;
                                
                                if (profilesItem.FixedDate.TimeZone != null)
                                {
                                    fixedDateValue["timeZone"] = profilesItem.FixedDate.TimeZone;
                                }
                                
                                fixedDateValue["start"] = profilesItem.FixedDate.Start;
                                
                                fixedDateValue["end"] = profilesItem.FixedDate.End;
                            }
                            
                            if (profilesItem.Recurrence != null)
                            {
                                JObject recurrenceValue = new JObject();
                                autoscaleProfileValue["recurrence"] = recurrenceValue;
                                
                                recurrenceValue["frequency"] = profilesItem.Recurrence.Frequency.ToString();
                                
                                if (profilesItem.Recurrence.Schedule != null)
                                {
                                    JObject scheduleValue = new JObject();
                                    recurrenceValue["schedule"] = scheduleValue;
                                    
                                    if (profilesItem.Recurrence.Schedule.TimeZone != null)
                                    {
                                        scheduleValue["timeZone"] = profilesItem.Recurrence.Schedule.TimeZone;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Days != null)
                                    {
                                        JArray daysArray = new JArray();
                                        foreach (string daysItem in profilesItem.Recurrence.Schedule.Days)
                                        {
                                            daysArray.Add(daysItem);
                                        }
                                        scheduleValue["days"] = daysArray;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Hours != null)
                                    {
                                        JArray hoursArray = new JArray();
                                        foreach (int hoursItem in profilesItem.Recurrence.Schedule.Hours)
                                        {
                                            hoursArray.Add(hoursItem);
                                        }
                                        scheduleValue["hours"] = hoursArray;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Minutes != null)
                                    {
                                        JArray minutesArray = new JArray();
                                        foreach (int minutesItem in profilesItem.Recurrence.Schedule.Minutes)
                                        {
                                            minutesArray.Add(minutesItem);
                                        }
                                        scheduleValue["minutes"] = minutesArray;
                                    }
                                }
                            }
                        }
                        propertiesValue["profiles"] = profilesArray;
                    }
                    
                    propertiesValue["enabled"] = parameters.Properties.Enabled;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.TargetResourceUri != null)
                    {
                        propertiesValue["targetResourceUri"] = parameters.Properties.TargetResourceUri;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteSettingAsync(string resourceGroupName, string autoscaleSettingName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (autoscaleSettingName == null)
            {
                throw new ArgumentNullException("autoscaleSettingName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("autoscaleSettingName", autoscaleSettingName);
                Tracing.Enter(invocationId, this, "DeleteSettingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/resourcegroups/" + resourceGroupName + "/providers/microsoft.insights/autoscalesettings/" + autoscaleSettingName + "?";
            url = url + "api-version=2014-04-01";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AutoscaleSettingGetResponse> GetSettingAsync(string resourceGroupName, string autoscaleSettingName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (autoscaleSettingName == null)
            {
                throw new ArgumentNullException("autoscaleSettingName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("autoscaleSettingName", autoscaleSettingName);
                Tracing.Enter(invocationId, this, "GetSettingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/resourcegroups/" + resourceGroupName + "/providers/microsoft.insights/autoscalesettings/" + autoscaleSettingName + "?";
            url = url + "api-version=2014-04-01";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AutoscaleSettingGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new AutoscaleSettingGetResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        JToken idValue = responseDoc["id"];
                        if (idValue != null)
                        {
                            string idInstance = (string)idValue;
                            result.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null)
                        {
                            string nameInstance = (string)nameValue;
                            result.Name = nameInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null)
                        {
                            string locationInstance = (string)locationValue;
                            result.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = responseDoc["tags"];
                        if (tagsSequenceElement != null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = (string)property.Name;
                                string tagsValue = (string)property.Value;
                                result.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null)
                        {
                            AutoscaleSetting propertiesInstance = new AutoscaleSetting();
                            result.Properties = propertiesInstance;
                            
                            JArray profilesArray = (JArray)propertiesValue["profiles"];
                            if (profilesArray != null)
                            {
                                foreach (JToken profilesValue in profilesArray)
                                {
                                    AutoscaleProfile autoscaleProfileInstance = new AutoscaleProfile();
                                    propertiesInstance.Profiles.Add(autoscaleProfileInstance);
                                    
                                    JToken nameValue2 = profilesValue["name"];
                                    if (nameValue2 != null)
                                    {
                                        string nameInstance2 = (string)nameValue2;
                                        autoscaleProfileInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken capacityValue = profilesValue["capacity"];
                                    if (capacityValue != null)
                                    {
                                        ScaleCapacity capacityInstance = new ScaleCapacity();
                                        autoscaleProfileInstance.Capacity = capacityInstance;
                                        
                                        JToken minimumValue = capacityValue["minimum"];
                                        if (minimumValue != null)
                                        {
                                            string minimumInstance = (string)minimumValue;
                                            capacityInstance.Minimum = minimumInstance;
                                        }
                                        
                                        JToken maximumValue = capacityValue["maximum"];
                                        if (maximumValue != null)
                                        {
                                            string maximumInstance = (string)maximumValue;
                                            capacityInstance.Maximum = maximumInstance;
                                        }
                                        
                                        JToken defaultValue = capacityValue["default"];
                                        if (defaultValue != null)
                                        {
                                            string defaultInstance = (string)defaultValue;
                                            capacityInstance.Default = defaultInstance;
                                        }
                                    }
                                    
                                    JArray rulesArray = (JArray)profilesValue["rules"];
                                    if (rulesArray != null)
                                    {
                                        foreach (JToken rulesValue in rulesArray)
                                        {
                                            ScaleRule scaleRuleInstance = new ScaleRule();
                                            autoscaleProfileInstance.Rules.Add(scaleRuleInstance);
                                            
                                            JToken metricTriggerValue = rulesValue["metricTrigger"];
                                            if (metricTriggerValue != null)
                                            {
                                                MetricTrigger metricTriggerInstance = new MetricTrigger();
                                                scaleRuleInstance.MetricTrigger = metricTriggerInstance;
                                                
                                                JToken metricNameValue = metricTriggerValue["metricName"];
                                                if (metricNameValue != null)
                                                {
                                                    string metricNameInstance = (string)metricNameValue;
                                                    metricTriggerInstance.MetricName = metricNameInstance;
                                                }
                                                
                                                JToken metricNamespaceValue = metricTriggerValue["metricNamespace"];
                                                if (metricNamespaceValue != null)
                                                {
                                                    string metricNamespaceInstance = (string)metricNamespaceValue;
                                                    metricTriggerInstance.MetricNamespace = metricNamespaceInstance;
                                                }
                                                
                                                JToken metricResourceUriValue = metricTriggerValue["metricResourceUri"];
                                                if (metricResourceUriValue != null)
                                                {
                                                    string metricResourceUriInstance = (string)metricResourceUriValue;
                                                    metricTriggerInstance.MetricResourceUri = metricResourceUriInstance;
                                                }
                                                
                                                JToken timeGrainValue = metricTriggerValue["timeGrain"];
                                                if (timeGrainValue != null)
                                                {
                                                    TimeSpan timeGrainInstance = TypeConversion.From8601TimeSpan((string)timeGrainValue);
                                                    metricTriggerInstance.TimeGrain = timeGrainInstance;
                                                }
                                                
                                                JToken statisticValue = metricTriggerValue["statistic"];
                                                if (statisticValue != null)
                                                {
                                                    // how
                                                    MetricStatisticType statisticInstance = (MetricStatisticType)Enum.Parse(typeof(MetricStatisticType), (string)statisticValue, false);
                                                    metricTriggerInstance.Statistic = statisticInstance;
                                                }
                                                
                                                JToken timeWindowValue = metricTriggerValue["timeWindow"];
                                                if (timeWindowValue != null)
                                                {
                                                    TimeSpan timeWindowInstance = TypeConversion.From8601TimeSpan((string)timeWindowValue);
                                                    metricTriggerInstance.TimeWindow = timeWindowInstance;
                                                }
                                                
                                                JToken timeAggregationValue = metricTriggerValue["timeAggregation"];
                                                if (timeAggregationValue != null)
                                                {
                                                    // how
                                                    TimeAggregationType timeAggregationInstance = (TimeAggregationType)Enum.Parse(typeof(TimeAggregationType), (string)timeAggregationValue, false);
                                                    metricTriggerInstance.TimeAggregation = timeAggregationInstance;
                                                }
                                                
                                                JToken operatorValue = metricTriggerValue["operator"];
                                                if (operatorValue != null)
                                                {
                                                    // how
                                                    ComparisonOperationType operatorInstance = (ComparisonOperationType)Enum.Parse(typeof(ComparisonOperationType), (string)operatorValue, false);
                                                    metricTriggerInstance.Operator = operatorInstance;
                                                }
                                                
                                                JToken thresholdValue = metricTriggerValue["threshold"];
                                                if (thresholdValue != null)
                                                {
                                                    double thresholdInstance = (double)thresholdValue;
                                                    metricTriggerInstance.Threshold = thresholdInstance;
                                                }
                                            }
                                            
                                            JToken scaleActionValue = rulesValue["scaleAction"];
                                            if (scaleActionValue != null)
                                            {
                                                ScaleAction scaleActionInstance = new ScaleAction();
                                                scaleRuleInstance.ScaleAction = scaleActionInstance;
                                                
                                                JToken directionValue = scaleActionValue["direction"];
                                                if (directionValue != null)
                                                {
                                                    // how
                                                    ScaleDirection directionInstance = (ScaleDirection)Enum.Parse(typeof(ScaleDirection), (string)directionValue, false);
                                                    scaleActionInstance.Direction = directionInstance;
                                                }
                                                
                                                JToken typeValue = scaleActionValue["type"];
                                                if (typeValue != null)
                                                {
                                                    // how
                                                    ScaleType typeInstance = (ScaleType)Enum.Parse(typeof(ScaleType), (string)typeValue, false);
                                                    scaleActionInstance.Type = typeInstance;
                                                }
                                                
                                                JToken valueValue = scaleActionValue["value"];
                                                if (valueValue != null)
                                                {
                                                    string valueInstance = (string)valueValue;
                                                    scaleActionInstance.Value = valueInstance;
                                                }
                                                
                                                JToken cooldownValue = scaleActionValue["cooldown"];
                                                if (cooldownValue != null)
                                                {
                                                    TimeSpan cooldownInstance = TypeConversion.From8601TimeSpan((string)cooldownValue);
                                                    scaleActionInstance.Cooldown = cooldownInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken fixedDateValue = profilesValue["fixedDate"];
                                    if (fixedDateValue != null)
                                    {
                                        TimeWindow fixedDateInstance = new TimeWindow();
                                        autoscaleProfileInstance.FixedDate = fixedDateInstance;
                                        
                                        JToken timeZoneValue = fixedDateValue["timeZone"];
                                        if (timeZoneValue != null)
                                        {
                                            string timeZoneInstance = (string)timeZoneValue;
                                            fixedDateInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        JToken startValue = fixedDateValue["start"];
                                        if (startValue != null)
                                        {
                                            DateTime startInstance = (DateTime)startValue;
                                            fixedDateInstance.Start = startInstance;
                                        }
                                        
                                        JToken endValue = fixedDateValue["end"];
                                        if (endValue != null)
                                        {
                                            DateTime endInstance = (DateTime)endValue;
                                            fixedDateInstance.End = endInstance;
                                        }
                                    }
                                    
                                    JToken recurrenceValue = profilesValue["recurrence"];
                                    if (recurrenceValue != null)
                                    {
                                        Recurrence recurrenceInstance = new Recurrence();
                                        autoscaleProfileInstance.Recurrence = recurrenceInstance;
                                        
                                        JToken frequencyValue = recurrenceValue["frequency"];
                                        if (frequencyValue != null)
                                        {
                                            // how
                                            RecurrenceFrequency frequencyInstance = (RecurrenceFrequency)Enum.Parse(typeof(RecurrenceFrequency), (string)frequencyValue, false);
                                            recurrenceInstance.Frequency = frequencyInstance;
                                        }
                                        
                                        JToken scheduleValue = recurrenceValue["schedule"];
                                        if (scheduleValue != null)
                                        {
                                            RecurrentSchedule scheduleInstance = new RecurrentSchedule();
                                            recurrenceInstance.Schedule = scheduleInstance;
                                            
                                            JToken timeZoneValue2 = scheduleValue["timeZone"];
                                            if (timeZoneValue2 != null)
                                            {
                                                string timeZoneInstance2 = (string)timeZoneValue2;
                                                scheduleInstance.TimeZone = timeZoneInstance2;
                                            }
                                            
                                            JArray daysArray = (JArray)scheduleValue["days"];
                                            if (daysArray != null)
                                            {
                                                foreach (JToken daysValue in daysArray)
                                                {
                                                    scheduleInstance.Days.Add((string)daysValue);
                                                }
                                            }
                                            
                                            JArray hoursArray = (JArray)scheduleValue["hours"];
                                            if (hoursArray != null)
                                            {
                                                foreach (JToken hoursValue in hoursArray)
                                                {
                                                    scheduleInstance.Hours.Add((int)hoursValue);
                                                }
                                            }
                                            
                                            JArray minutesArray = (JArray)scheduleValue["minutes"];
                                            if (minutesArray != null)
                                            {
                                                foreach (JToken minutesValue in minutesArray)
                                                {
                                                    scheduleInstance.Minutes.Add((int)minutesValue);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken enabledValue = propertiesValue["enabled"];
                            if (enabledValue != null)
                            {
                                bool enabledInstance = (bool)enabledValue;
                                propertiesInstance.Enabled = enabledInstance;
                            }
                            
                            JToken nameValue3 = propertiesValue["name"];
                            if (nameValue3 != null)
                            {
                                string nameInstance3 = (string)nameValue3;
                                propertiesInstance.Name = nameInstance3;
                            }
                            
                            JToken targetResourceUriValue = propertiesValue["targetResourceUri"];
                            if (targetResourceUriValue != null)
                            {
                                string targetResourceUriInstance = (string)targetResourceUriValue;
                                propertiesInstance.TargetResourceUri = targetResourceUriInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='targetResourceUri'>
        /// The resource uri of the target of the autoscale setting.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Autoscale settings operation response.
        /// </returns>
        public async Task<AutoscaleSettingListResponse> ListSettingsAsync(string resourceGroupName, string targetResourceUri, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("targetResourceUri", targetResourceUri);
                Tracing.Enter(invocationId, this, "ListSettingsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/resourcegroups/" + resourceGroupName + "/providers/microsoft.insights/autoscalesettings?";
            url = url + "api-version=2014-04-01";
            if (targetResourceUri != null)
            {
                url = url + "&$filter=targetResourceUri eq " + Uri.EscapeUriString(targetResourceUri);
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AutoscaleSettingListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new AutoscaleSettingListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        AutoscaleSettingResourceCollection autoscaleSettingResourceCollectionInstance = new AutoscaleSettingResourceCollection();
                        result.AutoscaleSettingResourceCollection = autoscaleSettingResourceCollectionInstance;
                        
                        JArray valueArray = (JArray)responseDoc["value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                AutoscaleSettingResource autoscaleSettingResourceInstance = new AutoscaleSettingResource();
                                autoscaleSettingResourceCollectionInstance.Value.Add(autoscaleSettingResourceInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null)
                                {
                                    string idInstance = (string)idValue;
                                    autoscaleSettingResourceInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null)
                                {
                                    string nameInstance = (string)nameValue;
                                    autoscaleSettingResourceInstance.Name = nameInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null)
                                {
                                    string locationInstance = (string)locationValue;
                                    autoscaleSettingResourceInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = valueValue["tags"];
                                if (tagsSequenceElement != null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = (string)property.Name;
                                        string tagsValue = (string)property.Value;
                                        autoscaleSettingResourceInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null)
                                {
                                    AutoscaleSetting propertiesInstance = new AutoscaleSetting();
                                    autoscaleSettingResourceInstance.Properties = propertiesInstance;
                                    
                                    JArray profilesArray = (JArray)propertiesValue["profiles"];
                                    if (profilesArray != null)
                                    {
                                        foreach (JToken profilesValue in profilesArray)
                                        {
                                            AutoscaleProfile autoscaleProfileInstance = new AutoscaleProfile();
                                            propertiesInstance.Profiles.Add(autoscaleProfileInstance);
                                            
                                            JToken nameValue2 = profilesValue["name"];
                                            if (nameValue2 != null)
                                            {
                                                string nameInstance2 = (string)nameValue2;
                                                autoscaleProfileInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken capacityValue = profilesValue["capacity"];
                                            if (capacityValue != null)
                                            {
                                                ScaleCapacity capacityInstance = new ScaleCapacity();
                                                autoscaleProfileInstance.Capacity = capacityInstance;
                                                
                                                JToken minimumValue = capacityValue["minimum"];
                                                if (minimumValue != null)
                                                {
                                                    string minimumInstance = (string)minimumValue;
                                                    capacityInstance.Minimum = minimumInstance;
                                                }
                                                
                                                JToken maximumValue = capacityValue["maximum"];
                                                if (maximumValue != null)
                                                {
                                                    string maximumInstance = (string)maximumValue;
                                                    capacityInstance.Maximum = maximumInstance;
                                                }
                                                
                                                JToken defaultValue = capacityValue["default"];
                                                if (defaultValue != null)
                                                {
                                                    string defaultInstance = (string)defaultValue;
                                                    capacityInstance.Default = defaultInstance;
                                                }
                                            }
                                            
                                            JArray rulesArray = (JArray)profilesValue["rules"];
                                            if (rulesArray != null)
                                            {
                                                foreach (JToken rulesValue in rulesArray)
                                                {
                                                    ScaleRule scaleRuleInstance = new ScaleRule();
                                                    autoscaleProfileInstance.Rules.Add(scaleRuleInstance);
                                                    
                                                    JToken metricTriggerValue = rulesValue["metricTrigger"];
                                                    if (metricTriggerValue != null)
                                                    {
                                                        MetricTrigger metricTriggerInstance = new MetricTrigger();
                                                        scaleRuleInstance.MetricTrigger = metricTriggerInstance;
                                                        
                                                        JToken metricNameValue = metricTriggerValue["metricName"];
                                                        if (metricNameValue != null)
                                                        {
                                                            string metricNameInstance = (string)metricNameValue;
                                                            metricTriggerInstance.MetricName = metricNameInstance;
                                                        }
                                                        
                                                        JToken metricNamespaceValue = metricTriggerValue["metricNamespace"];
                                                        if (metricNamespaceValue != null)
                                                        {
                                                            string metricNamespaceInstance = (string)metricNamespaceValue;
                                                            metricTriggerInstance.MetricNamespace = metricNamespaceInstance;
                                                        }
                                                        
                                                        JToken metricResourceUriValue = metricTriggerValue["metricResourceUri"];
                                                        if (metricResourceUriValue != null)
                                                        {
                                                            string metricResourceUriInstance = (string)metricResourceUriValue;
                                                            metricTriggerInstance.MetricResourceUri = metricResourceUriInstance;
                                                        }
                                                        
                                                        JToken timeGrainValue = metricTriggerValue["timeGrain"];
                                                        if (timeGrainValue != null)
                                                        {
                                                            TimeSpan timeGrainInstance = TypeConversion.From8601TimeSpan((string)timeGrainValue);
                                                            metricTriggerInstance.TimeGrain = timeGrainInstance;
                                                        }
                                                        
                                                        JToken statisticValue = metricTriggerValue["statistic"];
                                                        if (statisticValue != null)
                                                        {
                                                            // how
                                                            MetricStatisticType statisticInstance = (MetricStatisticType)Enum.Parse(typeof(MetricStatisticType), (string)statisticValue, false);
                                                            metricTriggerInstance.Statistic = statisticInstance;
                                                        }
                                                        
                                                        JToken timeWindowValue = metricTriggerValue["timeWindow"];
                                                        if (timeWindowValue != null)
                                                        {
                                                            TimeSpan timeWindowInstance = TypeConversion.From8601TimeSpan((string)timeWindowValue);
                                                            metricTriggerInstance.TimeWindow = timeWindowInstance;
                                                        }
                                                        
                                                        JToken timeAggregationValue = metricTriggerValue["timeAggregation"];
                                                        if (timeAggregationValue != null)
                                                        {
                                                            // how
                                                            TimeAggregationType timeAggregationInstance = (TimeAggregationType)Enum.Parse(typeof(TimeAggregationType), (string)timeAggregationValue, false);
                                                            metricTriggerInstance.TimeAggregation = timeAggregationInstance;
                                                        }
                                                        
                                                        JToken operatorValue = metricTriggerValue["operator"];
                                                        if (operatorValue != null)
                                                        {
                                                            // how
                                                            ComparisonOperationType operatorInstance = (ComparisonOperationType)Enum.Parse(typeof(ComparisonOperationType), (string)operatorValue, false);
                                                            metricTriggerInstance.Operator = operatorInstance;
                                                        }
                                                        
                                                        JToken thresholdValue = metricTriggerValue["threshold"];
                                                        if (thresholdValue != null)
                                                        {
                                                            double thresholdInstance = (double)thresholdValue;
                                                            metricTriggerInstance.Threshold = thresholdInstance;
                                                        }
                                                    }
                                                    
                                                    JToken scaleActionValue = rulesValue["scaleAction"];
                                                    if (scaleActionValue != null)
                                                    {
                                                        ScaleAction scaleActionInstance = new ScaleAction();
                                                        scaleRuleInstance.ScaleAction = scaleActionInstance;
                                                        
                                                        JToken directionValue = scaleActionValue["direction"];
                                                        if (directionValue != null)
                                                        {
                                                            // how
                                                            ScaleDirection directionInstance = (ScaleDirection)Enum.Parse(typeof(ScaleDirection), (string)directionValue, false);
                                                            scaleActionInstance.Direction = directionInstance;
                                                        }
                                                        
                                                        JToken typeValue = scaleActionValue["type"];
                                                        if (typeValue != null)
                                                        {
                                                            // how
                                                            ScaleType typeInstance = (ScaleType)Enum.Parse(typeof(ScaleType), (string)typeValue, false);
                                                            scaleActionInstance.Type = typeInstance;
                                                        }
                                                        
                                                        JToken valueValue2 = scaleActionValue["value"];
                                                        if (valueValue2 != null)
                                                        {
                                                            string valueInstance = (string)valueValue2;
                                                            scaleActionInstance.Value = valueInstance;
                                                        }
                                                        
                                                        JToken cooldownValue = scaleActionValue["cooldown"];
                                                        if (cooldownValue != null)
                                                        {
                                                            TimeSpan cooldownInstance = TypeConversion.From8601TimeSpan((string)cooldownValue);
                                                            scaleActionInstance.Cooldown = cooldownInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken fixedDateValue = profilesValue["fixedDate"];
                                            if (fixedDateValue != null)
                                            {
                                                TimeWindow fixedDateInstance = new TimeWindow();
                                                autoscaleProfileInstance.FixedDate = fixedDateInstance;
                                                
                                                JToken timeZoneValue = fixedDateValue["timeZone"];
                                                if (timeZoneValue != null)
                                                {
                                                    string timeZoneInstance = (string)timeZoneValue;
                                                    fixedDateInstance.TimeZone = timeZoneInstance;
                                                }
                                                
                                                JToken startValue = fixedDateValue["start"];
                                                if (startValue != null)
                                                {
                                                    DateTime startInstance = (DateTime)startValue;
                                                    fixedDateInstance.Start = startInstance;
                                                }
                                                
                                                JToken endValue = fixedDateValue["end"];
                                                if (endValue != null)
                                                {
                                                    DateTime endInstance = (DateTime)endValue;
                                                    fixedDateInstance.End = endInstance;
                                                }
                                            }
                                            
                                            JToken recurrenceValue = profilesValue["recurrence"];
                                            if (recurrenceValue != null)
                                            {
                                                Recurrence recurrenceInstance = new Recurrence();
                                                autoscaleProfileInstance.Recurrence = recurrenceInstance;
                                                
                                                JToken frequencyValue = recurrenceValue["frequency"];
                                                if (frequencyValue != null)
                                                {
                                                    // how
                                                    RecurrenceFrequency frequencyInstance = (RecurrenceFrequency)Enum.Parse(typeof(RecurrenceFrequency), (string)frequencyValue, false);
                                                    recurrenceInstance.Frequency = frequencyInstance;
                                                }
                                                
                                                JToken scheduleValue = recurrenceValue["schedule"];
                                                if (scheduleValue != null)
                                                {
                                                    RecurrentSchedule scheduleInstance = new RecurrentSchedule();
                                                    recurrenceInstance.Schedule = scheduleInstance;
                                                    
                                                    JToken timeZoneValue2 = scheduleValue["timeZone"];
                                                    if (timeZoneValue2 != null)
                                                    {
                                                        string timeZoneInstance2 = (string)timeZoneValue2;
                                                        scheduleInstance.TimeZone = timeZoneInstance2;
                                                    }
                                                    
                                                    JArray daysArray = (JArray)scheduleValue["days"];
                                                    if (daysArray != null)
                                                    {
                                                        foreach (JToken daysValue in daysArray)
                                                        {
                                                            scheduleInstance.Days.Add((string)daysValue);
                                                        }
                                                    }
                                                    
                                                    JArray hoursArray = (JArray)scheduleValue["hours"];
                                                    if (hoursArray != null)
                                                    {
                                                        foreach (JToken hoursValue in hoursArray)
                                                        {
                                                            scheduleInstance.Hours.Add((int)hoursValue);
                                                        }
                                                    }
                                                    
                                                    JArray minutesArray = (JArray)scheduleValue["minutes"];
                                                    if (minutesArray != null)
                                                    {
                                                        foreach (JToken minutesValue in minutesArray)
                                                        {
                                                            scheduleInstance.Minutes.Add((int)minutesValue);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken enabledValue = propertiesValue["enabled"];
                                    if (enabledValue != null)
                                    {
                                        bool enabledInstance = (bool)enabledValue;
                                        propertiesInstance.Enabled = enabledInstance;
                                    }
                                    
                                    JToken nameValue3 = propertiesValue["name"];
                                    if (nameValue3 != null)
                                    {
                                        string nameInstance3 = (string)nameValue3;
                                        propertiesInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken targetResourceUriValue = propertiesValue["targetResourceUri"];
                                    if (targetResourceUriValue != null)
                                    {
                                        string targetResourceUriInstance = (string)targetResourceUriValue;
                                        propertiesInstance.TargetResourceUri = targetResourceUriInstance;
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateSettingAsync(string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (autoscaleSettingName == null)
            {
                throw new ArgumentNullException("autoscaleSettingName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("autoscaleSettingName", autoscaleSettingName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateSettingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/subscriptions/" + this.Client.Credentials.SubscriptionId + "/resourcegroups/" + resourceGroupName + "/providers/microsoft.insights/autoscalesettings/" + autoscaleSettingName + "?";
            url = url + "api-version=2014-04-01";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject autoscaleSettingCreateOrUpdateParametersValue = new JObject();
                requestDoc = autoscaleSettingCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    autoscaleSettingCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                autoscaleSettingCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    autoscaleSettingCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Profiles != null)
                    {
                        JArray profilesArray = new JArray();
                        foreach (AutoscaleProfile profilesItem in parameters.Properties.Profiles)
                        {
                            JObject autoscaleProfileValue = new JObject();
                            profilesArray.Add(autoscaleProfileValue);
                            
                            if (profilesItem.Name != null)
                            {
                                autoscaleProfileValue["name"] = profilesItem.Name;
                            }
                            
                            if (profilesItem.Capacity != null)
                            {
                                JObject capacityValue = new JObject();
                                autoscaleProfileValue["capacity"] = capacityValue;
                                
                                if (profilesItem.Capacity.Minimum != null)
                                {
                                    capacityValue["minimum"] = profilesItem.Capacity.Minimum;
                                }
                                
                                if (profilesItem.Capacity.Maximum != null)
                                {
                                    capacityValue["maximum"] = profilesItem.Capacity.Maximum;
                                }
                                
                                if (profilesItem.Capacity.Default != null)
                                {
                                    capacityValue["default"] = profilesItem.Capacity.Default;
                                }
                            }
                            
                            if (profilesItem.Rules != null)
                            {
                                JArray rulesArray = new JArray();
                                foreach (ScaleRule rulesItem in profilesItem.Rules)
                                {
                                    JObject scaleRuleValue = new JObject();
                                    rulesArray.Add(scaleRuleValue);
                                    
                                    if (rulesItem.MetricTrigger != null)
                                    {
                                        JObject metricTriggerValue = new JObject();
                                        scaleRuleValue["metricTrigger"] = metricTriggerValue;
                                        
                                        if (rulesItem.MetricTrigger.MetricName != null)
                                        {
                                            metricTriggerValue["metricName"] = rulesItem.MetricTrigger.MetricName;
                                        }
                                        
                                        if (rulesItem.MetricTrigger.MetricNamespace != null)
                                        {
                                            metricTriggerValue["metricNamespace"] = rulesItem.MetricTrigger.MetricNamespace;
                                        }
                                        
                                        if (rulesItem.MetricTrigger.MetricResourceUri != null)
                                        {
                                            metricTriggerValue["metricResourceUri"] = rulesItem.MetricTrigger.MetricResourceUri;
                                        }
                                        
                                        metricTriggerValue["timeGrain"] = TypeConversion.To8601String(rulesItem.MetricTrigger.TimeGrain);
                                        
                                        metricTriggerValue["statistic"] = rulesItem.MetricTrigger.Statistic.ToString();
                                        
                                        metricTriggerValue["timeWindow"] = TypeConversion.To8601String(rulesItem.MetricTrigger.TimeWindow);
                                        
                                        metricTriggerValue["timeAggregation"] = rulesItem.MetricTrigger.TimeAggregation.ToString();
                                        
                                        metricTriggerValue["operator"] = rulesItem.MetricTrigger.Operator.ToString();
                                        
                                        metricTriggerValue["threshold"] = rulesItem.MetricTrigger.Threshold;
                                    }
                                    
                                    if (rulesItem.ScaleAction != null)
                                    {
                                        JObject scaleActionValue = new JObject();
                                        scaleRuleValue["scaleAction"] = scaleActionValue;
                                        
                                        scaleActionValue["direction"] = rulesItem.ScaleAction.Direction.ToString();
                                        
                                        scaleActionValue["type"] = rulesItem.ScaleAction.Type.ToString();
                                        
                                        if (rulesItem.ScaleAction.Value != null)
                                        {
                                            scaleActionValue["value"] = rulesItem.ScaleAction.Value;
                                        }
                                        
                                        scaleActionValue["cooldown"] = TypeConversion.To8601String(rulesItem.ScaleAction.Cooldown);
                                    }
                                }
                                autoscaleProfileValue["rules"] = rulesArray;
                            }
                            
                            if (profilesItem.FixedDate != null)
                            {
                                JObject fixedDateValue = new JObject();
                                autoscaleProfileValue["fixedDate"] = fixedDateValue;
                                
                                if (profilesItem.FixedDate.TimeZone != null)
                                {
                                    fixedDateValue["timeZone"] = profilesItem.FixedDate.TimeZone;
                                }
                                
                                fixedDateValue["start"] = profilesItem.FixedDate.Start;
                                
                                fixedDateValue["end"] = profilesItem.FixedDate.End;
                            }
                            
                            if (profilesItem.Recurrence != null)
                            {
                                JObject recurrenceValue = new JObject();
                                autoscaleProfileValue["recurrence"] = recurrenceValue;
                                
                                recurrenceValue["frequency"] = profilesItem.Recurrence.Frequency.ToString();
                                
                                if (profilesItem.Recurrence.Schedule != null)
                                {
                                    JObject scheduleValue = new JObject();
                                    recurrenceValue["schedule"] = scheduleValue;
                                    
                                    if (profilesItem.Recurrence.Schedule.TimeZone != null)
                                    {
                                        scheduleValue["timeZone"] = profilesItem.Recurrence.Schedule.TimeZone;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Days != null)
                                    {
                                        JArray daysArray = new JArray();
                                        foreach (string daysItem in profilesItem.Recurrence.Schedule.Days)
                                        {
                                            daysArray.Add(daysItem);
                                        }
                                        scheduleValue["days"] = daysArray;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Hours != null)
                                    {
                                        JArray hoursArray = new JArray();
                                        foreach (int hoursItem in profilesItem.Recurrence.Schedule.Hours)
                                        {
                                            hoursArray.Add(hoursItem);
                                        }
                                        scheduleValue["hours"] = hoursArray;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Minutes != null)
                                    {
                                        JArray minutesArray = new JArray();
                                        foreach (int minutesItem in profilesItem.Recurrence.Schedule.Minutes)
                                        {
                                            minutesArray.Add(minutesItem);
                                        }
                                        scheduleValue["minutes"] = minutesArray;
                                    }
                                }
                            }
                        }
                        propertiesValue["profiles"] = profilesArray;
                    }
                    
                    propertiesValue["enabled"] = parameters.Properties.Enabled;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.TargetResourceUri != null)
                    {
                        propertiesValue["targetResourceUri"] = parameters.Properties.TargetResourceUri;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
