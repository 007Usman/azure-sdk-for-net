// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Insights;
using Microsoft.Azure.Management.Insights.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Insights
{
    /// <summary>
    /// Operations for managing resources sku.
    /// </summary>
    internal partial class SkuOperations : IServiceOperations<InsightsManagementClient>, ISkuOperations
    {
        /// <param name='resourceId'>
        /// Required. The resource id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public Task<SkuListResponse> ListAvailableSkusAsync(string resourceId, CancellationToken cancellationToken)
        {
            // TODO: Confirm resourceId is antares
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }

            // TODO: Return valid antares Skus
            SkuListResponse response = new SkuListResponse
            {
                StatusCode = HttpStatusCode.OK,
                Skus = new SkuCollection
                {
                    Value = new List<Sku>
                    {
                        new Sku
                        {
                        }
                    }
                }
            };

            return Task.FromResult(response);
        }

        /// <param name='resourceId'>
        /// Required. The resource id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<SkuGetResponse> GetCurrentSkuAsync(string resourceId, CancellationToken cancellationToken)
        {
            AntaresSkuGetResponse response = await this.GetAntaresCurrentSkuInternalAsync(resourceId, cancellationToken);

            return new SkuGetResponse
            {
                RequestId = response.RequestId,
                StatusCode = response.StatusCode,
                Name = SkuOperations.GetSkuName(response.Properties.CurrentWorkerSize, response.Properties.Sku),
                Tier = response.Properties.Sku,
                Capacity = response.Properties.CurrentNumberOfWorkers
            };
        }

        /// <param name='resourceId'>
        /// The resource id.
        /// </param>
        /// <param name='skuName'>
        /// The sku name.
        /// </param>
        /// <param name='skuTier'>
        /// The sku tier.
        /// </param>
        /// <param name='skuCapacity'>
        /// The sku capacity.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public Task<SkuUpdateResponse> UpdateCurrentSkuAsync(string resourceId, string skuName, string skuTier, int skuCapacity, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }
            if (skuName == null)
            {
                throw new ArgumentNullException("skuName");
            }
            if (skuTier == null)
            {
                throw new ArgumentNullException("skuTier");
            }

            AntaresSkuUpdateRequest parameters = new AntaresSkuUpdateRequest
            {
                WorkerSize = SkuOperations.GetWorkerSize(skuName),
                Sku = skuTier,
                NumberOfWorkers = skuCapacity
            };

            return this.UpdateAntaresCurrentSkuInternalAsync(resourceId, parameters, cancellationToken);
        }

        private static int GetWorkerSize(string skuName)
        {
            // TODO: Validate mapping function with antares
            return int.Parse(skuName.Substring(1));
        }

        private static string GetSkuName(int workerSize, string tier)
        {
            // TODO: Validate mapping function with antares
            return tier[0] + workerSize.ToString();
        }
    }
}
